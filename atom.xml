<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dearfrankg.github.io/"/>
  <updated>2018-11-20T02:59:45.525Z</updated>
  <id>http://dearfrankg.github.io/</id>
  
  <author>
    <name>Frank Gutierrez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>intro to graphQL</title>
    <link href="http://dearfrankg.github.io/2018/11/19/20181119-intro-to-graphql/"/>
    <id>http://dearfrankg.github.io/2018/11/19/20181119-intro-to-graphql/</id>
    <published>2018-11-19T08:56:41.000Z</published>
    <updated>2018-11-20T02:59:45.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>The plan was to use <a href="https://goo.gl/kKqcy8" target="_blank" rel="noopener">styled-jsx</a> but it was not to be. It is not yet compatible with React 2.x. But <a href="https://goo.gl/pqGvoO" target="_blank" rel="noopener">styled-components</a> is so we’ll use that.</p><p>Our goal is to use cra to accomplish:</p><ul><li>Use create-react-app to build a SPA</li><li>Use GraphQL to query github’s API</li><li>Use Launchpad to prototype a GraphQL server</li><li>Use Express to create a local GraphQL server</li></ul><h2 id="Create-a-SPA"><a href="#Create-a-SPA" class="headerlink" title="Create a SPA"></a>Create a SPA</h2><p>This SPA will consist of <code>create-react-app</code> and <code>styled-components</code></p><ul><li>create a react app with style-components support<ul><li><code>npx create-react-app graphql-part1</code></li><li><code>cd graphql-part1</code></li><li><code>yarn add styled-components</code></li></ul></li></ul><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"><span class="keyword">import</span> AppHeader <span class="keyword">from</span> <span class="string">"./AppHeader"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppWrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;AppWrapper&gt;</span><br><span class="line">    &lt;AppHeader /&gt;</span><br><span class="line">  &lt;<span class="regexp">/AppWrapper&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>AppHeader.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">"./logo.svg"</span>;</span><br><span class="line"><span class="keyword">import</span> styled, &#123; keyframes &#125; <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rotate360 = keyframes<span class="string">`</span></span><br><span class="line"><span class="string">  from &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(0deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  to &#123;</span></span><br><span class="line"><span class="string">    transform: rotate(360deg);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppLogo = styled.img<span class="string">`</span></span><br><span class="line"><span class="string">  animation: <span class="subst">$&#123;rotate360&#125;</span> infinite 120s linear;</span></span><br><span class="line"><span class="string">  height: 80px;</span></span><br><span class="line"><span class="string">  &amp;:hover &#123;</span></span><br><span class="line"><span class="string">    animation: <span class="subst">$&#123;rotate360&#125;</span> infinite 1.5s linear;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppHeader = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: #222;</span></span><br><span class="line"><span class="string">  height: 150px;</span></span><br><span class="line"><span class="string">  padding: 20px;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppTitle = styled.h1<span class="string">`</span></span><br><span class="line"><span class="string">  font-size: 1.3em;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;AppHeader&gt;</span><br><span class="line">    &lt;AppLogo src=&#123;logo&#125; alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">    &lt;AppTitle&gt;Welcome to React&lt;<span class="regexp">/AppTitle&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>AppHeader&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><ul><li>start the server<ul><li><code>npm run start</code></li></ul></li></ul><p>We good!!</p><h2 id="Query-Github’s-GraphQL-API"><a href="#Query-Github’s-GraphQL-API" class="headerlink" title="Query Github’s GraphQL API"></a>Query Github’s GraphQL API</h2><ul><li>get a Github access token -&gt; click <a href="https://goo.gl/ANZ9oz" target="_blank" rel="noopener">here</a><ul><li>follow the instructions to get a token</li></ul></li><li>install these packages required for graphQL:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install --save \</span><br><span class="line">apollo-boost \</span><br><span class="line">react-apollo \</span><br><span class="line">graphql \</span><br><span class="line">apollo-cache-inmemory \</span><br><span class="line">graphql-tag \</span><br><span class="line">apollo-link-context</span><br></pre></td></tr></table></figure><ul><li>Setup these files:</li></ul><figure class="highlight bash"><figcaption><span>.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_GITHUB_ACCESS_TOKEN=<span class="string">"***YOUR_TOKEN***"</span></span><br><span class="line">REACT_APP_GITHUB_GRAPHQL_URL=<span class="string">"***YOUR_GRAPHQL_URL***"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  githubAccessToken: process.env.REACT_APP_GITHUB_ACCESS_TOKEN,</span><br><span class="line">  githubGraphqlUrl: process.env.REACT_APP_GITHUB_GRAPHQL_URL</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApolloClient &#125; <span class="keyword">from</span> <span class="string">"apollo-client"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpLink &#125; <span class="keyword">from</span> <span class="string">"apollo-link-http"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InMemoryCache &#125; <span class="keyword">from</span> <span class="string">"apollo-cache-inmemory"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApolloProvider &#125; <span class="keyword">from</span> <span class="string">"react-apollo"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setContext &#125; <span class="keyword">from</span> <span class="string">"apollo-link-context"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">"./config"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> authLink = setContext(<span class="function">(<span class="params">_, &#123; headers &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    ...headers,</span><br><span class="line">    authorization: <span class="string">`Bearer <span class="subst">$&#123;config.githubAccessToken&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  link: authLink.concat(<span class="keyword">new</span> HttpLink(&#123; <span class="attr">uri</span>: config.githubGraphqlUrl &#125;)),</span><br><span class="line">  cache: <span class="keyword">new</span> InMemoryCache()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/ApolloProvider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"><span class="keyword">import</span> AppHeader <span class="keyword">from</span> <span class="string">"./AppHeader"</span>;</span><br><span class="line"><span class="keyword">import</span> TopRepos <span class="keyword">from</span> <span class="string">"./TopRepos"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppWrapper = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  text-align: center;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;AppWrapper&gt;</span><br><span class="line">    &lt;AppHeader /&gt;</span><br><span class="line">    &lt;TopRepos /&gt;</span><br><span class="line">  &lt;<span class="regexp">/AppWrapper&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>TopRepos</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">"react-apollo"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">"apollo-boost"</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"styled-components"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TOP_REPOS = gql<span class="string">`</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    search(query: "stars:&gt;50000", type: REPOSITORY, first: 10) &#123;</span></span><br><span class="line"><span class="string">      repositoryCount</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          ... on Repository &#123;</span></span><br><span class="line"><span class="string">            name</span></span><br><span class="line"><span class="string">            owner &#123;</span></span><br><span class="line"><span class="string">              login</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            stargazers &#123;</span></span><br><span class="line"><span class="string">              totalCount</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RepoTable = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  margin: 50px 20px;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  flex-direction: column;</span></span><br><span class="line"><span class="string">  border: 1px solid #efefef;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RepoRow = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  border-bottom: 1px solid #efefef;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp;:nth-last-child(1) &#123;</span></span><br><span class="line"><span class="string">    border-bottom: none;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RepoHead = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  flex: 6;</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  font-weight: 600;</span></span><br><span class="line"><span class="string">  text-align: left;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp;:nth-last-child(1) &#123;</span></span><br><span class="line"><span class="string">    flex: 4;</span></span><br><span class="line"><span class="string">    text-align: right;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RepoCell = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  flex: 6;</span></span><br><span class="line"><span class="string">  padding: 10px 20px;</span></span><br><span class="line"><span class="string">  text-align: left;</span></span><br><span class="line"><span class="string">  white-space: nowrap;</span></span><br><span class="line"><span class="string">  overflow: hidden;</span></span><br><span class="line"><span class="string">  text-overflow: ellipsis;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp;:nth-child(2) &#123;</span></span><br><span class="line"><span class="string">    font-weight: 600;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &amp;:nth-last-child(1) &#123;</span></span><br><span class="line"><span class="string">    flex: 4;</span></span><br><span class="line"><span class="string">    text-align: right;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function"><span class="params">()</span> =&gt;</span> &lt;RepoTable&gt;Loading...&lt;<span class="regexp">/RepoTable&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Table = props =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;RepoTable&gt;</span></span><br><span class="line"><span class="regexp">    &lt;RepoRow&gt;</span></span><br><span class="line"><span class="regexp">      &lt;RepoHead&gt;Organization&lt;/</span>RepoHead&gt;</span><br><span class="line">      &lt;RepoHead&gt;Repo&lt;<span class="regexp">/RepoHead&gt;</span></span><br><span class="line"><span class="regexp">      &lt;RepoHead&gt;Stars&lt;/</span>RepoHead&gt;</span><br><span class="line">    &lt;<span class="regexp">/RepoRow&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#123;props.data.search.edges.map((row, i) =&gt; (</span></span><br><span class="line"><span class="regexp">      &lt;RepoRow key=&#123;i&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;RepoCell&gt;&#123;row.node.owner.login&#125;&lt;/</span>RepoCell&gt;</span><br><span class="line">        &lt;RepoCell&gt;&#123;row.node.name&#125;&lt;<span class="regexp">/RepoCell&gt;</span></span><br><span class="line"><span class="regexp">        &lt;RepoCell&gt;&#123;row.node.stargazers.totalCount&#125;&lt;/</span>RepoCell&gt;</span><br><span class="line">      &lt;<span class="regexp">/RepoRow&gt;</span></span><br><span class="line"><span class="regexp">    ))&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>RepoTable&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TopRepos = graphql(TOP_REPOS)(<span class="function"><span class="params">props</span> =&gt;</span></span><br><span class="line">  props.data.loading ? &lt;Loading /&gt; : &lt;Table &#123;...props&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">export default TopRepos;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/YTxgh1U.png" alt="create-react-app with graphql"></p><h2 id="Launchpad"><a href="#Launchpad" class="headerlink" title="Launchpad"></a>Launchpad</h2><ul><li><a href="https://launchpad.graphql.com/" target="_blank" rel="noopener">Launchpad</a> is like codepen for graphql.<ul><li>It allows you to design and try a graphql server.</li></ul></li><li>Every project is called a <code>pad</code> and provides a url:<ul><li><code>https://1jzxrj129.lp.gql.zone/graphql</code></li></ul></li><li>Launchpad give you the option to download your pad as a graphql server.<ul><li>It’s a node/express server consisting of two files:<ul><li>schema.js</li><li>server.js</li></ul></li></ul></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>What we learned:</p><ul><li><code>styled-jsx</code> is not compatible with React 2.x</li><li><code>styled-components</code> works with React 2.x<ul><li><code>styled-components</code> has a huge benefit that it allows you to create new tag names.</li><li><code>styled-components</code> has nested classes similar to sass.</li></ul></li><li><code>github</code> has a graphql API</li><li><code>graphql</code> has a lot of moving parts but it’s easy to setup</li><li><code>create-react-app</code> has <code>dotenv</code> built in. you must prefix your env vars with <code>REACT_APP</code></li><li><code>visual-studio-code</code> has extensions for graphql.</li><li><code>launchpad</code> allows you to quickly prototype graphql servers.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;The plan was to use &lt;a href=&quot;https://goo.gl/kKqcy8&quot; target
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>app development review</title>
    <link href="http://dearfrankg.github.io/2018/11/11/20181111-app-development-review/"/>
    <id>http://dearfrankg.github.io/2018/11/11/20181111-app-development-review/</id>
    <published>2018-11-11T16:57:08.000Z</published>
    <updated>2018-11-16T01:23:00.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>We will create an app from scratch that will have the following characteristics:</p><ul><li>works with my domain</li><li>works with app hosted on laptop for development</li><li>works with app hosted by vendor for production</li><li>works with OAuth authentication</li><li>works with Google <code>YouTube Data API 3</code> Services</li></ul><h2 id="Setup-Test-Web-Server"><a href="#Setup-Test-Web-Server" class="headerlink" title="Setup Test Web Server"></a>Setup Test Web Server</h2><ul><li>start nginx on port 80<ul><li><code>sudo brew services start nginx</code></li></ul></li><li>test web server<ul><li><code>curl 127.0.0.1</code> –&gt; hello</li></ul></li></ul><h2 id="Setup-Your-Domain"><a href="#Setup-Your-Domain" class="headerlink" title="Setup Your Domain"></a>Setup Your Domain</h2><ul><li>Purchase Domain Name<ul><li><a href="https://domains.google.com/registrar" target="_blank" rel="noopener">https://domains.google.com/registrar</a></li><li>purchased a domain name for \$12</li></ul></li><li>Configue DNS<ul><li>Edit Name Servers<ul><li>Choose: <code>Use the Google Domains name servers</code></li></ul></li><li>Add custom resource records<ul><li><code>name: @, type: A, TTL: 1H, IP: xxx.xxx.xxx.xxx</code></li><li><code>name: *, type: A, TTL: 1H, IP: xxx.xxx.xxx.xxx</code></li></ul></li></ul></li><li>test dns – <code>ping dearfrankg.com</code> –&gt; …</li></ul><blockquote><p>Local IP Address<br>Do not use services like <code>myip</code> or <code>myip.com</code> to find your IP address. They’re not always up to date. Instead you can use your WAN IP address from you router.</p></blockquote><blockquote><p>DNS Propagation<br>Make sure you use the same DNS server IPs when configuring your domain and your local network. This insures propagation will not be an issue. Google DNS IPs are <code>8.8.8.8</code> and <code>8.8.4.4</code>.</p></blockquote><h2 id="Setup-Port-Forwarding"><a href="#Setup-Port-Forwarding" class="headerlink" title="Setup Port Forwarding"></a>Setup Port Forwarding</h2><p>When someone is trying to access you web server at your home, the request will be received by your modem then router. How will the router know which PC to forward the request to? That’s what port forwarding is for.</p><ul><li>configure router for port forwarding<ul><li><code>macbook-pro: incoming 80 to external 80</code></li></ul></li><li>test port fowarding<ul><li>curl <a href="http://dearfrankg.com" target="_blank" rel="noopener">http://dearfrankg.com</a> –&gt; hello</li><li>open <a href="http://dearfrankg.com" target="_blank" rel="noopener">http://dearfrankg.com</a> –&gt; hello</li></ul></li></ul><h2 id="Setup-Reverse-Poxy"><a href="#Setup-Reverse-Poxy" class="headerlink" title="Setup Reverse Poxy"></a>Setup Reverse Poxy</h2><p>Using port forwarding we would need to open many ports for many apps. That’s undesirable because it’s less secure. As an alternative we can setup a reverse proxy server to route different urls to different apps.</p><ul><li>setup nginx as a reverse proxy<ul><li>configure <code>top level domain</code> to <code>nginx server</code><ul><li><code>dearfrankg.com</code> to port 80 <code>nginx web server</code></li></ul></li><li>configure <code>sub domains</code> to <code>web apps</code><ul><li><code>app1.dearfrankg.com</code> to port 5000 <code>app1</code></li><li><code>app2.dearfrankg.com</code> to port 5001 <code>app2</code></li></ul></li></ul></li></ul><p>Reverse Proxy drawbacks:</p><ul><li>Bandwidth transfer will be doubled: <code>client &lt;-&gt; proxy &lt;-&gt; app</code></li><li>The traffic of all subdomains will pass through the proxy, so you might need more than one.</li><li>If the proxy and the webservers are hosted by different providers, latency will increase noticeably.</li><li>If the proxy is down, so are all connected subdomains, except if you have multiple load balanced proxies.</li></ul><h2 id="Setup-App"><a href="#Setup-App" class="headerlink" title="Setup App"></a>Setup App</h2><ul><li>setup app skeleton<ul><li><code>npx create-react-app my-great-app</code></li></ul></li><li>add <code>sass</code> support<ul><li>npm install –save node-sass</li></ul></li><li>add folders to <code>src</code> directory<ul><li>assets, components, services, utils</li></ul></li><li>reconfigure app to work with new structure<ul><li>create a new Header component</li></ul></li></ul><h3 id="Setup-OAuth-Auhentication"><a href="#Setup-OAuth-Auhentication" class="headerlink" title="Setup OAuth Auhentication"></a>Setup OAuth Auhentication</h3><p><strong>Get OAuth Credentials</strong></p><ul><li>create project at the <a href="https://console.developers.google.com/" target="_blank" rel="noopener">console.developers.google.com</a></li><li>create credentials and choose <code>API key</code><ul><li>store <code>YOUR_API_KEY</code> for later use.</li></ul></li><li>create credentials and choose <code>OAuth client ID</code><ul><li>choose application type: <code>web application</code></li><li>choose name: <code>proj-name</code></li><li>choose Authorized Javascript Origins: `<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a></li><li>click create</li><li>store <code>CLIENT_ID</code> for later use.</li></ul></li><li>Enable YouTube Data API v3<ul><li>goto <a href="https://console.developers.google.com/apis/library" target="_blank" rel="noopener">API Library</a> and search for YouTube</li><li>Click on the <code>YouTube Data API v3</code>, then click <code>ENABLE</code></li></ul></li><li>Clear the last hour of cache<ul><li><code>cmd shift delete</code> then <code>choose last hour</code> and click delete.</li></ul></li></ul><h3 id="TO-BE-CONTINUED"><a href="#TO-BE-CONTINUED" class="headerlink" title="TO BE CONTINUED"></a>TO BE CONTINUED</h3><p>…<br>…</p><h2 id="Setup-Continuous-Workflow"><a href="#Setup-Continuous-Workflow" class="headerlink" title="Setup Continuous Workflow"></a>Setup Continuous Workflow</h2><p><strong>Continuous Integration (CI)</strong>: short-lived feature branches, team is merging to master branch multiple times per day, fully automated build and test process which gives feedback within 10 minutes; deployment is manual.</p><p><strong>Continuous Delivery (CD)</strong>: CI + the entire software release process is automated, it may be composed of multiple stages, and deployment to production is manual.</p><p><strong>Continuous Deployment</strong>: CI + CD + fully automated deployment to production.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;We will create an app from scratch that will have the foll
      
    
    </summary>
    
    
      <category term="devops" scheme="http://dearfrankg.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>intro to next.js part2</title>
    <link href="http://dearfrankg.github.io/2018/11/10/20181110-intro-to-next-part2/"/>
    <id>http://dearfrankg.github.io/2018/11/10/20181110-intro-to-next-part2/</id>
    <published>2018-11-10T22:42:38.000Z</published>
    <updated>2018-11-17T17:30:35.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>This is the follow up to <a href="/2018/10/31/20181031-intro-to-next-part1/">Intro to Next - Part1</a>. In Part2 we will cover how to communicate with the Github API.</p><ul><li><a href="https://goo.gl/WcgEZ6" target="_blank" rel="noopener">github repo</a></li></ul><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><blockquote><p>The code for this section: <a href="https://goo.gl/WcgEZ6" target="_blank" rel="noopener">repository</a> under the tag <code>getting-started</code>.</p></blockquote><h3 id="the-hard-way"><a href="#the-hard-way" class="headerlink" title="the hard way"></a>the hard way</h3><ul><li>manually install the necessary packages</li><li>update scripts in package.json</li><li>add pages directory</li><li>start dev server</li></ul><h3 id="the-easy-way"><a href="#the-easy-way" class="headerlink" title="the easy way"></a>the easy way</h3><ul><li>review choices at <a href="https://goo.gl/8iZS8D" target="_blank" rel="noopener">Next.js examples</a></li><li>follow the install instuctions in the readme file.</li><li>start dev server</li></ul><p>our install process:</p><ul><li>install app skeleton<ul><li><code>npx create-next-app --example with-styled-jsx-scss with-styled-jsx-scss-app next-part2</code></li></ul></li><li>start server<ul><li><code>cd next-part2</code></li><li><code>npm run dev</code></li></ul></li></ul><h2 id="Create-App-V1"><a href="#Create-App-V1" class="headerlink" title="Create App V1"></a>Create App V1</h2><blockquote><p>The code for this section: <a href="https://goo.gl/WcgEZ6" target="_blank" rel="noopener">repository</a> under the tag <code>app-v1</code>.</p></blockquote><p>Our objective with <code>app v1</code> is to pull some data from <code>github</code> and jazz it up a little with <code>bootstrap</code>.</p><p>Add the following packages:</p><ul><li><code>axios</code> - for fetching data<ul><li><code>npm install --save axios</code></li></ul></li></ul><p>Review the code in the repo:</p><ul><li><strong>index.js</strong></li></ul><p>A Index functional component called <code>App</code> that renders <code>meta</code>, <code>heading</code> and <code>github-repos</code></p><ul><li><strong>Meta.js</strong></li></ul><p>A Meta functional component that lets you include things in the head of the rendered HTML. In our case we include a bootstrap CSS link.</p><ul><li><strong>GithubRepos</strong></li></ul><p>This file contains two components. This file leverages <code>bootstrap</code>.</p><ul><li><p>repo functional component</p><ul><li>for rendering a repo row in the table</li></ul></li><li><p>GithubRepos class based component</p><ul><li>for rendering the repos table</li><li>methods:<ul><li>constructor - setup state</li><li>componentDidMount - get data from github</li><li>renderLoading - render loading message</li><li>renderError - render error message</li><li>render - render github repos table</li></ul></li></ul></li></ul><p><img src="https://i.imgur.com/HJauiBi.png" alt="app version 1"></p><h2 id="Create-App-V2"><a href="#Create-App-V2" class="headerlink" title="Create App V2"></a>Create App V2</h2><blockquote><p>The code for this section: <a href="https://goo.gl/WcgEZ6" target="_blank" rel="noopener">repository</a> under the tag <code>app-v2</code>.</p></blockquote><p>Our objective with <code>app v2</code> is to pull some data from <code>github</code> and jazz it up a little with <code>evergreen-ui</code>. Additionally we will leverage the <code>evergreen-ui table component</code> to provide search capability.</p><p>Add the following packages:</p><ul><li><code>evergreen-ui</code> - react component library<ul><li><code>npm install --save evergreen-ui</code></li></ul></li></ul><p>Review the code in the repo:</p><ul><li><strong>index.js</strong></li></ul><p>A Index functional component called <code>App</code> that renders <code>heading</code> and <code>github-repos</code>. This file leverages <code>evergreen-ui</code>.</p><ul><li><strong>GithubRepos</strong></li></ul><p>This file contains two components. This file leverages <code>evergreen-ui</code>.</p><ul><li><p>repo functional component</p><ul><li>for rendering a repo row in the table with a filter</li></ul></li><li><p>GithubRepos class based component</p><ul><li>for rendering the repos table</li><li>methods:<ul><li>constructor - setup state</li><li>componentDidMount - get data from github</li><li>renderLoading - render loading message</li><li>renderError - render error message</li><li>render - render github repos table</li></ul></li></ul></li></ul><p><img src="https://i.imgur.com/auyvFa9.png" alt="app version 2"></p><h2 id="Using-Mock-Data"><a href="#Using-Mock-Data" class="headerlink" title="Using Mock Data"></a>Using Mock Data</h2><blockquote><p>The code for this section: <a href="https://goo.gl/WcgEZ6" target="_blank" rel="noopener">repository</a> under the tag <code>mock-server</code>.</p></blockquote><p>Sometimes you run into a situation where the backend is down. When this happens often the developer will turn to a mock data solution. In this case we’ll use a package called <code>json-server</code></p><p>Add the following packages:</p><ul><li><code>json-server</code> - create a mock server<ul><li><code>npm install --save-dev json-server</code></li></ul></li></ul><p>Review the code in the repo:</p><ul><li><code>mock/data.json</code> – see image below</li><li><code>mock/config.json</code> – with mock server url</li><li><code>server.js</code> – server code</li><li><code>package.json</code> – add script to start mock server</li><li><code>components/GithubRepos.js</code> - slight mod</li></ul><p>Here we will copy the data that github is feeding us and place it into the <code>mock/data.json</code> file.</p><p><img src="https://i.imgur.com/VMIam5b.png" alt="mock data"></p><p>We’ll have to remove the first two lines of the data.</p><ul><li>total_count</li><li>incomplete_results</li></ul><p><strong>Try the mock server</strong></p><ul><li>start the client in terminal1<ul><li><code>npm run dev</code></li></ul></li><li>start the mock server in terminal2<ul><li><code>npm run mock</code></li></ul></li><li>Success is seeing data being populated</li><li>To disable the mock server<ul><li>Enter an empty MOCK_URL in <code>mock/config.json</code></li></ul></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Here’s what we learned:</p><ul><li>How to automatically install a skeleton app from <a href="https://goo.gl/8iZS8D" target="_blank" rel="noopener">Next.js examples</a></li><li>How to add a <code>Meta</code> component to include CSS assets like <code>bootstrap.css</code>.</li><li>How to use <code>axios</code> to access the <code>github API</code></li><li>How to use the <code>evergreen-ui</code> components <code>Pane</code>, <code>Spinner</code> and <code>Table</code></li><li>How to create a <code>mock server</code> so we can continue developing when our API is down.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;This is the follow up to &lt;a href=&quot;/2018/10/31/20181031-int
      
    
    </summary>
    
    
      <category term="nextjs" scheme="http://dearfrankg.github.io/tags/nextjs/"/>
    
      <category term="framework" scheme="http://dearfrankg.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>react storybook</title>
    <link href="http://dearfrankg.github.io/2018/11/06/20181105-react-storybook/"/>
    <id>http://dearfrankg.github.io/2018/11/06/20181105-react-storybook/</id>
    <published>2018-11-06T19:23:30.000Z</published>
    <updated>2018-11-11T14:02:50.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Storybook is the most popular UI component development tool for React. It helps you develop and design UI components outside your app in an isolated environment.</p><p><a href="https://www.learnstorybook.com/" target="_blank" rel="noopener">Learn Storybook</a> aims to teach tried-and-true patterns for component development using Storybook. You’ll walk through essential UI component techniques while building a UI from scratch in React.</p><h2 id="Steps-Covered"><a href="#Steps-Covered" class="headerlink" title="Steps Covered"></a>Steps Covered</h2><ul><li>setup</li><li>simple component</li><li>composite component</li><li>data</li><li>screens</li><li>testing</li><li>addons</li><li>deploy</li><li>conclusions</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.learnstorybook.com/" target="_blank" rel="noopener">Storybook Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Storybook is the most popular UI component development too
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="storybook" scheme="http://dearfrankg.github.io/tags/storybook/"/>
    
  </entry>
  
  <entry>
    <title>securing your web app</title>
    <link href="http://dearfrankg.github.io/2018/11/03/20181101-securing-your-web-app/"/>
    <id>http://dearfrankg.github.io/2018/11/03/20181101-securing-your-web-app/</id>
    <published>2018-11-03T07:28:15.000Z</published>
    <updated>2018-11-11T13:47:43.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>We’re going to explore ways that rogue agents can attack your web app, then we’ll a implement a plan that will protect against these attacks and keep your app secure.</p><h2 id="Attack-Vectors"><a href="#Attack-Vectors" class="headerlink" title="Attack Vectors"></a>Attack Vectors</h2><h3 id="MIM-Man-In-The-Middle"><a href="#MIM-Man-In-The-Middle" class="headerlink" title="MIM - Man In The Middle"></a>MIM - Man In The Middle</h3><p>MIM is an attack where an attacker sits in a public coffee shop sniffing internet traffic. When they are able to sniff your JWT token they can maliciously access your app.</p><p>Danger: When passing credentials such as passwords or JWT over the intenet insecurely then an attacker can maliciously access your app.</p><p>Solution: Use <code>HTTPS</code> to protect app internet traffic and use <code>VPN</code> to protect all internet tracffic.</p><h3 id="XSS-Cross-Site-Scripting"><a href="#XSS-Cross-Site-Scripting" class="headerlink" title="XSS - Cross Site Scripting"></a>XSS - Cross Site Scripting</h3><p>XSS is an attack technique where an atacker can run javascript in your app because they have control over a 3rd party script used in your app, allowing them to maliciously access your app</p><p>Danger: An attacker with the ability to run javascript in your app could gain access to an insecurely stored JWT and use that to maliciously access your app.</p><p>Solution: It’s not reasonable to control all 3rd party scripts, so the next best thing is to secure sensitive data from javascript. Store your JWT in a secure cookie with no javascript access and only https access. Do not store your JWT in web-storage, local-storage, or unprotected-cookie.</p><h3 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF - Cross Site Request Forgery"></a>CSRF - Cross Site Request Forgery</h3><p>CSRF is an attack technique where an attacker can call your app from their domain and your incorrectly configured app gives them authorization by passing an authorization cookie to the server.</p><p>Danger: When your cookie is incorrectly configured to be passed from any domain to your server on every request then a rogue agent can gain authorization to your app.</p><p>Solution: configure as follows:</p><ul><li>use cookie option <code>httpOnly</code> to prevents javascript from reading the cookie.</li><li>use cookie option <code>secure</code> which forces https use and prevents sniffing on the wire.</li><li>store JWT in a secure cookie to prevent access via XSS and MIM.</li><li>pass a x-csrf-token in both your cookie and html as a way to confirm app access from same domain.</li></ul><h3 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS - Cross Origin Resource Sharing"></a>CORS - Cross Origin Resource Sharing</h3><p>CORS is a utility that allows your app to access HTTP resources from other domains. By default it can only access them from the same domain with the exceptions of images and styles. Specifically accessing AJAX, fonts, ES-Modules from other domains requires CORS.</p><p>Danger: When CORS is configured incorectly can allow any domain to access your server this enables a rogue agent to attack from their domain. By configuring which domains can and cannot access we make our app much more secure.</p><p>Solution: Configure CORS correctly utilizing white-lists and black-lists to secure your site.</p><h2 id="Protection-Plan"><a href="#Protection-Plan" class="headerlink" title="Protection Plan"></a>Protection Plan</h2><p>TBD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;We’re going to explore ways that rogue agents can attack y
      
    
    </summary>
    
    
      <category term="security" scheme="http://dearfrankg.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>server side rendering in react</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-server-side-rendering-in-React/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-server-side-rendering-in-React/</id>
    <published>2018-11-01T06:38:07.000Z</published>
    <updated>2018-11-17T16:30:22.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Let’s discuss how to build universal applications with React. First some definitions:</p><p><strong>Server-Side Rendering (SSR)</strong><br>The ability of a front-end framework to render markup while running on a back-end system.</p><p><strong>Single Page Application (SPA)</strong><br>SPA’s have advantages in speed but the initial server request is generally returning an empty HTML file with CSS and JavaScript (JS) links. Then the external files need to be fetched in order for the markup to render. This requires a longer wait for the initial render, and crawlers may interpret your page as empty.</p><p><strong>Universal Application</strong><br>Universal Applications have the ability to render both on the server and client. Rendering on the server initially, then leverage SPAs on the client. The user gets fully rendered HTML with the initial request without waiting for JS to load.</p><blockquote><p>SSR + SPA = Universal App</p></blockquote><p>Imagine the huge improvement for users navigating on slow 3G networks. Rather than waiting for over 20s for the website to load, you get content on their screen almost instantly.</p><p><img src="https://goo.gl/Wd7Bm9" alt=""></p><p>The SEO department is happy because the SEO data always rendered, and the Crawlers are happy because they see your site as any other static site and can index the content.</p><p>So to recap, the two main benefits we get from SSR are:</p><ul><li>Faster times for the initial page render</li><li>Fully indexable HTML pages</li></ul><p><strong>Understanding SSR — one step at a time</strong><br>We’ll take an iterative approach to build our complete SSR example. We start with React’s API for server rendering and we’ll add something to the mix at each step. You can follow along using this <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> and the tags defined there for each step.</p><h2 id="Basic-SSR"><a href="#Basic-SSR" class="headerlink" title="Basic SSR"></a>Basic SSR</h2><blockquote><p>Checkout the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> <code>basic</code> tag to see the working code.</p></blockquote><ul><li>our server serves static files from the output folder</li><li>our server has one route that handles all non-static requests and responds with HTML.</li><li>our client executes <code>ReactDOM.hydrate</code> will attach event handlers to the server-rendered React app.</li></ul><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  const reactDom = renderToString(jsx);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  res.writeHead(200, &#123; "Content-Type": "text/html" &#125;);</span></span><br><span class="line"><span class="xml">  res.end(htmlTemplate(reactDom));</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml">...</span></span><br></pre></td></tr></table></figure><p>On the server we render a string to an HTML template.</p><figure class="highlight js"><figcaption><span>src/client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ReactDOM.hydrate(<span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span>, app);</span></span><br><span class="line"><span class="xml">...</span></span><br></pre></td></tr></table></figure><p>If you call <code>ReactDOM.hydrate()</code> on a node that already has this server-rendered markup, <strong>React will preserve it and only attach event handlers</strong>, allowing you to have a very performant first-load experience.</p><figure class="highlight html"><figcaption><span>source from the browser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-reactroot</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to React SSR!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/contact"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is the contact page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./app.bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here we see the fully rendered HTML for the app. I added line breaks for legibility.</p><p>You just created your first server-rendered React app!</p><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><blockquote><p>Checkout the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> <code>router</code> tag to see the working code.</p></blockquote><p>Let’s add a few routes and see how we handle the server part.</p><figure class="highlight js"><figcaption><span>src/components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/about"</span> exact component=&#123;About&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/contact"</span> exact component=&#123;Contact&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure><p>The Layout component now renders multiple routes on the client.</p><figure class="highlight js"><figcaption><span>src/components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; StaticRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line">...</span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> jsx = (</span><br><span class="line">    &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">      &lt;Layout /&gt;</span><br><span class="line">    &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  const reactDom = renderToString(jsx);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  res.writeHead(200, &#123; "Content-Type": "text/</span>html<span class="string">" &#125;);</span></span><br><span class="line"><span class="string">  res.end(htmlTemplate(reactDom));</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>On the server, we need to wrap our React application in the <code>StaticRouter</code> component and provide the location. As a side note, the <code>context</code> is used for tracking potential redirects while rendering the React DOM. This needs to be handled with a <code>3XX response</code> from the server.</p><h2 id="State-Management"><a href="#State-Management" class="headerlink" title="State Management"></a>State Management</h2><blockquote><p>Checkout the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> <code>redux</code> tag to see the working code.</p></blockquote><p>In the scenario, when using Redux to handle state management on the client. We sometimes render parts of the DOM based on state, so it makes sense to initialize Redux on the server.</p><p>If your app is dispatching actions on the server, it needs to capture the state and send it over the wire together with the HTML. On the client, we feed that initial state into Redux.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; Provider <span class="keyword">as</span> ReduxProvider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> store = createStore();</span><br><span class="line"></span><br><span class="line">  store.dispatch(initializeSession());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> jsx = (</span><br><span class="line">    &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">        &lt;Layout /&gt;</span><br><span class="line">      &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ReduxProvider&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> reactDom = renderToString(jsx);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reduxState = store.getState();</span><br><span class="line"></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">  res.end(htmlTemplate(reactDom, reduxState));</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The HTML template will store the stringified <code>reduxState</code> in <code>window.REDUX_DATA</code></p><figure class="highlight js"><figcaption><span>src/client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider <span class="keyword">as</span> ReduxProvider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(<span class="built_in">window</span>.REDUX_DATA);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsx = (</span><br><span class="line">  &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Layout /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ReduxProvider&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line">ReactDOM.hydrate(jsx, app);</span><br></pre></td></tr></table></figure><p>On the client, we initialize the state with state from the server. This process is similar to the DOM hydration.</p><h2 id="Fetching-Data"><a href="#Fetching-Data" class="headerlink" title="Fetching Data"></a>Fetching Data</h2><blockquote><p>Checkout the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> <code>fetch</code> tag to see the working code.</p></blockquote><p>It a typical SPA the client will fetch data to render and you may see a spinner while the fetch is in progress. This is not a good UX. We don’t need no stinking spinner! To avoid that we will fetch the data from the server.</p><p>We will make our API calls from the server and store the data in Redux, then render the HTML with all the relevant data. We need a way to define what data is required for each route so we’ll create a routes config file.</p><figure class="highlight js"><figcaption><span>src/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/about"</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/contact"</span>,</span><br><span class="line">    component: Contact,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/secret"</span>,</span><br><span class="line">    component: Secret,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>The main thing the <code>routes.js</code> file does is map the route to the component.</p><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">"../store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">Home.serverFetch = fetchData; <span class="comment">// static declaration of data requirements</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In <code>home.js</code> above we create a <code>serverFetch</code> class property that will be mapped to a Redux thunk action responsible for fetching all the data required for the component. For each route there should be a matching component that might need data. If it does it should have a <code>serverFetch</code> property that fetches all the data required for the component. Remember that Redux thunk actions return a promise when dispatched.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; StaticRouter, matchPath &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">"./routes"</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataRequirements = routes</span><br><span class="line">    .filter(<span class="function"><span class="params">route</span> =&gt;</span> matchPath(req.url, route)) <span class="comment">// filter matching paths</span></span><br><span class="line">    .map(<span class="function"><span class="params">route</span> =&gt;</span> route.component) <span class="comment">// map to components</span></span><br><span class="line">    .filter(<span class="function"><span class="params">comp</span> =&gt;</span> comp.serverFetch) <span class="comment">// check if components have data requirement</span></span><br><span class="line">    .map(<span class="function"><span class="params">comp</span> =&gt;</span> store.dispatch(comp.serverFetch())); <span class="comment">// dispatch data requirement</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.all(dataRequirements).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> jsx = (</span><br><span class="line">      &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">          &lt;Layout /&gt;</span><br><span class="line">        &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ReduxProvider&gt;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> reactDom = renderToString(jsx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reduxState = store.getState();</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(htmlTemplate(reactDom, reduxState));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The <code>routes.js</code> includes a list of components that will be rendered for the current URL. We fetch any required data in parallel and wait for them to complete. Finally we resume the server render with all the data in Redux.</p><p>You probably notice that this comes with a performance penalty, because we’re delaying the render until the data is fetched. This is where you start comparing metrics and do your best to understand which calls are essential and which aren’t. For example, fetching products for an e-commerce app might be crucial, but prices and sidebar filters can be lazy loaded.</p><h2 id="Helmet"><a href="#Helmet" class="headerlink" title="Helmet"></a>Helmet</h2><blockquote><p>Checkout the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> <code>helmet</code> tag to see the working code.</p></blockquote><p><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a> has great support for SSR and allows us to set values in our <code>&lt;head&gt;</code> tag. For example, you may want to set the <em>SEO data</em>, <em>title, meta tags, keywords</em>, and so on.</p><p>Keep in mind that the <code>&lt;head&gt;</code> tag is normally not part of your React app!</p><figure class="highlight js"><figcaption><span>contact.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">"react-helmet"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Contact = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;This is the contact page&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Helmet&gt;</span></span><br><span class="line"><span class="regexp">      &lt;title&gt;Contact Page&lt;/</span>title&gt;</span><br><span class="line">      &lt;meta name=<span class="string">"description"</span> content=<span class="string">"This is a proof of concept for React SSR"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Helmet&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Contact;</span><br></pre></td></tr></table></figure><p>Just add your <code>head</code> data as children inside your <code>&lt;Helmet&gt;</code> tags. This gives you support for changing values outside the mounted React app on the client.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">"react-helmet"</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.get( <span class="string">"/*"</span>, ( req, res ) =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">const</span> jsx = (</span><br><span class="line">            &lt;ReduxProvider store=&#123; store &#125;&gt;</span><br><span class="line">                &lt;StaticRouter context=&#123; context &#125; location=&#123; req.url &#125;&gt;</span><br><span class="line">                    &lt;Layout /&gt;</span><br><span class="line">                &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ReduxProvider&gt;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> reactDom = renderToString( jsx );</span><br><span class="line">        <span class="keyword">const</span> reduxState = store.getState( );</span><br><span class="line">        <span class="keyword">const</span> helmetData = Helmet.renderStatic( );</span><br><span class="line"></span><br><span class="line">        res.writeHead( <span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125; );</span><br><span class="line">        res.end( htmlTemplate( reactDom, reduxState, helmetData ) );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlTemplate</span>(<span class="params"> reactDom, reduxState, helmetData </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123; helmetData.title.toString( ) &#125;</span></span></span><br><span class="line"><span class="string">            <span class="subst">$&#123; helmetData.meta.toString( ) &#125;</span></span></span><br><span class="line"><span class="string">            &lt;title&gt;React SSR&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is Helmet extracting the head data and rendering it inside the HTML template.</p><p>And now we have a fully functional React SSR example!</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><blockquote><p>Checkout the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> <code>master</code> branch for the final version.</p></blockquote><p>What have we accomplished using SSR:</p><ul><li>We added basic SSR which allows rendering for a faster first render and indexing for the Crawler.</li><li>We added routing which allows the server to render different routes.</li><li>We added state management which allows the server to render conditional markup.</li><li>We added fetching data which allows the server to fetch data preventing the spinner.</li><li>We added Helmet which allows making dynamic changes to the <code>&lt;head&gt;</code>.</li></ul><p>Is it worth adding SSR to your application? As always, it depends. It’s a must if your website is public and accessible to hundreds of thousands of users. But if you’re building a tool/dashboard-like application it might not be worth the effort.</p><p>However, leveraging the power of universal apps is a step forward for the front-end community.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/VGKPcK" target="_blank" rel="noopener">Demystifying server-side rendering in React</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Let’s discuss how to build universal applications with Rea
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="SSR" scheme="http://dearfrankg.github.io/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>intro to next.js part1</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-intro-to-next-part1/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-intro-to-next-part1/</id>
    <published>2018-11-01T03:39:48.000Z</published>
    <updated>2018-11-16T22:46:40.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Next.js is a react framework for building any kind of react app from mobile to desktop to from SPA to static pages. This article will dive into how to get started quickly.</p><ul><li><a href="https://goo.gl/XL1hfs" target="_blank" rel="noopener">github repo</a></li></ul><h3 id="Why-use-Next-js"><a href="#Why-use-Next-js" class="headerlink" title="Why use Next.js"></a>Why use Next.js</h3><p><strong>Zero Setup</strong><br>Automatic code splitting, filesystem based routing, hot code reloading and universal rendering.</p><p><strong>Fully Extensible</strong><br>Complete control over Babel and Webpack. Customizable server, routing and next-plugins.</p><p><strong>Ready for Production</strong><br>Optimized for a smaller build size, faster dev compilation and dozens of other improvements.</p><h2 id="Create-a-Next-js-project"><a href="#Create-a-Next-js-project" class="headerlink" title="Create a Next.js project"></a>Create a Next.js project</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul><li>install <code>node</code> using <code>nvm</code></li></ul><figure class="highlight plain"><figcaption><span>on the command line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello-next</span><br><span class="line">cd hello-next</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save react react-dom next</span><br><span class="line">mkdir pages</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>edit package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Run the server</strong></p><figure class="highlight plain"><figcaption><span>on the command line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><strong>Open the app</strong></p><p>open <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> from your favorite browser</p><blockquote><p>You’ll see a page with a <code>404 error</code> indicating the page cannot be found.</p></blockquote><h2 id="Creating-your-first-page"><a href="#Creating-your-first-page" class="headerlink" title="Creating your first page"></a>Creating your first page</h2><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Index;</span></span><br></pre></td></tr></table></figure><blockquote><p>If you make a typo error messages appear on the browser page.</p></blockquote><h2 id="Navigate-with-Link"><a href="#Navigate-with-Link" class="headerlink" title="Navigate with Link"></a>Navigate with Link</h2><p><strong>Using a link</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">"next/link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a&gt;About Page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></table></figure><ul><li>Link works with browser history (back button)</li><li>Don’t style a Link, style it’s children</li><li>Link works with <code>a</code> and <code>button</code> tags and any tag with an <code>onClick</code> event.</li></ul><h2 id="Creating-and-using-a-Header-component"><a href="#Creating-and-using-a-Header-component" class="headerlink" title="Creating and using a Header component"></a>Creating and using a Header component</h2><p><strong>Create a Header component</strong></p><figure class="highlight js"><figcaption><span>components/Header.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">"next/link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkStyle = &#123;</span><br><span class="line">  marginRight: <span class="number">15</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">      &lt;a style=&#123;linkStyle&#125;&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a style=&#123;linkStyle&#125;&gt;About&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><p><strong>Using the Header component</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"../components/Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Creating-and-using-a-Layout-component"><a href="#Creating-and-using-a-Layout-component" class="headerlink" title="Creating and using a Layout component"></a>Creating and using a Layout component</h2><p><strong>Create the Layout component</strong></p><figure class="highlight js"><figcaption><span>components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> layoutStyle = &#123;</span><br><span class="line">  margin: <span class="number">20</span>,</span><br><span class="line">  padding: <span class="number">20</span>,</span><br><span class="line">  border: <span class="string">"1px solid #DDD"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;layoutStyle&#125;&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &#123;children&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Layout;</span></span><br></pre></td></tr></table></figure><p><strong>Use the Layout component on index page</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"../components/Layout.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Layout&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Layout&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Use the Layout component on about page</strong></p><figure class="highlight js"><figcaption><span>pages/about.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"../components/Layout.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Layout&gt;</span><br><span class="line">    &lt;p&gt;About page&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Layout&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Deploy-your-app"><a href="#Deploy-your-app" class="headerlink" title="Deploy your app"></a>Deploy your app</h2><p><strong>Export the app to static files</strong></p><ul><li>add script to package.json<ul><li>`”export”: “next export”</li></ul></li><li>use export script<ul><li><code>npm run export</code></li><li>notice a new <code>out</code> directory was created</li></ul></li></ul><p><strong>Deploy app</strong></p><ul><li>make sure you have surge installed<ul><li><code>npm -g ls --depth=0</code></li></ul></li><li>install surge if needed<ul><li><code>npm install -g surge</code></li></ul></li><li>deploy exported app<ul><li><code>surge out</code></li></ul></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this post we demonstated using the Next.js react framework. We observed the following.</p><ul><li>Next uses pages: index, about</li><li>Next pages consist of HTML/JS/CSS = JSX/JS/CSS-in-js</li><li>Next pages are React components.</li><li>Next has a Link component for navigating between pages.</li><li>React components can be shared and nested with other React components</li><li>Next can export an app to static files</li><li>Surge can deploy and serve your static files</li></ul><p>We have learned enough to build a website. In the next post I will demonstrate how to build dynamic applications using Next.js.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Next.js is a react framework for building any kind of reac
      
    
    </summary>
    
    
      <category term="nextjs" scheme="http://dearfrankg.github.io/tags/nextjs/"/>
    
      <category term="framework" scheme="http://dearfrankg.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>oss 0 vs redhat 34 billion</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-oss-vs-redhat/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-oss-vs-redhat/</id>
    <published>2018-11-01T01:04:35.000Z</published>
    <updated>2018-11-11T13:47:16.820Z</updated>
    
    <content type="html"><![CDATA[<p>Donald Fischer, who served as a product manager for Red Hat Enterprise Linux during its creation and early years of growth, writes:</p><blockquote><p>Red Hat saw, earlier than most, that the ascendance of open source made the need to pay for code go away, but the need for support and maintenance grew larger than ever. Thus Red Hat was never in the business of selling software, rather it was in the business of addressing the practical challenges that have always come along for the ride with software. […] As an open source developer, you created that software. You can keep your package secure, legally documented, and maintained; who could possibly do it better? So why does Red Hat make the fat profits, and not you? Unfortunately, doing business with large companies requires a lot of bureaucratic toil. That’s doubly true for organizations that require security, legal, and operational standards for every product they bring in the door. Working with these organizations requires a sales and marketing team, a customer support organization, a finance back-office, and lots of other “business stuff” in addition to technology. Red Hat has had that stuff, but you haven’t.<br><br><br>And just like you don’t have time to sell to large companies, they don’t have time to buy from you alongside a thousand other open source creators, one at a time. Sure, big companies know how to install and use your software. (And good news! They already do.) But they can’t afford to put each of 1100 npm packages through a procurement process that costs $20k per iteration. Red Hat solved this problem for one corner of open source by collecting 2,000+ open source projects together, adding assurances on top, and selling it as one subscription product. That worked for them, to the tune of billions. But did you get paid for your contributions?</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Donald Fischer, who served as a product manager for Red Hat Enterprise Linux during its creation and early years of growth, writes:&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="business" scheme="http://dearfrankg.github.io/tags/business/"/>
    
  </entry>
  
  <entry>
    <title>understanding react performance</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-understanding-react-performance/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-understanding-react-performance/</id>
    <published>2018-10-31T13:34:41.000Z</published>
    <updated>2018-11-11T14:02:38.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>We’re going to dive into some typical react performance problems and how to solve them. We will be using and example Profile app which displays a profile card consisting of an image and four fields rendered from state, and one button that changes the state of the description field.</p><p><strong>References</strong></p><ul><li><a href="https://goo.gl/aPJM5t" target="_blank" rel="noopener">a checklist for eliminating common React performance issues</a></li></ul><h2 id="Identify-wasted-renders"><a href="#Identify-wasted-renders" class="headerlink" title="Identify wasted renders"></a>Identify wasted renders</h2><p>In order to identify wateful renders we can utilize these two tools:</p><ul><li>react-dev-tools – highlights when a component renders by flashing a green outline on the component.</li><li>console.log – from your components render method you can console.log to see when it’s rendering.</li></ul><p>Utilizing the react-dev-tools on our app show that when the description field is updated the whole profile component renders as identified by the green flashing border.</p><p>Below are some ways to optimize the situation.</p><h2 id="Extract-frequently-updated-regions-into-isolated-components"><a href="#Extract-frequently-updated-regions-into-isolated-components" class="headerlink" title="Extract frequently updated regions into isolated components"></a>Extract frequently updated regions into isolated components</h2><p>The Profile app is connected to 4 redux fields. So when the <code>description</code> field changes it causes the card to re-render. Remember whenever the <code>props</code> or <code>state</code> changes that causes a re-render. Let’s localize the elements being updated to a specific react component. We will create a <code>Profession</code> componenent connected to only the description</p><pre><code>const Profession = ({ description }) =&gt; {  return (    &lt;p&gt;     &lt;span className=&quot;faint&quot;&gt;I am&lt;/span&gt; a {description}    &lt;/p&gt;  );}</code></pre><p>Now only the <code>profession</code> component will update when the <code>description</code> changes.</p><h2 id="Use-pure-components-when-appropriate"><a href="#Use-pure-components-when-appropriate" class="headerlink" title="Use pure components when appropriate"></a>Use pure components when appropriate</h2><p>The Profession component consists of four words ‘I’, “am”, “a”, “description”. For example purposes if we create a new component for each of those four items maybe we can isolate the description field.</p><p>Pure components only render when their props change. By making our new components Pure we can avoid re-rendering when not necessary. An easy way to implement a <code>pure component</code> is to use <code>React.PureComponents</code> with class components (functional components can be pure also using react connect). Here is our new description component. We don’t show it but each of the child components is a pure component to avoid re-renders.</p><pre><code>const Description = ({ description }) =&gt; {  return (    &lt;p&gt;      &lt;I /&gt;an isolate      &lt;Am /&gt;      &lt;A /&gt;      &lt;Profession profession={description} /&gt;    &lt;/p&gt;  );};</code></pre><h2 id="Avoid-passing-new-objects-as-props"><a href="#Avoid-passing-new-objects-as-props" class="headerlink" title="Avoid passing new objects as props"></a>Avoid passing new objects as props</h2><p><strong>Watch out for new objects</strong></p><p>When you create an object variable in a render method, it creates a new object for every render. In the example below we create the <code>i</code> variable and assign it a new object. This causes the Calendar component to re-render repeatedly.</p><pre><code>class Description extends Component {  render() {    const i = { value: &quot;i&quot; };    return (      &lt;p&gt;        &lt;Title /&gt;        &lt;Calender i={i} /&gt;        &lt;Footer  /&gt;      &lt;/p&gt;    );  }}</code></pre><p>The solution is to use a class variable outside the render method. This prevents a new object from being created on each render. This way the Calendar component only renders once.</p><pre><code>class Description extends Component {  i = { day: 22 }  render() {    return (      &lt;p&gt;        &lt;Title /&gt;        &lt;Calender i={i} /&gt;        &lt;Footer  /&gt;      &lt;/p&gt;    );  }}</code></pre><p><strong>Watch out for explicit event handlers</strong></p><p>Here we have an event handler that creates a new function on every render.</p><pre><code>...render() {  &lt;div onClick={() =&gt; {//do something here}}}...</code></pre><p>The solution is to use a class method to avoid creating a new function on every render.</p><pre><code>...handleClick:() ={...}render() {  &lt;div onClick={this.handleClick}}...</code></pre><h2 id="Use-the-production-build"><a href="#Use-the-production-build" class="headerlink" title="Use the production build"></a>Use the production build</h2><p>For create-react-app</p><pre><code>npm run buildnpm run start</code></pre><p>This will yield bundle optimized files for production.</p><h2 id="Employ-code-splitting"><a href="#Employ-code-splitting" class="headerlink" title="Employ code splitting"></a>Employ code splitting</h2><p>You can implement this in a couple of ways:</p><ul><li><p>split by page – only code necessary for the page.</p></li><li><p>split by component – only code necessary for the component.</p></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now you’ve got a decent checklist for tracking and fixing common performance issues in react apps. Go build some fast apps!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;We’re going to dive into some typical react performance pr
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="performance" scheme="http://dearfrankg.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>css selectors you must know</title>
    <link href="http://dearfrankg.github.io/2018/08/22/20180822-css-selectors-you-must-know/"/>
    <id>http://dearfrankg.github.io/2018/08/22/20180822-css-selectors-you-must-know/</id>
    <published>2018-08-22T11:16:43.000Z</published>
    <updated>2018-11-16T01:09:27.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048" target="_blank" rel="noopener">memorize 30 CSS selectors</a></li></ul><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><ul><li><p>id selector</p><ul><li><code>#foo</code></li></ul></li><li><p>class selector</p><ul><li><code>.foo</code></li></ul></li><li><p>descendent selector</p><ul><li><code>ul li</code></li></ul></li></ul><h2 id="Memorize-these-30-Selectors"><a href="#Memorize-these-30-Selectors" class="headerlink" title="Memorize these 30 Selectors"></a>Memorize these 30 Selectors</h2><ul><li><p>universal selector</p><ul><li><code>*</code> all elements</li><li><code>#foo *</code> all child elements</li></ul></li><li><p>id selector</p><ul><li><code>#foo</code></li><li>avoid if possible</li></ul></li><li><p>class selector</p><ul><li><code>.foo</code></li></ul></li><li><p>descendent selector</p><ul><li><code>li a</code></li></ul></li><li><p>type selector</p><ul><li><code>ul</code></li></ul></li><li><p>pseudo classes</p><ul><li><code>a:link</code> - not clicked</li><li><code>a:visited</code> - clicked</li></ul></li><li><p>adjacent selector</p><ul><li><code>ul + p</code> - first p after each ul</li></ul></li><li><p>direct descendent selector</p><ul><li><code>ul &gt; li</code> - avoids nested lists</li></ul></li><li><p>sibling selector</p><ul><li><code>ul ~ p</code> - all p’s that follow a ul</li></ul></li><li><p>attributes selector</p><ul><li><code>a[title]</code> - select ancho with title attribute</li></ul></li><li><p>attribute match selector</p><ul><li><code>a[href=&quot;http://net.tutsplus.com&quot;]</code> - find exact value</li></ul></li><li><p>attribute contains selector</p><ul><li><code>a[href*=&quot;nettuts&quot;]</code> - must contain the value</li></ul></li><li><p>attribute starts with selector</p><ul><li><code>a[href^=&quot;http&quot;]</code> - value starts with</li></ul></li><li><p>attribute ends with selector</p><ul><li><code>a[href$=&quot;.jpg&quot;]</code> - value ends with</li></ul></li><li><p>data attribute match selector</p><ul><li><code>a[data-filetype=&quot;image&quot;]</code> - find exact value</li></ul></li><li><p>data attribute contains selector</p><ul><li><code>a[data-info~=&quot;external&quot;]</code> - must contain the value</li></ul></li><li><p>checked pseudo class</p><ul><li><code>input[type=radio]:checked</code> - find elements that are checked</li></ul></li><li><p>element pseudo class</p><ul><li><code>.title:before</code> - often used to place content</li><li><code>.title:after</code> - officially use :: but best practice :</li></ul></li><li><p>hover pseudo class</p><ul><li><code>a:hover</code> - when hovering</li></ul></li><li><p>negation pseudo class</p><ul><li><code>div:not(#container)</code> - all divs without #container</li></ul></li><li><p>pseudo element selector</p><ul><li><code>p::first-line</code></li><li><code>p::first-letter</code></li></ul></li><li><p>nth-child selector</p><ul><li><code>li:nth-child(3)</code> - select 3rd li</li><li><code>li:nth-child(4n)</code> - select every fourth li</li></ul></li><li><p>nth-last-child selector</p><ul><li><code>li:nth-last-child(2)</code> - select starting from last li</li></ul></li><li><p>nth-of-type selector</p><ul><li><code>ul:nth-of-type(3)</code> - select the third of type ul</li></ul></li><li><p>nth-last-of-type selector</p><ul><li><code>li:nth-last-of-type(2)</code> - select starting from last</li></ul></li><li><p>first-child selector</p><ul><li><code>ul li:first-child</code> - first li in list</li></ul></li><li><p>last-child selector</p><ul><li><code>ul &gt; li:last-child</code> - last child in list ‘&gt;’ = decendant</li></ul></li><li><p>only-child selector</p><ul><li><code>div p:only-child</code> - select p if div has only one p</li></ul></li><li><p>only-of-type selector</p><ul><li><code>ul &gt; li:only-of-type</code> - select li if ul has only one li</li></ul></li><li><p>first-of-type selector</p><ul><li><code>ul:first-of-type</code> - find first element of type ul</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Source&quot;&gt;&lt;a href=&quot;#Source&quot; class=&quot;headerlink&quot; title=&quot;Source&quot;&gt;&lt;/a&gt;Source&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/the
      
    
    </summary>
    
    
      <category term="design" scheme="http://dearfrankg.github.io/tags/design/"/>
    
      <category term="css" scheme="http://dearfrankg.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>intro to css-grid</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-intro-to-css-grid/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-intro-to-css-grid/</id>
    <published>2018-08-19T15:09:25.000Z</published>
    <updated>2018-11-11T14:00:46.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="https://goo.gl/fdbjt1" target="_blank" rel="noopener">https://goo.gl/fdbjt1</a></li></ul><h2 id="Grid-Terminology"><a href="#Grid-Terminology" class="headerlink" title="Grid Terminology"></a>Grid Terminology</h2><ul><li>grid container: contains the grid</li><li>grid lines: horizontal and vertical lines that divide the grid</li><li>grid cell: smallest unit of area in a grid</li><li>grid area: a rectangular area in the grid as small asone grid cell or as large as the entire grid.</li><li>grid track: the space between any two grid lines</li></ul><h2 id="How-to-define-a-grid"><a href="#How-to-define-a-grid" class="headerlink" title="How to define a grid"></a>How to define a grid</h2><p>Define grid:</p><pre><code>- display: grid;   // OR inline grid;- grid-template-columns: ...- grid-template-rows: ...</code></pre><h2 id="Creating-a-music-app"><a href="#Creating-a-music-app" class="headerlink" title="Creating a music app"></a>Creating a music app</h2><p>The grid conainer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Naming and Positioning Items by Grid Areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  ...;</span><br><span class="line">  <span class="selector-tag">grid-template-areas</span>:</span><br><span class="line">    "<span class="selector-tag">sidebar</span>  <span class="selector-tag">content</span>"</span><br><span class="line">    "<span class="selector-tag">footer</span>   <span class="selector-tag">footer</span>";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"sidebar  content"</span></span><br><span class="line">    <span class="string">"footer  footer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Let’s-Get-Responsive"><a href="#Let’s-Get-Responsive" class="headerlink" title="Let’s Get Responsive"></a>Let’s Get Responsive</h2><p>Mobile First</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"content"</span></span><br><span class="line">    <span class="string">"footer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Desktop</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">      <span class="string">"sidebar  content"</span></span><br><span class="line">      <span class="string">"footer   footer"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Placing-Content-within-the-Grid"><a href="#Placing-Content-within-the-Grid" class="headerlink" title="Placing Content within the Grid."></a>Placing Content within the Grid.</h2><p>FontAwesome 4.x was used.</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;</code></pre><h3 id="The-Sidebar"><a href="#The-Sidebar" class="headerlink" title="The Sidebar"></a>The Sidebar</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bars"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-volume-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-spotify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-soundcloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aside</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make the Sidebar a Grid Container</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-main-header"><a href="#The-main-header" class="headerlink" title="The main header"></a>The main header</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bit.ly/2sc2NJd"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"details"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>CattyBoard Top 100 Single Charts (11.06.36)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sm--hide"</span>&gt;</span>Unknown Artist<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sm--hide"</span>&gt;</span>2016 . Charts . 100 songs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-play"</span>&gt;</span> &amp;nbsp;Play all<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-plus"</span>&gt;</span> &amp;nbsp;Add to<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-ellipsis-h"</span>&gt;</span>&amp;nbsp;&amp;nbsp;More<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>define the grid areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__header</span> &gt; <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: img;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main__header</span> &gt; <span class="selector-class">.details</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: dtls;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, define the grid itself</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"img"</span></span><br><span class="line">    <span class="string">"dtls"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For mobile</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main__header</span> &#123;</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.main__header</span> &gt; <span class="selector-class">.details</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.sm--hide</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.img</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For desktop</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main__header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">250px</span> <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">"img dtls"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-main-details"><a href="#The-main-details" class="headerlink" title="The main details"></a>The main details</h3><p>Here we’ll make CSS-Grid work with Flexbox</p><p>The HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1. One Dance<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Crake feat CatKid &amp;amp; Cyla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2:54<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2. Panda<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cattee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4:06<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3. Can't Stop the Feeling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Catin Cimberlake<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3:56<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4. Work From Home<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cat Harmony feat Colla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3:34<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Final-Result"><a href="#The-Final-Result" class="headerlink" title="The Final Result"></a>The Final Result</h2><ul><li><a href="https://codesandbox.io/s/rwp1zqx5jp" target="_blank" rel="noopener">https://codesandbox.io/s/rwp1zqx5jp</a></li></ul><p>Mobile</p><p><img src="https://i.imgur.com/lR9xEuW.png" alt=""></p><p>Desktop</p><p><img src="https://i.imgur.com/pqCMCNX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Source&quot;&gt;&lt;a href=&quot;#Source&quot; class=&quot;headerlink&quot; title=&quot;Source&quot;&gt;&lt;/a&gt;Source&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://goo.gl/fdbjt1&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="design" scheme="http://dearfrankg.github.io/tags/design/"/>
    
      <category term="css-grid" scheme="http://dearfrankg.github.io/tags/css-grid/"/>
    
  </entry>
  
  <entry>
    <title>recent practice</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-recent-practice/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-recent-practice/</id>
    <published>2018-08-19T11:46:23.000Z</published>
    <updated>2018-11-11T13:46:16.369Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://certain-owl.surge.sh/" target="_blank" rel="noopener">flexing flexbox</a></li><li><a href="https://codesandbox.io/s/rwp1zqx5jp" target="_blank" rel="noopener">css-grid</a></li><li><a href="https://codesandbox.io/s/6w079rly0k" target="_blank" rel="noopener">recursion practice</a></li><li><a href="https://codesandbox.io/s/1vmx5w5kx7" target="_blank" rel="noopener">fractal tree</a></li><li><a href="https://codesandbox.io/s/30p22krx95" target="_blank" rel="noopener">react bowling</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://certain-owl.surge.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flexing flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codesandbox.io/
      
    
    </summary>
    
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>using export with index.js</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-using-export-with-index-js/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-using-export-with-index-js/</id>
    <published>2018-08-19T11:35:23.000Z</published>
    <updated>2018-11-11T14:01:43.658Z</updated>
    
    <content type="html"><![CDATA[<p>Consider the app sructure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── config.js</span><br><span class="line">├── containers</span><br><span class="line">├── context.js</span><br><span class="line">├── images</span><br><span class="line">│   └── logo.svg</span><br><span class="line">├── index.js</span><br><span class="line">├── registerServiceWorker.js</span><br><span class="line">├── routes</span><br><span class="line">│   ├── App.css</span><br><span class="line">│   ├── App.js</span><br><span class="line">│   └── App.test.js</span><br><span class="line">├── styles</span><br><span class="line">│   └── index.css</span><br><span class="line">├── utils</span><br><span class="line">└── views</span><br><span class="line">    ├── body.css</span><br><span class="line">    ├── body.js</span><br><span class="line">    ├── flex.css</span><br><span class="line">    ├── flex.js</span><br><span class="line">    ├── header.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── info.js</span><br></pre></td></tr></table></figure><p>/src/views/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./header"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./body"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./info"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./flex"</span>;</span><br></pre></td></tr></table></figure><p>/src/views/body.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./body.css"</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  FlexDefaults,</span><br><span class="line">  FlexWrap1,</span><br><span class="line">  FlexWrap2,</span><br><span class="line">  Justify1,</span><br><span class="line">  Justify2,</span><br><span class="line">  Justify3,</span><br><span class="line">  Justify4,</span><br><span class="line">  Justify5,</span><br><span class="line">  Align1,</span><br><span class="line">  JustifyAndAlign</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../views"</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Utilising the <code>index.js</code> file in this way you can import many views wether they exist in one file or many. This simplifies coding. You do need to remember to populate <code>index.js</code> when adding new files.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Consider the app sructure&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
      <category term="javascript" scheme="http://dearfrankg.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>recursion review</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-recursion/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-recursion/</id>
    <published>2018-08-19T11:23:14.000Z</published>
    <updated>2018-11-11T14:01:33.571Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper functions</span></span><br><span class="line"><span class="keyword">const</span> format = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="function"><span class="params">title</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`\n<span class="subst">$&#123;title&#125;</span>\n---------------------`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterate = <span class="function">(<span class="params">fnName, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fnName&#125;</span>(<span class="subst">$&#123;n&#125;</span>) = <span class="subst">$&#123;fn(n)&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WRITE FUNCTIONS IN A RECURSIVE WAY</span></span><br><span class="line"><span class="comment">// pow, fibonaci, factorial, map, reverse, sumSalaries</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pow = <span class="function">(<span class="params">b, n</span>) =&gt;</span> (n === <span class="number">1</span> ? b : b * pow(b, n - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fibonaci = <span class="function"><span class="params">x</span> =&gt;</span> (x &lt;= <span class="number">1</span> ? <span class="number">1</span> : fibonaci(x - <span class="number">1</span>) + fibonaci(x - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = <span class="function"><span class="params">x</span> =&gt;</span> (x === <span class="number">1</span> ? <span class="number">1</span> : x * factorial(x - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> (arr.length === <span class="number">0</span> ? [] : fn(arr[<span class="number">0</span>]).concat(map(arr.slice(<span class="number">1</span>), fn)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">s</span> =&gt;</span> (s.length === <span class="number">1</span> ? s : s.slice(<span class="number">-1</span>) + reverse(s.slice(<span class="number">0</span>, <span class="number">-1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumSalaries = <span class="function"><span class="params">department</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isDepartment = <span class="built_in">Array</span>.isArray(department);</span><br><span class="line">  <span class="keyword">if</span> (isDepartment) &#123;</span><br><span class="line">    <span class="keyword">return</span> department.reduce(<span class="function">(<span class="params">acc, person</span>) =&gt;</span> acc + person.salary, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (dept <span class="keyword">in</span> department) &#123;</span><br><span class="line">      sum += sumSalaries(department[dept]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pow</span></span><br><span class="line">title(<span class="string">"pow"</span>);</span><br><span class="line"><span class="keyword">const</span> powOfBase2 = <span class="function"><span class="params">n</span> =&gt;</span> pow(<span class="number">2</span>, n);</span><br><span class="line">iterate(<span class="string">"powOfBase2"</span>, powOfBase2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fibonaci</span></span><br><span class="line">title(<span class="string">"fibonaci"</span>);</span><br><span class="line">iterate(<span class="string">"fibonaci"</span>, fibonaci);</span><br><span class="line"></span><br><span class="line"><span class="comment">// factorial</span></span><br><span class="line">title(<span class="string">"factorial"</span>);</span><br><span class="line">iterate(<span class="string">"factorial"</span>, factorial);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">title(<span class="string">"map"</span>);</span><br><span class="line"><span class="keyword">const</span> lettersArray = <span class="string">"abcde"</span>.split(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">const</span> uppercase = <span class="function"><span class="params">x</span> =&gt;</span> x.toUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`map(<span class="subst">$&#123;format(lettersArray)&#125;</span>, uppercase) = <span class="subst">$&#123;map(lettersArray, uppercase)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reverse</span></span><br><span class="line">title(<span class="string">"reverse"</span>);</span><br><span class="line"><span class="keyword">const</span> word = <span class="string">"abcde"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`reverse(<span class="subst">$&#123;format(word)&#125;</span>) = <span class="subst">$&#123;reverse(word)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sumSalaries</span></span><br><span class="line">title(<span class="string">"sumSalaries"</span>);</span><br><span class="line"><span class="keyword">const</span> company = &#123;</span><br><span class="line">  sales: [&#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">salary</span>: <span class="number">1000</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Alice"</span>, <span class="attr">salary</span>: <span class="number">600</span> &#125;],</span><br><span class="line">  development: &#123;</span><br><span class="line">    sites: [&#123; <span class="attr">name</span>: <span class="string">"Peter"</span>, <span class="attr">salary</span>: <span class="number">2000</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Alex"</span>, <span class="attr">salary</span>: <span class="number">1800</span> &#125;],</span><br><span class="line">    internals: [&#123; <span class="attr">name</span>: <span class="string">"Jack"</span>, <span class="attr">salary</span>: <span class="number">1300</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`sumSalaries(company) = <span class="subst">$&#123;sumSalaries(company)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
      <category term="javascript" scheme="http://dearfrankg.github.io/tags/javascript/"/>
    
      <category term="recusion" scheme="http://dearfrankg.github.io/tags/recusion/"/>
    
  </entry>
  
  <entry>
    <title>redux training</title>
    <link href="http://dearfrankg.github.io/2018/04/05/20180405-redux-training/"/>
    <id>http://dearfrankg.github.io/2018/04/05/20180405-redux-training/</id>
    <published>2018-04-05T12:30:18.000Z</published>
    <updated>2018-11-11T14:00:36.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-hello-world"><a href="#01-hello-world" class="headerlink" title="01 hello world"></a>01 hello world</h2><p>demo creating a simple react app with a single .js file.</p><ul><li><code>react run index.js</code></li></ul><h2 id="02-add-some-sass"><a href="#02-add-some-sass" class="headerlink" title="02 add some sass"></a>02 add some sass</h2><p>demo sass in your simple app.</p><ul><li><code>react run index.js --plugins sass</code></li></ul><h2 id="03-add-professional-file-structure"><a href="#03-add-professional-file-structure" class="headerlink" title="03 add professional file structure"></a>03 add professional file structure</h2><p>demo app with professional file structure.</p><ul><li><code>npm start</code></li></ul><h2 id="04-todomvc-redux"><a href="#04-todomvc-redux" class="headerlink" title="04 todomvc-redux"></a>04 todomvc-redux</h2><p>demo the ubiquitous todomvc app built with redux</p><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><ul><li>redux actions</li></ul><p>Actions are payloads of information that send data to your store. The only source of information for the store. You send them to the store using <code>store.dispatch()</code>.</p><ul><li>redux reducers</li></ul><p>Reducers specifies how the application state changes in response to an action.</p><ul><li>redux middleware</li></ul><p>Middleware provides a hook that allows access to the action before and after it reaches the reducer.</p><ul><li>redux store</li></ul><p>The store is an object that:</p><ul><li>holds app state</li><li>allows access to state via <code>getState()</code></li><li>allows updating state via <code>dispatch(action)</code></li><li>allows registering/unregistering listeners <code>(un)subscribe(listener)</code></li></ul><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h3><p>zero config testing platform</p><p>features:</p><ul><li>snapshots</li><li>awesome cli interface</li><li>powerful mocking library</li><li>code coverage</li><li>parallelizes and sandboxes tests</li></ul><ul><li>test actions</li><li>test reducers</li><li>test middleware</li><li>test store</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-hello-world&quot;&gt;&lt;a href=&quot;#01-hello-world&quot; class=&quot;headerlink&quot; title=&quot;01 hello world&quot;&gt;&lt;/a&gt;01 hello world&lt;/h2&gt;&lt;p&gt;demo creating a simple
      
    
    </summary>
    
    
      <category term="redux" scheme="http://dearfrankg.github.io/tags/redux/"/>
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>redux testing</title>
    <link href="http://dearfrankg.github.io/2018/04/05/20180405-redux-testing/"/>
    <id>http://dearfrankg.github.io/2018/04/05/20180405-redux-testing/</id>
    <published>2018-04-05T12:30:18.000Z</published>
    <updated>2018-11-11T14:00:25.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Testing-with-Jest-snapshots"><a href="#Testing-with-Jest-snapshots" class="headerlink" title="Testing with Jest snapshots"></a>Testing with Jest snapshots</h2><h3 id="testing-actions"><a href="#testing-actions" class="headerlink" title="testing actions"></a>testing actions</h3><p>action creator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should create an action to add a recipe'</span>, () =&gt; &#123;</span><br><span class="line">  expect(actions.addRecipe(<span class="string">'test'</span>)).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>dynamic action creator</p><p>logic emits different object based on input parameter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">''</span>].forEach(<span class="function">(<span class="params">param</span>) =&gt;</span></span><br><span class="line">  it(<span class="string">`should add recipe with default parameter <span class="subst">$&#123;param&#125;</span>`</span>, () =&gt; &#123;</span><br><span class="line">    expect(actions.addRecipe(param)).toMatchSnapshot()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="testing-asynchronous-actions"><a href="#testing-asynchronous-actions" class="headerlink" title="testing asynchronous actions"></a>testing asynchronous actions</h3><p>they discourage the use of asynchronous action creators</p><ul><li>create mock response</li><li>stub fetch success and error</li><li>setup mock fetch</li><li>fetch</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Async action creator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setRecipe = <span class="function">(<span class="params">id, data</span>) =&gt;</span> (&#123;</span><br><span class="line">  type: actions.SET_RECIPE,</span><br><span class="line">  payload: &#123; id, data &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchRecipe = <span class="function"><span class="params">id</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">'recipe/'</span> + id)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(setRecipe(id, json)))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a fake response object</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockResponse = <span class="function">(<span class="params">status, statusText, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">window</span>.Response(response, &#123;</span><br><span class="line">    status: status,</span><br><span class="line">    statusText: statusText,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleResponse = <span class="function">(<span class="params">mockedUrl, response</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">window</span>.fetch = jest.fn().mockImplementation(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (url === mockedUrl) &#123;</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span>(<span class="string">'Unknown URL: '</span> + url);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockFetch = <span class="function">(<span class="params">mockedUrl, status, data</span>) =&gt;</span></span><br><span class="line">  handleResponse(</span><br><span class="line">  mockedUrl,</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(mockResponse(status, <span class="literal">null</span>, data)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockFetchError = <span class="function">(<span class="params">mockedUrl, state, error</span>) =&gt;</span></span><br><span class="line">  handleResponse(</span><br><span class="line">  mockedUrl,</span><br><span class="line">  <span class="built_in">Promise</span>.reject(mockResponse(state, error, <span class="string">'&#123;&#125;'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// The mock fetch() call will return a resolved promise</span></span><br><span class="line"><span class="comment">// that is similar to the real result from a fetch()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample mocked fetch code</span></span><br><span class="line">mockFetch(<span class="number">200</span>, <span class="string">'&#123;"key":"value"&#125;'</span>);</span><br><span class="line">fetch(<span class="string">'test.json'</span>)</span><br></pre></td></tr></table></figure><p>Unlike simple action creators, our code now relies on dispatch() being used, which forces us to<br>create a mock instance of a store. To do so, we will use the <code>redux-mock-store</code> library:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a mock store</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'redux-mock-store'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockStore = configureStore([ thunk ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Structure of an async test block</span></span><br><span class="line">describe(<span class="string">'fetch recipe'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> store;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> store = mockStore(&#123;&#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Full async test</span></span><br><span class="line">  it(<span class="string">'should fetch recipe if it exists'</span>, () =&gt; &#123;</span><br><span class="line">    mockFetch(<span class="string">'recipe/100'</span>, <span class="number">200</span>, <span class="string">'&#123;"title":"hello"&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store.dispatch(actions.fetchRecipe(<span class="number">100</span>))</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> expect(store.getActions()).toMatchSnapshot())</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Integration-Tests"><a href="#Integration-Tests" class="headerlink" title="Integration Tests"></a>Integration Tests</h3><p>The role of the integration tests is to verify that all the parts of the application work correctly together. A comprehensive unit test suite will ensure all the reducers, action creators, middleware, and libraries are correct. With integration tests, we will try to run them together in a single test to check system-wide behavior.</p><p>basic integration test include 4 steps</p><ol><li>verify initial state</li><li>mock external dependencies</li><li>dispatch an action</li><li>verify that the state has changed and any external APIs were called as expected</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchRecipes &#125; <span class="keyword">from</span> <span class="string">'actions/recipes'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mockFetch &#125; <span class="keyword">from</span> <span class="string">'test-utils'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'integration'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should fetch recipes from server'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = [&#123; <span class="attr">title</span>: <span class="string">'test'</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(store.getState().recipes).toEqual([]);                   <span class="comment">// verify initial state</span></span><br><span class="line">    mockFetch(<span class="string">'recipes.json'</span>, <span class="number">200</span>, <span class="built_in">JSON</span>.stringify(data));           <span class="comment">// mock dependencies</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store.dispatch(fetchRecipes())                           <span class="comment">// dispatch action</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> expect(store.getState().recipes).toEqual(data));  <span class="comment">// verify state</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Testing-with-Jest-snapshots&quot;&gt;&lt;a href=&quot;#Testing-with-Jest-snapshots&quot; class=&quot;headerlink&quot; title=&quot;Testing with Jest snapshots&quot;&gt;&lt;/a&gt;Testi
      
    
    </summary>
    
    
      <category term="redux" scheme="http://dearfrankg.github.io/tags/redux/"/>
    
      <category term="testing" scheme="http://dearfrankg.github.io/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>npm refresher</title>
    <link href="http://dearfrankg.github.io/2017/05/12/2017/20170511-npm-refresher/"/>
    <id>http://dearfrankg.github.io/2017/05/12/2017/20170511-npm-refresher/</id>
    <published>2017-05-12T19:30:18.000Z</published>
    <updated>2018-11-14T14:01:20.388Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#creating-npm-packages">creating npm packages</a><ul><li><a href="#create-project-using-nwbhttpsgooglo4vldl-which-supports-es5-and-es6">create project using <a href="https://goo.gl/O4VLdl" target="_blank" rel="noopener">nwb</a> which supports es5 and es6</a></li><li><a href="#add-testing-packages">add testing packages</a></li><li><a href="#configure-packagejson">configure package.json</a></li><li><a href="#add-code">add code</a></li><li><a href="#run-tests-and-coverage">run tests and coverage</a></li><li><a href="#build">build</a></li><li><a href="#add-readmemd">add readme.md</a></li><li><a href="#configure-travis">configure Travis</a></li><li><a href="#create-git-repo">create git repo</a></li><li><a href="#activate-services-for-badges">activate services for badges</a></li><li><a href="#publish-package">publish package</a></li><li><a href="#confirm-package-is-working">confirm package is working</a></li></ul></li></ul><!-- /TOC --><h2 id="creating-npm-packages"><a href="#creating-npm-packages" class="headerlink" title="creating npm packages"></a>creating npm packages</h2><h3 id="create-project-using-nwb-which-supports-es5-and-es6"><a href="#create-project-using-nwb-which-supports-es5-and-es6" class="headerlink" title="create project using nwb which supports es5 and es6"></a>create project using <a href="https://goo.gl/O4VLdl" target="_blank" rel="noopener">nwb</a> which supports es5 and es6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nwb new web-module sum</span><br><span class="line">cd sum</span><br></pre></td></tr></table></figure><h3 id="add-testing-packages"><a href="#add-testing-packages" class="headerlink" title="add testing packages"></a>add testing packages</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add jest babel-jest</span><br></pre></td></tr></table></figure><h3 id="configure-package-json"><a href="#configure-package-json" class="headerlink" title="configure package.json"></a>configure package.json</h3><ul><li>add appropriate package name.  f.e. @cogent-labs/sum</li><li>add description</li><li>add test scripts</li><li>add babel config</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;@cogent-labs/sum&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a simple sum function&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;lib/index.js&quot;,</span><br><span class="line">  &quot;module&quot;: &quot;es/index.js&quot;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;es&quot;,</span><br><span class="line">    &quot;lib&quot;,</span><br><span class="line">    &quot;umd&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;nwb build-web-module&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;nwb clean-module&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;jest&quot;,</span><br><span class="line">    &quot;coverage&quot;: &quot;jest --coverage&quot;,</span><br><span class="line">    &quot;test:watch&quot;: &quot;jest --watchAll&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-jest&quot;: &quot;^20.0.1&quot;,</span><br><span class="line">    &quot;jest&quot;: &quot;^20.0.1&quot;,</span><br><span class="line">    &quot;nwb&quot;: &quot;0.15.x&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;repository&quot;: &quot;&quot;,</span><br><span class="line">  &quot;babel&quot;: &#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;es2015&quot;,</span><br><span class="line">      &quot;react&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add-code"><a href="#add-code" class="headerlink" title="add code"></a>add code</h3><figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>src/tests/index.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'../src'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'#sum'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should sum 1 and 2 and get 3'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> actual = sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> expected = <span class="number">3</span></span><br><span class="line">    expect(actual).toBe(expected)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="run-tests-and-coverage"><a href="#run-tests-and-coverage" class="headerlink" title="run tests and coverage"></a>run tests and coverage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br><span class="line">npm run coverage</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="add-readme-md"><a href="#add-readme-md" class="headerlink" title="add readme.md"></a>add readme.md</h3><pre><code># sum[![Travis][build-badge]][build][![npm package][npm-badge]][npm][![Coveralls][coveralls-badge]][coveralls]a simple sum function## getting startedinstall<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @cogent-labs/sum</span><br></pre></td></tr></table></figure>usage<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sum from &apos;@coget-labs/sum&apos;</span><br><span class="line"></span><br><span class="line">const result = sum(1,2)</span><br><span class="line"></span><br><span class="line">console.log(&apos;result:&apos;, result)</span><br></pre></td></tr></table></figure>test<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm test            // test once</span><br><span class="line">npm test:watch      // test in watch mode</span><br><span class="line">npm coverage        // test and provide coverage report</span><br></pre></td></tr></table></figure>[build-badge]: https://img.shields.io/travis/dearfrankg/sum/master.png?style=flat-square[build]: https://travis-ci.org/dearfrankg/sum[npm-badge]: https://img.shields.io/npm/v/@cogent-labs/sum.png?style=flat-square[npm]: https://www.npmjs.org/package/@cogent-labs/sum[coveralls-badge]: https://img.shields.io/coveralls/dearfrankg/sum/master.png?style=flat-square[coveralls]: https://coveralls.io/github/dearfrankg/sum</code></pre><h3 id="configure-Travis"><a href="#configure-Travis" class="headerlink" title="configure Travis"></a>configure Travis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 4</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line">script: &quot;npm run-script coverage&quot;</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">  - npm install codecov.io coveralls</span><br><span class="line">  - cat ./coverage/lcov.info | ./node_modules/codecov.io/bin/codecov.io.js</span><br><span class="line">  - cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure><h3 id="create-git-repo"><a href="#create-git-repo" class="headerlink" title="create git repo"></a>create git repo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git ci -m &apos;add sum</span><br><span class="line">git create sum</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="activate-services-for-badges"><a href="#activate-services-for-badges" class="headerlink" title="activate services for badges"></a>activate services for badges</h3><p>when push happens service is run</p><ul><li>goto travis site</li><li>goto coveralls site</li></ul><h3 id="publish-package"><a href="#publish-package" class="headerlink" title="publish package"></a>publish package</h3><p>With proud badges you’re ready to publish</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// SETUP ORG IF NECESSARY</span><br><span class="line"></span><br><span class="line">https://www.npmjs.com/org/create</span><br><span class="line"></span><br><span class="line">// LOGIN IF NECESSARY</span><br><span class="line"></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line">// PUBLISH A PUBLIC REPO</span><br><span class="line"></span><br><span class="line">npm publish --acccess public</span><br><span class="line"></span><br><span class="line">// access public is necessary</span><br><span class="line">// private repos cost $7 per mo</span><br></pre></td></tr></table></figure><h3 id="confirm-package-is-working"><a href="#confirm-package-is-working" class="headerlink" title="confirm package is working"></a>confirm package is working</h3><ol><li>confirm listing on your profile <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a></li><li>confirm pull</li><li>confirm tests</li><li>confirm usage</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#creating-npm-packages&quot;&gt;creating npm packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#create-project-using-nwbhttpsgooglo4vldl-
      
    
    </summary>
    
    
      <category term="npm" scheme="http://dearfrankg.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>react lifecycle</title>
    <link href="http://dearfrankg.github.io/2017/04/13/2017/20170412-react-lifecycle/"/>
    <id>http://dearfrankg.github.io/2017/04/13/2017/20170412-react-lifecycle/</id>
    <published>2017-04-13T19:30:18.000Z</published>
    <updated>2018-11-14T14:01:20.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>React enables to create components by invoking the React.createClass() method which expects a render method and triggers a lifecycle that can be hooked into via a number of so called lifecycle methods.</p><p>To get a clear idea of the lifecycle we will need to differentiate between</p><ul><li>creation phase</li><li>update phase</li><li>destroy phase</li></ul><h2 id="Creation-Phase"><a href="#Creation-Phase" class="headerlink" title="Creation Phase"></a>Creation Phase</h2><table><thead><tr><th>Creation Component</th><th></th></tr></thead><tbody><tr><td><code>getInitialState</code></td><td>set initial state</td></tr><tr><td><code>getDefaultProps</code></td><td>define props</td></tr><tr><td><code>componentWillMount</code></td><td><strong>YES set state</strong> – will not re-render.  (respond to wondow-resize, focus-changes)</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidMount</code></td><td><strong>YES set state</strong> – DOM manipulation, Data fetching, inititalize UI libs, setup listeners</td></tr></tbody></table><div style="height: 50px"></div><h2 id="Update-Phase"><a href="#Update-Phase" class="headerlink" title="Update Phase"></a>Update Phase</h2><table><thead><tr><th>Update State</th><th></th></tr></thead><tbody><tr><td><code>shouldComponentUpdate</code></td><td>decide to render or not returning a boolean</td></tr><tr><td><code>componentWillUpdate</code></td><td><strong>NO state changes here</strong> prepare for update – dispatch events, start animation</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidUpdate</code></td><td>DOM manipulation and Data fetching, update chart with new data <strong>careful not to infinite loop</strong></td></tr></tbody></table><div style="height: 50px"></div><table><thead><tr><th>Update Props</th><th></th></tr></thead><tbody><tr><td><code>componentWillReceiveProps</code></td><td><strong>YES set state</strong> – only called when props change <strong>you must check if props changed</strong></td></tr><tr><td><code>shouldComponentUpdate</code></td><td>decide to render or not returning a boolean</td></tr><tr><td><code>componentWillUpdate</code></td><td><strong>NO state changes here</strong> prepare for update – dispatch events, start animation</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidUpdate</code></td><td>DOM manipulation and Data fetching, update chart with new data <strong>careful not to infinite loop</strong></td></tr></tbody></table><div style="height: 50px"></div><h2 id="Destroy-Phase"><a href="#Destroy-Phase" class="headerlink" title="Destroy Phase"></a>Destroy Phase</h2><table><thead><tr><th>Destroy Phase</th><th></th></tr></thead><tbody><tr><td><code>componentWillUnmount</code></td><td>clean up operations: f.e. removing any timers, 3rd party lib references</td></tr></tbody></table><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/uy15pn" target="_blank" rel="noopener">Understanding the React Component Lifecycle</a></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><iframe src="http://embed.plnkr.co/8KLnfn8S29y1cFw59FYY/?show=preview" frameborder="0" width="100%" height="1500"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;React enables to create compon
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>learning lerna</title>
    <link href="http://dearfrankg.github.io/2017/04/12/2017/20170412-learning-lerna/"/>
    <id>http://dearfrankg.github.io/2017/04/12/2017/20170412-learning-lerna/</id>
    <published>2017-04-12T19:30:18.000Z</published>
    <updated>2018-11-14T14:01:20.388Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goo.gl/OQnM1G" target="_blank" rel="noopener">Lerna</a>: A tool for managing JavaScript projects with multiple packages.</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Developing many packages in separate repos are messy with disadvantages.  To solve this many projects <code>babel</code>, <code>react</code>, <code>angular</code>, and many more, develop all packages in a single repo called a <code>monorepo</code>.</p><p><strong>Lerna is a tool that optimizes the workflow around managing monorepos.</strong></p><p>It looks like this:</p><pre><code>my-lerna-repo/  lerna.json  package.json  packages/    package-1/      package.json    package-2/      package.json</code></pre><h2 id="Why-use-Lerna"><a href="#Why-use-Lerna" class="headerlink" title="Why use Lerna"></a>Why use Lerna</h2><ol><li>It optimizes workflow for managing <code>packages</code></li><li>it’s much more organized than having separate repos for each package</li><li>manage separate utility projects tracking version independently (lodash v4.x, ramda v3.x)</li><li>manage a group of related components using only a single version (bootstrap-components v3.x)</li></ol><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Create-a-lerna-repo"><a href="#Create-a-lerna-repo" class="headerlink" title="Create a lerna repo"></a>Create a lerna repo</h3><blockquote><p>We are using lerna v2.x</p></blockquote><pre><code>// INSTALLnpm install -g lerna// CREATE LERNA REPOgit init lerna-repo       // create a new git repocd lerna-repolerna init                // LERNA COMMAND: lerna init: makes 2 files                          // lerna.json package.json// CONFIGURE LERNA{                         // configure lerna by editing lerna.json  &quot;lerna&quot;: &quot;2.0.0-rc.1&quot;,  &quot;packages&quot;: [    &quot;packages/*&quot;  ],  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;npmClient&quot;: &quot;yarn&quot;,  &quot;commands&quot;: {    &quot;bootstrap&quot;: {      &quot;hoist&quot;: &quot;**&quot;    }  }}// CREATE PACKAGESmkdir -p packages/project1mkdir -p packages/project2lerna exec npm init -- -y     // make package.json for each project// RUN COMMANDS ON SCOPElerna exec cat package.json --scope project1      // review them individually// SETUP DEPENDENCIESyarn add react react-dom// copy package.json dependency from root to project// LOCAL DEPENDENCY// one local project may depend on another// just add the dependency-project-name to package.json// then runlerna bootstrap</code></pre><h2 id="Commands-and-Options"><a href="#Commands-and-Options" class="headerlink" title="Commands and Options"></a>Commands and Options</h2><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><pre><code>- bootstrap  Link together local packages and npm install remaining package dependencies- publish    Publish updated packages to npm- updated    Check which packages have changed since the last release- import     Import a package with git history from an external repository- clean      Remove the node_modules directory from all packages- diff       Diff all packages or a single package since the last release- init       Initialize a lerna repo- run        Run npm script in each package- exec       Run a command in each package- ls         List all public packages</code></pre><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>configure lerna</p><pre><code>--npm-tag [tagname]     Publish packages with the specified npm dist-tag--npm-client [client]   Executable used to install dependencies (npm, yarn, pnpm, ...)--concurrency           How many threads to use if lerna parallelises the tasks                        (defaults to 4)--loglevel              What level of logs to report (defaults to &quot;info&quot;).                        On failure, all logs are written to lerna-debug.log in the                        current working directory.--git-remote [remote]   Push git changes to the specified remote instead of &apos;origin&apos;--canary, -c            Publish packages after every successful merge using the                        sha as part of the tag--conventional-commits  Use angular conventional-commit format to determine version                        bump and generate CHANGELOG--yes                   Skip all confirmation prompts</code></pre><p>init</p><pre><code>--independent, -i       Version packages independently--exact                 Specify cross-dependency version numbers exactly rather than                        with a caret (^) (only affects publish and init)</code></pre><p>bootstrap</p><pre><code>--hoist [glob]          Install external dependencies matching [glob] to the repo root.                        Use with no glob for all.--nohoist [glob]        Don&apos;t hoist external dependencies matching [glob] to the repo root--include-filtered-dependencies                        Flag to force lerna to include all dependencies and transitive                        dependencies when running &apos;bootstrap&apos;, even if they should not                        be included by the scope or ignore flags</code></pre><p>publish</p><pre><code>--skip-git              Skip commiting, tagging, and pushing git changes--skip-npm              Stop before actually publishing change to npm--exact                 Specify cross-dependency version numbers exactly rather than                        with a caret (^) (only affects publish and init)--message, -m [msg]     Use a custom commit message when creating the publish commit--repo-version          Specify repo version to publish--force-publish         Force publish for the specified packages (comma-separated)                        or all packages using *                        (skips the git diff check for changed packages)</code></pre><p>only affects ‘run’, ‘exec’, ‘clean’, ‘ls’ and ‘bootstrap’ commands</p><pre><code>--scope [glob]          Restricts the scope to package names matching the given glob--ignore [glob]         Ignores packages with names matching the given glob</code></pre><p>only affects ‘run’ command</p><pre><code>--stream                Stream output with lines prefixed by package (only &apos;run&apos;)</code></pre><p>only affects run, exec, publish and bootstrap</p><pre><code>--no-sort               When executing tasks, ignore the dependency ordering of packages</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://goo.gl/OQnM1G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lerna&lt;/a&gt;: A tool for managing JavaScript projects with multiple packages.
      
    
    </summary>
    
    
      <category term="lerna" scheme="http://dearfrankg.github.io/tags/lerna/"/>
    
  </entry>
  
  <entry>
    <title>redux refresher</title>
    <link href="http://dearfrankg.github.io/2017/04/05/2017/20170405-redux-refresher/"/>
    <id>http://dearfrankg.github.io/2017/04/05/2017/20170405-redux-refresher/</id>
    <published>2017-04-05T12:30:18.000Z</published>
    <updated>2018-11-14T14:01:20.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Review"><a href="#Redux-Review" class="headerlink" title="Redux Review"></a>Redux Review</h1><h2 id="ramda-assocPath"><a href="#ramda-assocPath" class="headerlink" title="ramda/assocPath"></a>ramda/assocPath</h2><ul><li>provides a cleaner/shorter way to update nested state</li></ul><p>Here we make a state change 3 levels deep with one line.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assocPath &#125; <span class="keyword">from</span> <span class="string">'ramda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1 = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;, <span class="attr">bb</span>: &#123; <span class="attr">cc</span>: <span class="number">22</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> o2 = assocPath([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])(<span class="number">42</span>)(o1);</span><br><span class="line"><span class="built_in">console</span>.log(o1 !== o2, o1.a !== o2.a); <span class="comment">// new copies of "changed" objects</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.a.bb === o2.a.bb); <span class="comment">// deep unchanged properties are copied by reference</span></span><br></pre></td></tr></table></figure><h2 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h2><p>redux-thunk solves the following problems</p><ul><li>async actions</li><li>dispatch multiple actions within an action creator</li><li>get access to redux state in an action creator</li></ul><p>Here we handle an async action creator, access state, and call multiple actions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using redux-thunk middleware</span></span><br><span class="line">fetchDataRequest = createAction(<span class="string">'fetch-data-request'</span>)</span><br><span class="line">fetchDataSuccess = createAction(<span class="string">'fetch-data-success'</span>)</span><br><span class="line">fetchDataFailure = createAction(<span class="string">'fetch-data-failure'</span>)</span><br><span class="line">fetchData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = getState()</span><br><span class="line">    <span class="keyword">if</span> (state.isLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(fetchDataRequest())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'http://example.com/todos'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(fetchTodosSuccess(json.body)))</span><br><span class="line">      .catch(<span class="function"><span class="params">ex</span> =&gt;</span> dispatch(fetchTodosFailure(ex)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reselect"><a href="#Reselect" class="headerlink" title="Reselect"></a>Reselect</h2><ul><li>Selectors can compute derived data</li><li>Selectors are memoized</li><li>Selectors are composable</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</span><br><span class="line"><span class="keyword">const</span> taxPercentSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.taxPercent</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</span><br><span class="line">  shopItemsSelector,</span><br><span class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taxSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxPercentSelector,</span><br><span class="line">  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> totalSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxSelector,</span><br><span class="line">  (subtotal, tax) =&gt; (&#123; <span class="attr">total</span>: subtotal + tax &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exampleState = &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    taxPercent: <span class="number">8</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">value</span>: <span class="number">1.20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(subtotalSelector(exampleState)) <span class="comment">// 2.15</span></span><br><span class="line"><span class="built_in">console</span>.log(taxSelector(exampleState))      <span class="comment">// 0.172</span></span><br><span class="line"><span class="built_in">console</span>.log(totalSelector(exampleState))    <span class="comment">// &#123; total: 2.322 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="How-to-write-redux-tests"><a href="#How-to-write-redux-tests" class="headerlink" title="How to write redux tests"></a>How to write redux tests</h2><p>Look <a href="https://goo.gl/qAFHy3" target="_blank" rel="noopener">here</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goo.gl/G6WE3z" target="_blank" rel="noopener">redux-thunk to dispatch multiple actions from Redux action creators</a></li><li><a href="https://goo.gl/PcpyAb" target="_blank" rel="noopener">redux-thunk to access Redux state in an action creator</a></li><li><a href="https://goo.gl/JSbN2q" target="_blank" rel="noopener">ramda/assocPath for a Cleaner/shorter way to update nested state in Redux</a></li><li><a href="https://goo.gl/cdNhzV" target="_blank" rel="noopener">reselect for computing derived data in an efficent composable way</a></li><li><a href="https://goo.gl/qAFHy3" target="_blank" rel="noopener">How to write redux tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redux-Review&quot;&gt;&lt;a href=&quot;#Redux-Review&quot; class=&quot;headerlink&quot; title=&quot;Redux Review&quot;&gt;&lt;/a&gt;Redux Review&lt;/h1&gt;&lt;h2 id=&quot;ramda-assocPath&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="redux" scheme="http://dearfrankg.github.io/tags/redux/"/>
    
  </entry>
  
</feed>
