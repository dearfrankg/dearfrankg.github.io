<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dearfrankg.github.io/"/>
  <updated>2018-11-11T14:03:05.158Z</updated>
  <id>http://dearfrankg.github.io/</id>
  
  <author>
    <name>Frank Gutierrez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>learning nextjs</title>
    <link href="http://dearfrankg.github.io/2018/11/10/20181110-learning-nextjs/"/>
    <id>http://dearfrankg.github.io/2018/11/10/20181110-learning-nextjs/</id>
    <published>2018-11-10T22:42:38.000Z</published>
    <updated>2018-11-11T14:03:05.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="the-hard-way"><a href="#the-hard-way" class="headerlink" title="the hard way"></a>the hard way</h3><ul><li>manually install the necessary packages</li><li>update scripts in package.json</li><li>add pages directory</li><li>start dev server</li></ul><h3 id="the-easy-way"><a href="#the-easy-way" class="headerlink" title="the easy way"></a>the easy way</h3><ul><li>review choices at <a href="https://goo.gl/8iZS8D" target="_blank" rel="noopener">Next.js examples</a></li><li>follow the install instuctions in the readme file.</li><li>start dev server</li></ul><p>typical install process:</p><pre><code>npx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app</code></pre><h2 id="Style-and-Design-Support"><a href="#Style-and-Design-Support" class="headerlink" title="Style and Design Support"></a>Style and Design Support</h2><h3 id="evergreen-ui-react-design-component-lib"><a href="#evergreen-ui-react-design-component-lib" class="headerlink" title="evergreen-ui - react design component lib"></a>evergreen-ui - react design component lib</h3><p><a href="https://evergreen.segment.com/" target="_blank" rel="noopener">evergreen-ui</a></p><p>install</p><pre><code>npm i --save evergeen-ui</code></pre><p>setup</p><p>Include a <a href="https://goo.gl/Kzgwbc" target="_blank" rel="noopener">_document.js</a> script that will render evergreen CSS and JS for the client.</p><ul><li>the CSS rendered will be for <code>evergreen</code>, and support libs <code>glamor</code>, and <code>ui-box</code>.</li><li>the JS rendered as a script tag which contains a CSS cache.</li></ul><p>hydration</p><p>The act of providing state to the client is called <code>hydation</code>. In this case we will be supplying the CSS cache. The <code>CSS cache</code> is a JS object generated from scanning the <code>css-in-js</code> to extract style. The keys are generated hashes like <code>&#39;jdvhd&#39;</code>, and the values are the associated CSS string. Both the client and the server generate hashes but on the client it will leverage the cache if available.</p><h3 id="styled-components"><a href="#styled-components" class="headerlink" title="styled components"></a>styled components</h3><p><a href="https://www.styled-components.com/" target="_blank" rel="noopener">styled components</a></p><blockquote><p><a href="https://goo.gl/aGL5Aa" target="_blank" rel="noopener">nesting rules</a></p></blockquote><p>install</p><pre><code>npm i --save styled-components</code></pre><p>setup</p><ul><li><a href="https://goo.gl/Vnh89f" target="_blank" rel="noopener">_document.js</a></li><li><a href="https://goo.gl/Zrrdyp" target="_blank" rel="noopener">.babelrc</a></li></ul><h3 id="style-jsx-sass"><a href="#style-jsx-sass" class="headerlink" title="style-jsx-sass"></a>style-jsx-sass</h3><p><a href="https://goo.gl/kKqcy8" target="_blank" rel="noopener">style-jsx-sass</a></p><p>install</p><pre><code>npm i --save style-jsx-sass node-sass</code></pre><p>setup</p><ul><li><a href="https://goo.gl/tN63HX" target="_blank" rel="noopener">.babelrc</a></li></ul><h2 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h2><h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><ul><li><code>font-awesome</code></li><li><code>Open Sans</code> font from google fonts</li></ul><p>setup</p><ul><li><a href="https://goo.gl/YFWoZA" target="_blank" rel="noopener">meta.js</a> component</li></ul><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>setup</p><ul><li><code>static</code> folder</li></ul><p>You can serve static files from the static folder</p><h2 id="Gotchas"><a href="#Gotchas" class="headerlink" title="Gotchas"></a>Gotchas</h2><h3 id="Browser-issue-with-CSS-Grid"><a href="#Browser-issue-with-CSS-Grid" class="headerlink" title="Browser issue with CSS-Grid"></a>Browser issue with CSS-Grid</h3><p>There is a gotcha using fractional units with grid-rows. To use fractional units <code>1fr</code> with grid-rows, you must specify the size of the container div. You cannot use a percentage for the size or it will not work. See example gist <a href="https://goo.gl/5sE6RU" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Getting-Started&quot;&gt;&lt;a href=&quot;#Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;Getting Started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;h3 id=&quot;the-hard-way&quot;
      
    
    </summary>
    
    
      <category term="framework" scheme="http://dearfrankg.github.io/tags/framework/"/>
    
      <category term="nextjs" scheme="http://dearfrankg.github.io/tags/nextjs/"/>
    
  </entry>
  
  <entry>
    <title>react storybook</title>
    <link href="http://dearfrankg.github.io/2018/11/06/20181105-react-storybook/"/>
    <id>http://dearfrankg.github.io/2018/11/06/20181105-react-storybook/</id>
    <published>2018-11-06T19:23:30.000Z</published>
    <updated>2018-11-11T14:02:50.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Storybook is the most popular UI component development tool for React. It helps you develop and design UI components outside your app in an isolated environment.</p><p><a href="https://www.learnstorybook.com/" target="_blank" rel="noopener">Learn Storybook</a> aims to teach tried-and-true patterns for component development using Storybook. You’ll walk through essential UI component techniques while building a UI from scratch in React.</p><h2 id="Steps-Covered"><a href="#Steps-Covered" class="headerlink" title="Steps Covered"></a>Steps Covered</h2><ul><li>setup</li><li>simple component</li><li>composite component</li><li>data</li><li>screens</li><li>testing</li><li>addons</li><li>deploy</li><li>conclusions</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.learnstorybook.com/" target="_blank" rel="noopener">Storybook Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Storybook is the most popular UI component development too
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="storybook" scheme="http://dearfrankg.github.io/tags/storybook/"/>
    
  </entry>
  
  <entry>
    <title>securing your web app</title>
    <link href="http://dearfrankg.github.io/2018/11/03/20181101-securing-your-web-app/"/>
    <id>http://dearfrankg.github.io/2018/11/03/20181101-securing-your-web-app/</id>
    <published>2018-11-03T07:28:15.000Z</published>
    <updated>2018-11-11T13:47:43.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>We’re going to explore ways that rogue agents can attack your web app, then we’ll a implement a plan that will protect against these attacks and keep your app secure.</p><h2 id="Attack-Vectors"><a href="#Attack-Vectors" class="headerlink" title="Attack Vectors"></a>Attack Vectors</h2><h3 id="MIM-Man-In-The-Middle"><a href="#MIM-Man-In-The-Middle" class="headerlink" title="MIM - Man In The Middle"></a>MIM - Man In The Middle</h3><p>MIM is an attack where an attacker sits in a public coffee shop sniffing internet traffic. When they are able to sniff your JWT token they can maliciously access your app.</p><p>Danger: When passing credentials such as passwords or JWT over the intenet insecurely then an attacker can maliciously access your app.</p><p>Solution: Use <code>HTTPS</code> to protect app internet traffic and use <code>VPN</code> to protect all internet tracffic.</p><h3 id="XSS-Cross-Site-Scripting"><a href="#XSS-Cross-Site-Scripting" class="headerlink" title="XSS - Cross Site Scripting"></a>XSS - Cross Site Scripting</h3><p>XSS is an attack technique where an atacker can run javascript in your app because they have control over a 3rd party script used in your app, allowing them to maliciously access your app</p><p>Danger: An attacker with the ability to run javascript in your app could gain access to an insecurely stored JWT and use that to maliciously access your app.</p><p>Solution: It’s not reasonable to control all 3rd party scripts, so the next best thing is to secure sensitive data from javascript. Store your JWT in a secure cookie with no javascript access and only https access. Do not store your JWT in web-storage, local-storage, or unprotected-cookie.</p><h3 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF - Cross Site Request Forgery"></a>CSRF - Cross Site Request Forgery</h3><p>CSRF is an attack technique where an attacker can call your app from their domain and your incorrectly configured app gives them authorization by passing an authorization cookie to the server.</p><p>Danger: When your cookie is incorrectly configured to be passed from any domain to your server on every request then a rogue agent can gain authorization to your app.</p><p>Solution: configure as follows:</p><ul><li>use cookie option <code>httpOnly</code> to prevents javascript from reading the cookie.</li><li>use cookie option <code>secure</code> which forces https use and prevents sniffing on the wire.</li><li>store JWT in a secure cookie to prevent access via XSS and MIM.</li><li>pass a x-csrf-token in both your cookie and html as a way to confirm app access from same domain.</li></ul><h3 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS - Cross Origin Resource Sharing"></a>CORS - Cross Origin Resource Sharing</h3><p>CORS is a utility that allows your app to access HTTP resources from other domains. By default it can only access them from the same domain with the exceptions of images and styles. Specifically accessing AJAX, fonts, ES-Modules from other domains requires CORS.</p><p>Danger: When CORS is configured incorectly can allow any domain to access your server this enables a rogue agent to attack from their domain. By configuring which domains can and cannot access we make our app much more secure.</p><p>Solution: Configure CORS correctly utilizing white-lists and black-lists to secure your site.</p><h2 id="Protection-Plan"><a href="#Protection-Plan" class="headerlink" title="Protection Plan"></a>Protection Plan</h2><p>TBD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;We’re going to explore ways that rogue agents can attack y
      
    
    </summary>
    
    
      <category term="security" scheme="http://dearfrankg.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>server side rendering in react</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-server-side-rendering-in-React/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-server-side-rendering-in-React/</id>
    <published>2018-11-01T06:38:07.000Z</published>
    <updated>2018-11-11T14:02:29.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Let’s have a closer look at the feature that allows you to build universal applications with React. First some definitions:</p><p><strong>Server-Side Rendering (SSR)</strong><br>The ability of a front-end framework to render markup while running on a back-end system.</p><p><strong>Single Page Application (SPA)</strong><br>SPA’s offer great advantages in speed and UX over traditional server-rendered apps. But there is a catch. The initial server request is generally returning an empty HTML file with a bunch of CSS and JavaScript (JS) links. Then the external files need to be fetched in order to render relevant markup. This means that the user will have to wait longer for the initial render. This also means that crawlers may interpret your page as empty.</p><p><strong>Universal Application</strong><br>Universal Applications have the ability to render both on the server and on the client. So the idea is to render your app on the server initially, then to leverage the capabilities of SPAs on the client. Now the user does not have to wait for your JS to load and gets a fully rendered HTML as soon as the initial request returns a response.</p><blockquote><p>SSR + SPA = Universal App</p></blockquote><p>Imagine the huge improvement for users navigating on slow 3G networks. Rather than waiting for over 20s for the website to load, you get content on their screen almost instantly.</p><p><img src="https://goo.gl/Wd7Bm9" alt=""></p><p>And now, all the requests that are made to your server return fully rendered HTML. Great news for your SEO department! Crawlers will now see your website as any other static site on the web and will index all the content you render on the server.</p><p>So to recap, the two main benefits we get from SSR are:</p><ul><li>Faster times for the initial page render</li><li>Fully indexable HTML pages</li></ul><h2 id="Understanding-SSR-—-one-step-at-a-time"><a href="#Understanding-SSR-—-one-step-at-a-time" class="headerlink" title="Understanding SSR — one step at a time"></a>Understanding SSR — one step at a time</h2><p>Let’s take an iterative approach to build our complete SSR example. We start with React’s API for server rendering and we’ll add something to the mix at each step.</p><p>You can follow this <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> and the tags defined there for each step.</p><ol><li>Configure an express server to serve static files from the output folder</li><li>Create a route that will handle all non-static incoming requests and respond with HTML.</li><li>The client function ReactDOM.hydrate will attach event handlers to the server-rendered React app.</li></ol><blockquote><p>Note Babel works on both client and server code.</p></blockquote><h3 id="Your-Basic-Setup"><a href="#Your-Basic-Setup" class="headerlink" title="Your Basic Setup"></a>Your Basic Setup</h3><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">"express"</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">"react-dom/server"</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.resolve(__dirname, <span class="string">"../dist"</span>)));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  const reactDom = renderToString(jsx);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  res.writeHead(200, &#123; "Content-Type": "text/html" &#125;);</span></span><br><span class="line"><span class="xml">  res.end(htmlTemplate(reactDom));</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">app.listen(8000);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">function htmlTemplate(reactDom) &#123;</span></span><br><span class="line"><span class="xml">  return `</span></span><br><span class="line"><span class="xml">        <span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;meta charset="utf-8"&gt;</span><br><span class="line">            &lt;title&gt;React SSR&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;div id="app"&gt;$&#123;reactDom&#125;&lt;/div&gt;</span><br><span class="line">            &lt;script src="./app.bundle.js"&gt;&lt;/script&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br><span class="line">    `;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line">ReactDOM.hydrate(<span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span>, app);</span></span><br></pre></td></tr></table></figure><p>That’s it! You just created your first server-rendered React app!</p><p>To see the full example, check out the <code>basic</code> tag in the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><p>We have to be honest here, the app doesn’t do much. So let’s add a few routes and see how we handle the server part.</p><figure class="highlight js"><figcaption><span>src/components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, Switch, Route &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./Home"</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">"./About"</span>;</span><br><span class="line"><span class="keyword">import</span> Contact <span class="keyword">from</span> <span class="string">"./Contact"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/about<span class="string">"&gt;About&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/contact<span class="string">"&gt;Contact&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;Switch&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/<span class="string">" exact component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/about<span class="string">" exact component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/contact<span class="string">" exact component=&#123;Contact&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>The Layout component now renders multiple routes on the client.</p><p>We need to mimic the Router setup on the server. See the main changes below.</p><figure class="highlight js"><figcaption><span>src/components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; StaticRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> jsx = (</span><br><span class="line">    &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">      &lt;Layout /&gt;</span><br><span class="line">    &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  const reactDom = renderToString(jsx);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  res.writeHead(200, &#123; "Content-Type": "text/</span>html<span class="string">" &#125;);</span></span><br><span class="line"><span class="string">  res.end(htmlTemplate(reactDom));</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* ... */</span></span><br></pre></td></tr></table></figure><p>On the server, we need to wrap our React application in the <code>StaticRouter</code> component and provide the location. As a side note, the <code>context</code> is used for tracking potential redirects while rendering the React DOM. This needs to be handled with a <code>3XX response</code> from the server.</p><p>The full example can be seen on the <code>router</code> tag in the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>In the simple scenario, we need Redux to handle state management on the client. But what if we need to render parts of the DOM based on that state? It makes sense to initialize Redux on the server.</p><p>If your app is dispatching actions on the server, it needs to capture the state and send it over the wire together with the HTML. On the client, we feed that initial state into Redux.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider <span class="keyword">as</span> ReduxProvider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> store = createStore();</span><br><span class="line"></span><br><span class="line">  store.dispatch(initializeSession());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> jsx = (</span><br><span class="line">    &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">        &lt;Layout /&gt;</span><br><span class="line">      &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ReduxProvider&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> reactDom = renderToString(jsx);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reduxState = store.getState();</span><br><span class="line"></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">  res.end(htmlTemplate(reactDom, reduxState));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlTemplate</span>(<span class="params">reactDom, reduxState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        /* ... */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;div id="app"&gt;<span class="subst">$&#123;reactDom&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;script&gt;</span></span><br><span class="line"><span class="string">            window.REDUX_DATA = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(reduxState)&#125;</span></span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;script src="./app.bundle.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /* ... */</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider <span class="keyword">as</span> ReduxProvider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(<span class="built_in">window</span>.REDUX_DATA);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsx = (</span><br><span class="line">  &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Layout /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ReduxProvider&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line">ReactDOM.hydrate(jsx, app);</span><br></pre></td></tr></table></figure><p>Notice that we call <code>createStore</code> twice, first on the server, then on the client. However, on the client, we initialize the state with whatever state was saved on the server. This process is similar to the DOM hydration.</p><p>The full example can be seen on the <code>redux</code> tag in the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h3 id="Fetch-Data"><a href="#Fetch-Data" class="headerlink" title="Fetch Data"></a>Fetch Data</h3><p>The final piece of the puzzle is loading data. This is where it gets a bit trickier. Let’s say we have an API serving JSON data.</p><p>In our codebase, I fetch all the events from the 2018 Formula 1 season from a public API. Let’s say we want to display all the events on the Home page.</p><p>We can call our API only from the client after the React app is mounted and everything is rendered. But this will have a bad impact on UX, potentially showing a spinner or a loader before the user sees relevant content.</p><p>We already have Redux, as a way of storing data on the server and sending it over to the client.</p><p>What if we make our API calls on the server, store the results in Redux, and then render the full HTML with the relevant data for the client?</p><p>But how can we know which calls need to be made?</p><p>First, we need a different way of declaring routes. So we switch to the so-called routes config file. And we statically declare the data requirements on each component.</p><figure class="highlight js"><figcaption><span>src/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/about"</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/contact"</span>,</span><br><span class="line">    component: Contact,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/secret"</span>,</span><br><span class="line">    component: Secret,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">"../store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    render( ) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; circuits &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Home.serverFetch = fetchData; <span class="comment">// static declaration of data requirements</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p>Keep in mind that <code>serverFetch</code> is made up, you can use whatever sounds better for you.</p><p>As a note here, <code>fetchData</code> is a Redux thunk action, returning a Promise when dispatched.</p><p>On the server, we can use a special function from <code>react-router</code>, called matchRoute .</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; StaticRouter, matchPath &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">"./routes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataRequirements = routes</span><br><span class="line">    .filter(<span class="function"><span class="params">route</span> =&gt;</span> matchPath(req.url, route)) <span class="comment">// filter matching paths</span></span><br><span class="line">    .map(<span class="function"><span class="params">route</span> =&gt;</span> route.component) <span class="comment">// map to components</span></span><br><span class="line">    .filter(<span class="function"><span class="params">comp</span> =&gt;</span> comp.serverFetch) <span class="comment">// check if components have data requirement</span></span><br><span class="line">    .map(<span class="function"><span class="params">comp</span> =&gt;</span> store.dispatch(comp.serverFetch())); <span class="comment">// dispatch data requirement</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.all(dataRequirements).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> jsx = (</span><br><span class="line">      &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">          &lt;Layout /&gt;</span><br><span class="line">        &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ReduxProvider&gt;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> reactDom = renderToString(jsx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reduxState = store.getState();</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(htmlTemplate(reactDom, reduxState));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p>With this, we get a list of components that will be mounted when React is rendered to string on the current URL.</p><p>We gather the data requirements and we wait for all the API calls to return. Finally, we resume the server render, but with data already available in Redux.</p><p>The full example can be seen on the <code>fetch-data</code> tag in the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><p>You probably notice that this comes with a performance penalty, because we’re delaying the render until the data is fetched.</p><p>This is where you start comparing metrics and do your best to understand which calls are essential and which aren’t. For example, fetching products for an e-commerce app might be crucial, but prices and sidebar filters can be lazy loaded.</p><h3 id="Helmet"><a href="#Helmet" class="headerlink" title="Helmet"></a>Helmet</h3><p>As a bonus, let’s look at SEO. While working with React, you may want to set different values in your <code>&lt;head&gt;</code> tag. For example, you may want to set the <em>title, meta tags, keywords</em>, and so on.</p><p>Keep in mind that the <code>&lt;head&gt;</code> tag is normally not part of your React app!</p><p><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a> has you covered in this scenario. And it has great support for SSR.</p><figure class="highlight js"><figcaption><span>contact.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">"react-helmet"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Contact = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;This is the contact page&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Helmet&gt;</span></span><br><span class="line"><span class="regexp">      &lt;title&gt;Contact Page&lt;/</span>title&gt;</span><br><span class="line">      &lt;meta name=<span class="string">"description"</span> content=<span class="string">"This is a proof of concept for React SSR"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Helmet&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Contact;</span><br></pre></td></tr></table></figure><p>You just add your <code>head</code> data anywhere in your component tree. This gives you support for changing values outside the mounted React app on the client.</p><p>And now we add the support for SSR:</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">"react-helmet"</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get( <span class="string">"/*"</span>, ( req, res ) =&gt; &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">const</span> jsx = (</span><br><span class="line">            &lt;ReduxProvider store=&#123; store &#125;&gt;</span><br><span class="line">                &lt;StaticRouter context=&#123; context &#125; location=&#123; req.url &#125;&gt;</span><br><span class="line">                    &lt;Layout /&gt;</span><br><span class="line">                &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ReduxProvider&gt;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> reactDom = renderToString( jsx );</span><br><span class="line">        <span class="keyword">const</span> reduxState = store.getState( );</span><br><span class="line">        <span class="keyword">const</span> helmetData = Helmet.renderStatic( );</span><br><span class="line"></span><br><span class="line">        res.writeHead( <span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125; );</span><br><span class="line">        res.end( htmlTemplate( reactDom, reduxState, helmetData ) );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">app.listen( <span class="number">8000</span> );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlTemplate</span>(<span class="params"> reactDom, reduxState, helmetData </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123; helmetData.title.toString( ) &#125;</span></span></span><br><span class="line"><span class="string">            <span class="subst">$&#123; helmetData.meta.toString( ) &#125;</span></span></span><br><span class="line"><span class="string">            &lt;title&gt;React SSR&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /* ... */</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now we have a fully functional React SSR example!</p><p>We started from a simple render of HTML in the context of an Express app. We gradually added routing, state management, and data fetching. Finally, we handled changes outside the scope of the React application.</p><p>The final codebase is on <code>master</code> on the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you’ve seen, SSR is not a big deal, but it can get complex. And it’s much easier to grasp if you build your needs step by step.</p><p>Is it worth adding SSR to your application? As always, it depends. It’s a must if your website is public and accessible to hundreds of thousands of users. But if you’re building a tool/dashboard-like application it might not be worth the effort.</p><p>However, leveraging the power of universal apps is a step forward for the front-end community.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/VGKPcK" target="_blank" rel="noopener">Demystifying server-side rendering in React</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Let’s have a closer look at the feature that allows you to
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="SSR" scheme="http://dearfrankg.github.io/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>intro to next.js part1</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-intro-to-next-js/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-intro-to-next-js/</id>
    <published>2018-11-01T03:39:48.000Z</published>
    <updated>2018-11-11T14:02:16.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Next.js is a react framework for building any kind of react app from mobile to desktop to from SPA to static pages. This article will dive into how to get started quickly.</p><h3 id="Why-use-Next-js"><a href="#Why-use-Next-js" class="headerlink" title="Why use Next.js"></a>Why use Next.js</h3><p><strong>Zero Setup</strong><br>Automatic code splitting, filesystem based routing, hot code reloading and universal rendering.</p><p><strong>Fully Extensible</strong><br>Complete control over Babel and Webpack. Customizable server, routing and next-plugins.</p><p><strong>Ready for Production</strong><br>Optimized for a smaller build size, faster dev compilation and dozens of other improvements.</p><h2 id="Create-a-Next-js-project"><a href="#Create-a-Next-js-project" class="headerlink" title="Create a Next.js project"></a>Create a Next.js project</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul><li>install <code>node</code> using <code>nvm</code></li></ul><figure class="highlight plain"><figcaption><span>on the command line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello-next</span><br><span class="line">cd hello-next</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save react react-dom next</span><br><span class="line">mkdir pages</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>edit package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Run the server</strong></p><figure class="highlight plain"><figcaption><span>on the command line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><strong>Open the app</strong></p><p>open <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> from your favorite browser</p><blockquote><p>You’ll see a page with a <code>404 error</code> indicating the page cannot be found.</p></blockquote><h2 id="Creating-your-first-page"><a href="#Creating-your-first-page" class="headerlink" title="Creating your first page"></a>Creating your first page</h2><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></table></figure><blockquote><p>If you make a typo error messages appear on the browser page.</p></blockquote><h2 id="Navigate-between-pages"><a href="#Navigate-between-pages" class="headerlink" title="Navigate between pages"></a>Navigate between pages</h2><p><strong>Using a link</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">"next/link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a&gt;About Page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></table></figure><ul><li>Link works with browser history (back button)</li><li>Don’t style a Link, style it’s children</li><li>Link works with <code>a</code> and <code>button</code> tags and any tag with an <code>onClick</code> event.</li></ul><h2 id="Using-shared-components"><a href="#Using-shared-components" class="headerlink" title="Using shared components"></a>Using shared components</h2><p><strong>Create a Header component</strong></p><figure class="highlight js"><figcaption><span>components/Header.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">"next/link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkStyle = &#123;</span><br><span class="line">  marginRight: <span class="number">15</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">      &lt;a style=&#123;linkStyle&#125;&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a style=&#123;linkStyle&#125;&gt;About&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><p><strong>Using the Header component</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"../components/Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Create the Layout component</strong></p><figure class="highlight js"><figcaption><span>components/MyLayout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> layoutStyle = &#123;</span><br><span class="line">  margin: <span class="number">20</span>,</span><br><span class="line">  padding: <span class="number">20</span>,</span><br><span class="line">  border: <span class="string">"1px solid #DDD"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;layoutStyle&#125;&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Layout;</span></span><br></pre></td></tr></table></figure><p><strong>Use the Layout component</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"../components/MyLayout.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Layout&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Layout&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"../components/MyLayout.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Layout&gt;</span><br><span class="line">    &lt;p&gt;This is the about page&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Layout&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this post we demonstated using the Next.js react framework. We observed the following.</p><ul><li>Next uses pages just like HTML</li><li>Next pages consist of HTML/JS/CSS = JSX/JS/CSS-in-js</li><li>Next has a Link component for navigating between pages.</li><li>Next produces pages with React components.</li><li>React components can be shared and nested with other React components</li></ul><p>We have learned enough to build a website. In the next post I will demonstrate how to build dynamic applications using Next.js.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;Next.js is a react framework for building any kind of reac
      
    
    </summary>
    
    
      <category term="framework" scheme="http://dearfrankg.github.io/tags/framework/"/>
    
      <category term="nextjs" scheme="http://dearfrankg.github.io/tags/nextjs/"/>
    
  </entry>
  
  <entry>
    <title>oss 0 vs redhat 34 billion</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-oss-vs-redhat/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-oss-vs-redhat/</id>
    <published>2018-11-01T01:04:35.000Z</published>
    <updated>2018-11-11T13:47:16.820Z</updated>
    
    <content type="html"><![CDATA[<p>Donald Fischer, who served as a product manager for Red Hat Enterprise Linux during its creation and early years of growth, writes:</p><blockquote><p>Red Hat saw, earlier than most, that the ascendance of open source made the need to pay for code go away, but the need for support and maintenance grew larger than ever. Thus Red Hat was never in the business of selling software, rather it was in the business of addressing the practical challenges that have always come along for the ride with software. […] As an open source developer, you created that software. You can keep your package secure, legally documented, and maintained; who could possibly do it better? So why does Red Hat make the fat profits, and not you? Unfortunately, doing business with large companies requires a lot of bureaucratic toil. That’s doubly true for organizations that require security, legal, and operational standards for every product they bring in the door. Working with these organizations requires a sales and marketing team, a customer support organization, a finance back-office, and lots of other “business stuff” in addition to technology. Red Hat has had that stuff, but you haven’t.<br><br><br>And just like you don’t have time to sell to large companies, they don’t have time to buy from you alongside a thousand other open source creators, one at a time. Sure, big companies know how to install and use your software. (And good news! They already do.) But they can’t afford to put each of 1100 npm packages through a procurement process that costs $20k per iteration. Red Hat solved this problem for one corner of open source by collecting 2,000+ open source projects together, adding assurances on top, and selling it as one subscription product. That worked for them, to the tune of billions. But did you get paid for your contributions?</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Donald Fischer, who served as a product manager for Red Hat Enterprise Linux during its creation and early years of growth, writes:&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="business" scheme="http://dearfrankg.github.io/tags/business/"/>
    
  </entry>
  
  <entry>
    <title>understanding react performance</title>
    <link href="http://dearfrankg.github.io/2018/10/31/20181031-understanding-react-performance/"/>
    <id>http://dearfrankg.github.io/2018/10/31/20181031-understanding-react-performance/</id>
    <published>2018-10-31T13:34:41.000Z</published>
    <updated>2018-11-11T14:02:38.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>We’re going to dive into some typical react performance problems and how to solve them. We will be using and example Profile app which displays a profile card consisting of an image and four fields rendered from state, and one button that changes the state of the description field.</p><p><strong>References</strong></p><ul><li><a href="https://goo.gl/aPJM5t" target="_blank" rel="noopener">a checklist for eliminating common React performance issues</a></li></ul><h2 id="Identify-wasted-renders"><a href="#Identify-wasted-renders" class="headerlink" title="Identify wasted renders"></a>Identify wasted renders</h2><p>In order to identify wateful renders we can utilize these two tools:</p><ul><li>react-dev-tools – highlights when a component renders by flashing a green outline on the component.</li><li>console.log – from your components render method you can console.log to see when it’s rendering.</li></ul><p>Utilizing the react-dev-tools on our app show that when the description field is updated the whole profile component renders as identified by the green flashing border.</p><p>Below are some ways to optimize the situation.</p><h2 id="Extract-frequently-updated-regions-into-isolated-components"><a href="#Extract-frequently-updated-regions-into-isolated-components" class="headerlink" title="Extract frequently updated regions into isolated components"></a>Extract frequently updated regions into isolated components</h2><p>The Profile app is connected to 4 redux fields. So when the <code>description</code> field changes it causes the card to re-render. Remember whenever the <code>props</code> or <code>state</code> changes that causes a re-render. Let’s localize the elements being updated to a specific react component. We will create a <code>Profession</code> componenent connected to only the description</p><pre><code>const Profession = ({ description }) =&gt; {  return (    &lt;p&gt;     &lt;span className=&quot;faint&quot;&gt;I am&lt;/span&gt; a {description}    &lt;/p&gt;  );}</code></pre><p>Now only the <code>profession</code> component will update when the <code>description</code> changes.</p><h2 id="Use-pure-components-when-appropriate"><a href="#Use-pure-components-when-appropriate" class="headerlink" title="Use pure components when appropriate"></a>Use pure components when appropriate</h2><p>The Profession component consists of four words ‘I’, “am”, “a”, “description”. For example purposes if we create a new component for each of those four items maybe we can isolate the description field.</p><p>Pure components only render when their props change. By making our new components Pure we can avoid re-rendering when not necessary. An easy way to implement a <code>pure component</code> is to use <code>React.PureComponents</code> with class components (functional components can be pure also using react connect). Here is our new description component. We don’t show it but each of the child components is a pure component to avoid re-renders.</p><pre><code>const Description = ({ description }) =&gt; {  return (    &lt;p&gt;      &lt;I /&gt;an isolate      &lt;Am /&gt;      &lt;A /&gt;      &lt;Profession profession={description} /&gt;    &lt;/p&gt;  );};</code></pre><h2 id="Avoid-passing-new-objects-as-props"><a href="#Avoid-passing-new-objects-as-props" class="headerlink" title="Avoid passing new objects as props"></a>Avoid passing new objects as props</h2><p><strong>Watch out for new objects</strong></p><p>When you create an object variable in a render method, it creates a new object for every render. In the example below we create the <code>i</code> variable and assign it a new object. This causes the Calendar component to re-render repeatedly.</p><pre><code>class Description extends Component {  render() {    const i = { value: &quot;i&quot; };    return (      &lt;p&gt;        &lt;Title /&gt;        &lt;Calender i={i} /&gt;        &lt;Footer  /&gt;      &lt;/p&gt;    );  }}</code></pre><p>The solution is to use a class variable outside the render method. This prevents a new object from being created on each render. This way the Calendar component only renders once.</p><pre><code>class Description extends Component {  i = { day: 22 }  render() {    return (      &lt;p&gt;        &lt;Title /&gt;        &lt;Calender i={i} /&gt;        &lt;Footer  /&gt;      &lt;/p&gt;    );  }}</code></pre><p><strong>Watch out for explicit event handlers</strong></p><p>Here we have an event handler that creates a new function on every render.</p><pre><code>...render() {  &lt;div onClick={() =&gt; {//do something here}}}...</code></pre><p>The solution is to use a class method to avoid creating a new function on every render.</p><pre><code>...handleClick:() ={...}render() {  &lt;div onClick={this.handleClick}}...</code></pre><h2 id="Use-the-production-build"><a href="#Use-the-production-build" class="headerlink" title="Use the production build"></a>Use the production build</h2><p>For create-react-app</p><pre><code>npm run buildnpm run start</code></pre><p>This will yield bundle optimized files for production.</p><h2 id="Employ-code-splitting"><a href="#Employ-code-splitting" class="headerlink" title="Employ code splitting"></a>Employ code splitting</h2><p>You can implement this in a couple of ways:</p><ul><li><p>split by page – only code necessary for the page.</p></li><li><p>split by component – only code necessary for the component.</p></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now you’ve got a decent checklist for tracking and fixing common performance issues in react apps. Go build some fast apps!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h1&gt;&lt;p&gt;We’re going to dive into some typical react performance pr
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="performance" scheme="http://dearfrankg.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>css selectors you must know</title>
    <link href="http://dearfrankg.github.io/2018/08/22/20180822-css-selectors-you-must-know/"/>
    <id>http://dearfrankg.github.io/2018/08/22/20180822-css-selectors-you-must-know/</id>
    <published>2018-08-22T11:16:43.000Z</published>
    <updated>2018-11-11T14:02:03.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048" target="_blank" rel="noopener">memorize 30 CSS selectors</a></li></ul><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. #container           id selector</span><br><span class="line"></span><br><span class="line">2. .foo                 class selector</span><br><span class="line"></span><br><span class="line">3. ul li                descendent selector</span><br></pre></td></tr></table></figure><h2 id="Memorize-these-30-Selectors"><a href="#Memorize-these-30-Selectors" class="headerlink" title="Memorize these 30 Selectors"></a>Memorize these 30 Selectors</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">01. *                                   every element</span><br><span class="line">    #container *                        every child element</span><br><span class="line"></span><br><span class="line">02. #x                                  id selector                         // avoid if possible</span><br><span class="line"></span><br><span class="line">03. .foo                                class selector</span><br><span class="line"></span><br><span class="line">04. li a                                descendent selector                 // li a p.error -- doing it wrong</span><br><span class="line"></span><br><span class="line">05. ul                                  type selector</span><br><span class="line"></span><br><span class="line">06. a:link                              not clicked psudeo class</span><br><span class="line"></span><br><span class="line">    a:visited                           clicked on psudeo class</span><br><span class="line"></span><br><span class="line">07. ul + p                              adjacent selector                   // only the first p after each ul</span><br><span class="line"></span><br><span class="line">08. ul &gt; li                             direct descendent selector          // avoids nested lists</span><br><span class="line"></span><br><span class="line">09. ul ~ p                              sibling selector                     // all p&apos;s that follow a ul</span><br><span class="line"></span><br><span class="line">10. a[title]                            attributes selector                 // only select anchor with title attri</span><br><span class="line"></span><br><span class="line">11. a[href=&quot;http://net.tutsplus.com&quot;]   attribute match selector            // find exact value</span><br><span class="line"></span><br><span class="line">12. a[href*=&quot;nettuts&quot;]                  contains selector                   // find must be contained in the v</span><br><span class="line"></span><br><span class="line">13. a[href^=&quot;http&quot;]                     starts with selector                // value must start with</span><br><span class="line"></span><br><span class="line">14. a[href$=&quot;.jpg&quot;]                     ends with selector                  // value must end with</span><br><span class="line"></span><br><span class="line">15. a[data-filetype=&quot;image&quot;]            data attribute match                // elements with data attribute matching</span><br><span class="line"></span><br><span class="line">16. a[data-info~=&quot;external&quot;]            data attribute containing word      // find word space separated list</span><br><span class="line"></span><br><span class="line">17. input[type=radio]:checked           checked psuedo class                // find elements that are checked</span><br><span class="line"></span><br><span class="line">18. .title:before                       before element psuedo class         // often used to place content</span><br><span class="line"></span><br><span class="line">    .title:after                        after element psuedo class          // officially use :: but best practice :</span><br><span class="line"></span><br><span class="line">19. a:hover                             hover action psuedo class           // when hovering</span><br><span class="line"></span><br><span class="line">20. div:not(#container)                 negation psuedo class               // all divs without #container</span><br><span class="line"></span><br><span class="line">21. p::first-line                       psuedo element                      // add style to psuedo elements</span><br><span class="line"></span><br><span class="line">    p::first-letter                                                         // mus be applied to block elements</span><br><span class="line"></span><br><span class="line">22. li:nth-child(3)                     nth-child selector                  // select the 3rd li</span><br><span class="line"></span><br><span class="line">    li:nth-child(4n)                                                        // select every fouth child</span><br><span class="line"></span><br><span class="line">23. li:nth-last-child(2)                nth-last-child selector             // select starting from last</span><br><span class="line"></span><br><span class="line">24. ul:nth-of-type(3)                   nth-of-type selector                // select the third of type ul</span><br><span class="line"></span><br><span class="line">25. li:nth-last-of-type(2)              nth-last-of-type selector           // select starting from last</span><br><span class="line"></span><br><span class="line">26. ul li:first-child                   first-child selector                // first li in list</span><br><span class="line"></span><br><span class="line">27. ul &gt; li:last-child                  last child selector                 // last child in list &apos;&gt;&apos; = decendant</span><br><span class="line"></span><br><span class="line">28. div p:only-child                    only-child selector                 // select p if div has only one p</span><br><span class="line"></span><br><span class="line">29. ul &gt; li:only-of-type                only-of-type selector               // select li if ul has only one li</span><br><span class="line"></span><br><span class="line">30. ul:first-of-type                    first of type psudo class           // find first element of type ul</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Source&quot;&gt;&lt;a href=&quot;#Source&quot; class=&quot;headerlink&quot; title=&quot;Source&quot;&gt;&lt;/a&gt;Source&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.tutsplus.com/tutorials/the
      
    
    </summary>
    
    
      <category term="design" scheme="http://dearfrankg.github.io/tags/design/"/>
    
      <category term="css" scheme="http://dearfrankg.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>intro to css-grid</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-intro-to-css-grid/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-intro-to-css-grid/</id>
    <published>2018-08-19T15:09:25.000Z</published>
    <updated>2018-11-11T14:00:46.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="https://goo.gl/fdbjt1" target="_blank" rel="noopener">https://goo.gl/fdbjt1</a></li></ul><h2 id="Grid-Terminology"><a href="#Grid-Terminology" class="headerlink" title="Grid Terminology"></a>Grid Terminology</h2><ul><li>grid container: contains the grid</li><li>grid lines: horizontal and vertical lines that divide the grid</li><li>grid cell: smallest unit of area in a grid</li><li>grid area: a rectangular area in the grid as small asone grid cell or as large as the entire grid.</li><li>grid track: the space between any two grid lines</li></ul><h2 id="How-to-define-a-grid"><a href="#How-to-define-a-grid" class="headerlink" title="How to define a grid"></a>How to define a grid</h2><p>Define grid:</p><pre><code>- display: grid;   // OR inline grid;- grid-template-columns: ...- grid-template-rows: ...</code></pre><h2 id="Creating-a-music-app"><a href="#Creating-a-music-app" class="headerlink" title="Creating a music app"></a>Creating a music app</h2><p>The grid conainer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Naming and Positioning Items by Grid Areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  ...;</span><br><span class="line">  <span class="selector-tag">grid-template-areas</span>:</span><br><span class="line">    "<span class="selector-tag">sidebar</span>  <span class="selector-tag">content</span>"</span><br><span class="line">    "<span class="selector-tag">footer</span>   <span class="selector-tag">footer</span>";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"sidebar  content"</span></span><br><span class="line">    <span class="string">"footer  footer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Let’s-Get-Responsive"><a href="#Let’s-Get-Responsive" class="headerlink" title="Let’s Get Responsive"></a>Let’s Get Responsive</h2><p>Mobile First</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"content"</span></span><br><span class="line">    <span class="string">"footer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Desktop</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">      <span class="string">"sidebar  content"</span></span><br><span class="line">      <span class="string">"footer   footer"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Placing-Content-within-the-Grid"><a href="#Placing-Content-within-the-Grid" class="headerlink" title="Placing Content within the Grid."></a>Placing Content within the Grid.</h2><p>FontAwesome 4.x was used.</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;</code></pre><h3 id="The-Sidebar"><a href="#The-Sidebar" class="headerlink" title="The Sidebar"></a>The Sidebar</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bars"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-volume-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-spotify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-soundcloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aside</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make the Sidebar a Grid Container</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-main-header"><a href="#The-main-header" class="headerlink" title="The main header"></a>The main header</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bit.ly/2sc2NJd"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"details"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>CattyBoard Top 100 Single Charts (11.06.36)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sm--hide"</span>&gt;</span>Unknown Artist<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sm--hide"</span>&gt;</span>2016 . Charts . 100 songs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-play"</span>&gt;</span> &amp;nbsp;Play all<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-plus"</span>&gt;</span> &amp;nbsp;Add to<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-ellipsis-h"</span>&gt;</span>&amp;nbsp;&amp;nbsp;More<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>define the grid areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__header</span> &gt; <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: img;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main__header</span> &gt; <span class="selector-class">.details</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: dtls;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, define the grid itself</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"img"</span></span><br><span class="line">    <span class="string">"dtls"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For mobile</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main__header</span> &#123;</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.main__header</span> &gt; <span class="selector-class">.details</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.sm--hide</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.img</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For desktop</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main__header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">250px</span> <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">"img dtls"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-main-details"><a href="#The-main-details" class="headerlink" title="The main details"></a>The main details</h3><p>Here we’ll make CSS-Grid work with Flexbox</p><p>The HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1. One Dance<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Crake feat CatKid &amp;amp; Cyla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2:54<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2. Panda<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cattee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4:06<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3. Can't Stop the Feeling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Catin Cimberlake<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3:56<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4. Work From Home<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cat Harmony feat Colla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3:34<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Final-Result"><a href="#The-Final-Result" class="headerlink" title="The Final Result"></a>The Final Result</h2><ul><li><a href="https://codesandbox.io/s/rwp1zqx5jp" target="_blank" rel="noopener">https://codesandbox.io/s/rwp1zqx5jp</a></li></ul><p>Mobile</p><p><img src="https://i.imgur.com/lR9xEuW.png" alt=""></p><p>Desktop</p><p><img src="https://i.imgur.com/pqCMCNX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Source&quot;&gt;&lt;a href=&quot;#Source&quot; class=&quot;headerlink&quot; title=&quot;Source&quot;&gt;&lt;/a&gt;Source&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://goo.gl/fdbjt1&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
      <category term="design" scheme="http://dearfrankg.github.io/tags/design/"/>
    
      <category term="css-grid" scheme="http://dearfrankg.github.io/tags/css-grid/"/>
    
  </entry>
  
  <entry>
    <title>recent practice</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-recent-practice/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-recent-practice/</id>
    <published>2018-08-19T11:46:23.000Z</published>
    <updated>2018-11-11T13:46:16.369Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://certain-owl.surge.sh/" target="_blank" rel="noopener">flexing flexbox</a></li><li><a href="https://codesandbox.io/s/rwp1zqx5jp" target="_blank" rel="noopener">css-grid</a></li><li><a href="https://codesandbox.io/s/6w079rly0k" target="_blank" rel="noopener">recursion practice</a></li><li><a href="https://codesandbox.io/s/1vmx5w5kx7" target="_blank" rel="noopener">fractal tree</a></li><li><a href="https://codesandbox.io/s/30p22krx95" target="_blank" rel="noopener">react bowling</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://certain-owl.surge.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flexing flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codesandbox.io/
      
    
    </summary>
    
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>using export with index.js</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-using-export-with-index-js/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-using-export-with-index-js/</id>
    <published>2018-08-19T11:35:23.000Z</published>
    <updated>2018-11-11T14:01:43.658Z</updated>
    
    <content type="html"><![CDATA[<p>Consider the app sructure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── config.js</span><br><span class="line">├── containers</span><br><span class="line">├── context.js</span><br><span class="line">├── images</span><br><span class="line">│   └── logo.svg</span><br><span class="line">├── index.js</span><br><span class="line">├── registerServiceWorker.js</span><br><span class="line">├── routes</span><br><span class="line">│   ├── App.css</span><br><span class="line">│   ├── App.js</span><br><span class="line">│   └── App.test.js</span><br><span class="line">├── styles</span><br><span class="line">│   └── index.css</span><br><span class="line">├── utils</span><br><span class="line">└── views</span><br><span class="line">    ├── body.css</span><br><span class="line">    ├── body.js</span><br><span class="line">    ├── flex.css</span><br><span class="line">    ├── flex.js</span><br><span class="line">    ├── header.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── info.js</span><br></pre></td></tr></table></figure><p>/src/views/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./header"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./body"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./info"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./flex"</span>;</span><br></pre></td></tr></table></figure><p>/src/views/body.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./body.css"</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  FlexDefaults,</span><br><span class="line">  FlexWrap1,</span><br><span class="line">  FlexWrap2,</span><br><span class="line">  Justify1,</span><br><span class="line">  Justify2,</span><br><span class="line">  Justify3,</span><br><span class="line">  Justify4,</span><br><span class="line">  Justify5,</span><br><span class="line">  Align1,</span><br><span class="line">  JustifyAndAlign</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../views"</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Utilising the <code>index.js</code> file in this way you can import many views wether they exist in one file or many. This simplifies coding. You do need to remember to populate <code>index.js</code> when adding new files.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Consider the app sructure&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://dearfrankg.github.io/tags/javascript/"/>
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>recursion review</title>
    <link href="http://dearfrankg.github.io/2018/08/19/20180819-recursion/"/>
    <id>http://dearfrankg.github.io/2018/08/19/20180819-recursion/</id>
    <published>2018-08-19T11:23:14.000Z</published>
    <updated>2018-11-11T14:01:33.571Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper functions</span></span><br><span class="line"><span class="keyword">const</span> format = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="function"><span class="params">title</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`\n<span class="subst">$&#123;title&#125;</span>\n---------------------`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterate = <span class="function">(<span class="params">fnName, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fnName&#125;</span>(<span class="subst">$&#123;n&#125;</span>) = <span class="subst">$&#123;fn(n)&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WRITE FUNCTIONS IN A RECURSIVE WAY</span></span><br><span class="line"><span class="comment">// pow, fibonaci, factorial, map, reverse, sumSalaries</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pow = <span class="function">(<span class="params">b, n</span>) =&gt;</span> (n === <span class="number">1</span> ? b : b * pow(b, n - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fibonaci = <span class="function"><span class="params">x</span> =&gt;</span> (x &lt;= <span class="number">1</span> ? <span class="number">1</span> : fibonaci(x - <span class="number">1</span>) + fibonaci(x - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = <span class="function"><span class="params">x</span> =&gt;</span> (x === <span class="number">1</span> ? <span class="number">1</span> : x * factorial(x - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> (arr.length === <span class="number">0</span> ? [] : fn(arr[<span class="number">0</span>]).concat(map(arr.slice(<span class="number">1</span>), fn)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">s</span> =&gt;</span> (s.length === <span class="number">1</span> ? s : s.slice(<span class="number">-1</span>) + reverse(s.slice(<span class="number">0</span>, <span class="number">-1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumSalaries = <span class="function"><span class="params">department</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isDepartment = <span class="built_in">Array</span>.isArray(department);</span><br><span class="line">  <span class="keyword">if</span> (isDepartment) &#123;</span><br><span class="line">    <span class="keyword">return</span> department.reduce(<span class="function">(<span class="params">acc, person</span>) =&gt;</span> acc + person.salary, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (dept <span class="keyword">in</span> department) &#123;</span><br><span class="line">      sum += sumSalaries(department[dept]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pow</span></span><br><span class="line">title(<span class="string">"pow"</span>);</span><br><span class="line"><span class="keyword">const</span> powOfBase2 = <span class="function"><span class="params">n</span> =&gt;</span> pow(<span class="number">2</span>, n);</span><br><span class="line">iterate(<span class="string">"powOfBase2"</span>, powOfBase2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fibonaci</span></span><br><span class="line">title(<span class="string">"fibonaci"</span>);</span><br><span class="line">iterate(<span class="string">"fibonaci"</span>, fibonaci);</span><br><span class="line"></span><br><span class="line"><span class="comment">// factorial</span></span><br><span class="line">title(<span class="string">"factorial"</span>);</span><br><span class="line">iterate(<span class="string">"factorial"</span>, factorial);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">title(<span class="string">"map"</span>);</span><br><span class="line"><span class="keyword">const</span> lettersArray = <span class="string">"abcde"</span>.split(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">const</span> uppercase = <span class="function"><span class="params">x</span> =&gt;</span> x.toUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`map(<span class="subst">$&#123;format(lettersArray)&#125;</span>, uppercase) = <span class="subst">$&#123;map(lettersArray, uppercase)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reverse</span></span><br><span class="line">title(<span class="string">"reverse"</span>);</span><br><span class="line"><span class="keyword">const</span> word = <span class="string">"abcde"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`reverse(<span class="subst">$&#123;format(word)&#125;</span>) = <span class="subst">$&#123;reverse(word)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sumSalaries</span></span><br><span class="line">title(<span class="string">"sumSalaries"</span>);</span><br><span class="line"><span class="keyword">const</span> company = &#123;</span><br><span class="line">  sales: [&#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">salary</span>: <span class="number">1000</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Alice"</span>, <span class="attr">salary</span>: <span class="number">600</span> &#125;],</span><br><span class="line">  development: &#123;</span><br><span class="line">    sites: [&#123; <span class="attr">name</span>: <span class="string">"Peter"</span>, <span class="attr">salary</span>: <span class="number">2000</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Alex"</span>, <span class="attr">salary</span>: <span class="number">1800</span> &#125;],</span><br><span class="line">    internals: [&#123; <span class="attr">name</span>: <span class="string">"Jack"</span>, <span class="attr">salary</span>: <span class="number">1300</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`sumSalaries(company) = <span class="subst">$&#123;sumSalaries(company)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://dearfrankg.github.io/tags/javascript/"/>
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
      <category term="recusion" scheme="http://dearfrankg.github.io/tags/recusion/"/>
    
  </entry>
  
  <entry>
    <title>redux testing</title>
    <link href="http://dearfrankg.github.io/2018/04/05/20180405-redux-testing/"/>
    <id>http://dearfrankg.github.io/2018/04/05/20180405-redux-testing/</id>
    <published>2018-04-05T12:30:18.000Z</published>
    <updated>2018-11-11T14:00:25.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Testing-with-Jest-snapshots"><a href="#Testing-with-Jest-snapshots" class="headerlink" title="Testing with Jest snapshots"></a>Testing with Jest snapshots</h2><h3 id="testing-actions"><a href="#testing-actions" class="headerlink" title="testing actions"></a>testing actions</h3><p>action creator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should create an action to add a recipe'</span>, () =&gt; &#123;</span><br><span class="line">  expect(actions.addRecipe(<span class="string">'test'</span>)).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>dynamic action creator</p><p>logic emits different object based on input parameter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">''</span>].forEach(<span class="function">(<span class="params">param</span>) =&gt;</span></span><br><span class="line">  it(<span class="string">`should add recipe with default parameter <span class="subst">$&#123;param&#125;</span>`</span>, () =&gt; &#123;</span><br><span class="line">    expect(actions.addRecipe(param)).toMatchSnapshot()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="testing-asynchronous-actions"><a href="#testing-asynchronous-actions" class="headerlink" title="testing asynchronous actions"></a>testing asynchronous actions</h3><p>they discourage the use of asynchronous action creators</p><ul><li>create mock response</li><li>stub fetch success and error</li><li>setup mock fetch</li><li>fetch</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Async action creator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setRecipe = <span class="function">(<span class="params">id, data</span>) =&gt;</span> (&#123;</span><br><span class="line">  type: actions.SET_RECIPE,</span><br><span class="line">  payload: &#123; id, data &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchRecipe = <span class="function"><span class="params">id</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">'recipe/'</span> + id)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(setRecipe(id, json)))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a fake response object</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockResponse = <span class="function">(<span class="params">status, statusText, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">window</span>.Response(response, &#123;</span><br><span class="line">    status: status,</span><br><span class="line">    statusText: statusText,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleResponse = <span class="function">(<span class="params">mockedUrl, response</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">window</span>.fetch = jest.fn().mockImplementation(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (url === mockedUrl) &#123;</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span>(<span class="string">'Unknown URL: '</span> + url);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockFetch = <span class="function">(<span class="params">mockedUrl, status, data</span>) =&gt;</span></span><br><span class="line">  handleResponse(</span><br><span class="line">  mockedUrl,</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(mockResponse(status, <span class="literal">null</span>, data)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockFetchError = <span class="function">(<span class="params">mockedUrl, state, error</span>) =&gt;</span></span><br><span class="line">  handleResponse(</span><br><span class="line">  mockedUrl,</span><br><span class="line">  <span class="built_in">Promise</span>.reject(mockResponse(state, error, <span class="string">'&#123;&#125;'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// The mock fetch() call will return a resolved promise</span></span><br><span class="line"><span class="comment">// that is similar to the real result from a fetch()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample mocked fetch code</span></span><br><span class="line">mockFetch(<span class="number">200</span>, <span class="string">'&#123;"key":"value"&#125;'</span>);</span><br><span class="line">fetch(<span class="string">'test.json'</span>)</span><br></pre></td></tr></table></figure><p>Unlike simple action creators, our code now relies on dispatch() being used, which forces us to<br>create a mock instance of a store. To do so, we will use the <code>redux-mock-store</code> library:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a mock store</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'redux-mock-store'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockStore = configureStore([ thunk ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Structure of an async test block</span></span><br><span class="line">describe(<span class="string">'fetch recipe'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> store;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> store = mockStore(&#123;&#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Full async test</span></span><br><span class="line">  it(<span class="string">'should fetch recipe if it exists'</span>, () =&gt; &#123;</span><br><span class="line">    mockFetch(<span class="string">'recipe/100'</span>, <span class="number">200</span>, <span class="string">'&#123;"title":"hello"&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store.dispatch(actions.fetchRecipe(<span class="number">100</span>))</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> expect(store.getActions()).toMatchSnapshot())</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Integration-Tests"><a href="#Integration-Tests" class="headerlink" title="Integration Tests"></a>Integration Tests</h3><p>The role of the integration tests is to verify that all the parts of the application work correctly together. A comprehensive unit test suite will ensure all the reducers, action creators, middleware, and libraries are correct. With integration tests, we will try to run them together in a single test to check system-wide behavior.</p><p>basic integration test include 4 steps</p><ol><li>verify initial state</li><li>mock external dependencies</li><li>dispatch an action</li><li>verify that the state has changed and any external APIs were called as expected</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchRecipes &#125; <span class="keyword">from</span> <span class="string">'actions/recipes'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mockFetch &#125; <span class="keyword">from</span> <span class="string">'test-utils'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'integration'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should fetch recipes from server'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = [&#123; <span class="attr">title</span>: <span class="string">'test'</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(store.getState().recipes).toEqual([]);                   <span class="comment">// verify initial state</span></span><br><span class="line">    mockFetch(<span class="string">'recipes.json'</span>, <span class="number">200</span>, <span class="built_in">JSON</span>.stringify(data));           <span class="comment">// mock dependencies</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store.dispatch(fetchRecipes())                           <span class="comment">// dispatch action</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> expect(store.getState().recipes).toEqual(data));  <span class="comment">// verify state</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Testing-with-Jest-snapshots&quot;&gt;&lt;a href=&quot;#Testing-with-Jest-snapshots&quot; class=&quot;headerlink&quot; title=&quot;Testing with Jest snapshots&quot;&gt;&lt;/a&gt;Testi
      
    
    </summary>
    
    
      <category term="testing" scheme="http://dearfrankg.github.io/tags/testing/"/>
    
      <category term="redux" scheme="http://dearfrankg.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux training</title>
    <link href="http://dearfrankg.github.io/2018/04/05/20180405-redux-training/"/>
    <id>http://dearfrankg.github.io/2018/04/05/20180405-redux-training/</id>
    <published>2018-04-05T12:30:18.000Z</published>
    <updated>2018-11-11T14:00:36.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-hello-world"><a href="#01-hello-world" class="headerlink" title="01 hello world"></a>01 hello world</h2><p>demo creating a simple react app with a single .js file.</p><ul><li><code>react run index.js</code></li></ul><h2 id="02-add-some-sass"><a href="#02-add-some-sass" class="headerlink" title="02 add some sass"></a>02 add some sass</h2><p>demo sass in your simple app.</p><ul><li><code>react run index.js --plugins sass</code></li></ul><h2 id="03-add-professional-file-structure"><a href="#03-add-professional-file-structure" class="headerlink" title="03 add professional file structure"></a>03 add professional file structure</h2><p>demo app with professional file structure.</p><ul><li><code>npm start</code></li></ul><h2 id="04-todomvc-redux"><a href="#04-todomvc-redux" class="headerlink" title="04 todomvc-redux"></a>04 todomvc-redux</h2><p>demo the ubiquitous todomvc app built with redux</p><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><ul><li>redux actions</li></ul><p>Actions are payloads of information that send data to your store. The only source of information for the store. You send them to the store using <code>store.dispatch()</code>.</p><ul><li>redux reducers</li></ul><p>Reducers specifies how the application state changes in response to an action.</p><ul><li>redux middleware</li></ul><p>Middleware provides a hook that allows access to the action before and after it reaches the reducer.</p><ul><li>redux store</li></ul><p>The store is an object that:</p><ul><li>holds app state</li><li>allows access to state via <code>getState()</code></li><li>allows updating state via <code>dispatch(action)</code></li><li>allows registering/unregistering listeners <code>(un)subscribe(listener)</code></li></ul><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h3><p>zero config testing platform</p><p>features:</p><ul><li>snapshots</li><li>awesome cli interface</li><li>powerful mocking library</li><li>code coverage</li><li>parallelizes and sandboxes tests</li></ul><ul><li>test actions</li><li>test reducers</li><li>test middleware</li><li>test store</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-hello-world&quot;&gt;&lt;a href=&quot;#01-hello-world&quot; class=&quot;headerlink&quot; title=&quot;01 hello world&quot;&gt;&lt;/a&gt;01 hello world&lt;/h2&gt;&lt;p&gt;demo creating a simple
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
      <category term="redux" scheme="http://dearfrankg.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>npm refresher</title>
    <link href="http://dearfrankg.github.io/2017/05/12/20170511-npm-refresher/"/>
    <id>http://dearfrankg.github.io/2017/05/12/20170511-npm-refresher/</id>
    <published>2017-05-12T19:30:18.000Z</published>
    <updated>2018-11-11T13:44:52.245Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#creating-npm-packages">creating npm packages</a><ul><li><a href="#create-project-using-nwbhttpsgooglo4vldl-which-supports-es5-and-es6">create project using <a href="https://goo.gl/O4VLdl" target="_blank" rel="noopener">nwb</a> which supports es5 and es6</a></li><li><a href="#add-testing-packages">add testing packages</a></li><li><a href="#configure-packagejson">configure package.json</a></li><li><a href="#add-code">add code</a></li><li><a href="#run-tests-and-coverage">run tests and coverage</a></li><li><a href="#build">build</a></li><li><a href="#add-readmemd">add readme.md</a></li><li><a href="#configure-travis">configure Travis</a></li><li><a href="#create-git-repo">create git repo</a></li><li><a href="#activate-services-for-badges">activate services for badges</a></li><li><a href="#publish-package">publish package</a></li><li><a href="#confirm-package-is-working">confirm package is working</a></li></ul></li></ul><!-- /TOC --><h2 id="creating-npm-packages"><a href="#creating-npm-packages" class="headerlink" title="creating npm packages"></a>creating npm packages</h2><h3 id="create-project-using-nwb-which-supports-es5-and-es6"><a href="#create-project-using-nwb-which-supports-es5-and-es6" class="headerlink" title="create project using nwb which supports es5 and es6"></a>create project using <a href="https://goo.gl/O4VLdl" target="_blank" rel="noopener">nwb</a> which supports es5 and es6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nwb new web-module sum</span><br><span class="line">cd sum</span><br></pre></td></tr></table></figure><h3 id="add-testing-packages"><a href="#add-testing-packages" class="headerlink" title="add testing packages"></a>add testing packages</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add jest babel-jest</span><br></pre></td></tr></table></figure><h3 id="configure-package-json"><a href="#configure-package-json" class="headerlink" title="configure package.json"></a>configure package.json</h3><ul><li>add appropriate package name.  f.e. @cogent-labs/sum</li><li>add description</li><li>add test scripts</li><li>add babel config</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;@cogent-labs/sum&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a simple sum function&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;lib/index.js&quot;,</span><br><span class="line">  &quot;module&quot;: &quot;es/index.js&quot;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;es&quot;,</span><br><span class="line">    &quot;lib&quot;,</span><br><span class="line">    &quot;umd&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;nwb build-web-module&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;nwb clean-module&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;jest&quot;,</span><br><span class="line">    &quot;coverage&quot;: &quot;jest --coverage&quot;,</span><br><span class="line">    &quot;test:watch&quot;: &quot;jest --watchAll&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-jest&quot;: &quot;^20.0.1&quot;,</span><br><span class="line">    &quot;jest&quot;: &quot;^20.0.1&quot;,</span><br><span class="line">    &quot;nwb&quot;: &quot;0.15.x&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;repository&quot;: &quot;&quot;,</span><br><span class="line">  &quot;babel&quot;: &#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;es2015&quot;,</span><br><span class="line">      &quot;react&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add-code"><a href="#add-code" class="headerlink" title="add code"></a>add code</h3><figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>src/tests/index.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'../src'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'#sum'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should sum 1 and 2 and get 3'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> actual = sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> expected = <span class="number">3</span></span><br><span class="line">    expect(actual).toBe(expected)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="run-tests-and-coverage"><a href="#run-tests-and-coverage" class="headerlink" title="run tests and coverage"></a>run tests and coverage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br><span class="line">npm run coverage</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="add-readme-md"><a href="#add-readme-md" class="headerlink" title="add readme.md"></a>add readme.md</h3><pre><code># sum[![Travis][build-badge]][build][![npm package][npm-badge]][npm][![Coveralls][coveralls-badge]][coveralls]a simple sum function## getting startedinstall<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @cogent-labs/sum</span><br></pre></td></tr></table></figure>usage<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sum from &apos;@coget-labs/sum&apos;</span><br><span class="line"></span><br><span class="line">const result = sum(1,2)</span><br><span class="line"></span><br><span class="line">console.log(&apos;result:&apos;, result)</span><br></pre></td></tr></table></figure>test<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm test            // test once</span><br><span class="line">npm test:watch      // test in watch mode</span><br><span class="line">npm coverage        // test and provide coverage report</span><br></pre></td></tr></table></figure>[build-badge]: https://img.shields.io/travis/dearfrankg/sum/master.png?style=flat-square[build]: https://travis-ci.org/dearfrankg/sum[npm-badge]: https://img.shields.io/npm/v/@cogent-labs/sum.png?style=flat-square[npm]: https://www.npmjs.org/package/@cogent-labs/sum[coveralls-badge]: https://img.shields.io/coveralls/dearfrankg/sum/master.png?style=flat-square[coveralls]: https://coveralls.io/github/dearfrankg/sum</code></pre><h3 id="configure-Travis"><a href="#configure-Travis" class="headerlink" title="configure Travis"></a>configure Travis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 4</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line">script: &quot;npm run-script coverage&quot;</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">  - npm install codecov.io coveralls</span><br><span class="line">  - cat ./coverage/lcov.info | ./node_modules/codecov.io/bin/codecov.io.js</span><br><span class="line">  - cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure><h3 id="create-git-repo"><a href="#create-git-repo" class="headerlink" title="create git repo"></a>create git repo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git ci -m &apos;add sum</span><br><span class="line">git create sum</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="activate-services-for-badges"><a href="#activate-services-for-badges" class="headerlink" title="activate services for badges"></a>activate services for badges</h3><p>when push happens service is run</p><ul><li>goto travis site</li><li>goto coveralls site</li></ul><h3 id="publish-package"><a href="#publish-package" class="headerlink" title="publish package"></a>publish package</h3><p>With proud badges you’re ready to publish</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// SETUP ORG IF NECESSARY</span><br><span class="line"></span><br><span class="line">https://www.npmjs.com/org/create</span><br><span class="line"></span><br><span class="line">// LOGIN IF NECESSARY</span><br><span class="line"></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line">// PUBLISH A PUBLIC REPO</span><br><span class="line"></span><br><span class="line">npm publish --acccess public</span><br><span class="line"></span><br><span class="line">// access public is necessary</span><br><span class="line">// private repos cost $7 per mo</span><br></pre></td></tr></table></figure><h3 id="confirm-package-is-working"><a href="#confirm-package-is-working" class="headerlink" title="confirm package is working"></a>confirm package is working</h3><ol><li>confirm listing on your profile <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a></li><li>confirm pull</li><li>confirm tests</li><li>confirm usage</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#creating-npm-packages&quot;&gt;creating npm packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#create-project-using-nwbhttpsgooglo4vldl-
      
    
    </summary>
    
    
      <category term="npm" scheme="http://dearfrankg.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>react lifecycle</title>
    <link href="http://dearfrankg.github.io/2017/04/13/20170412-react-lifecycle/"/>
    <id>http://dearfrankg.github.io/2017/04/13/20170412-react-lifecycle/</id>
    <published>2017-04-13T19:30:18.000Z</published>
    <updated>2018-11-11T13:44:43.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>React enables to create components by invoking the React.createClass() method which expects a render method and triggers a lifecycle that can be hooked into via a number of so called lifecycle methods.</p><p>To get a clear idea of the lifecycle we will need to differentiate between</p><ul><li>creation phase</li><li>update phase</li><li>destroy phase</li></ul><h2 id="Creation-Phase"><a href="#Creation-Phase" class="headerlink" title="Creation Phase"></a>Creation Phase</h2><table><thead><tr><th>Creation Component</th><th></th></tr></thead><tbody><tr><td><code>getInitialState</code></td><td>set initial state</td></tr><tr><td><code>getDefaultProps</code></td><td>define props</td></tr><tr><td><code>componentWillMount</code></td><td><strong>YES set state</strong> – will not re-render.  (respond to wondow-resize, focus-changes)</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidMount</code></td><td><strong>YES set state</strong> – DOM manipulation, Data fetching, inititalize UI libs, setup listeners</td></tr></tbody></table><div style="height: 50px"></div><h2 id="Update-Phase"><a href="#Update-Phase" class="headerlink" title="Update Phase"></a>Update Phase</h2><table><thead><tr><th>Update State</th><th></th></tr></thead><tbody><tr><td><code>shouldComponentUpdate</code></td><td>decide to render or not returning a boolean</td></tr><tr><td><code>componentWillUpdate</code></td><td><strong>NO state changes here</strong> prepare for update – dispatch events, start animation</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidUpdate</code></td><td>DOM manipulation and Data fetching, update chart with new data <strong>careful not to infinite loop</strong></td></tr></tbody></table><div style="height: 50px"></div><table><thead><tr><th>Update Props</th><th></th></tr></thead><tbody><tr><td><code>componentWillReceiveProps</code></td><td><strong>YES set state</strong> – only called when props change <strong>you must check if props changed</strong></td></tr><tr><td><code>shouldComponentUpdate</code></td><td>decide to render or not returning a boolean</td></tr><tr><td><code>componentWillUpdate</code></td><td><strong>NO state changes here</strong> prepare for update – dispatch events, start animation</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidUpdate</code></td><td>DOM manipulation and Data fetching, update chart with new data <strong>careful not to infinite loop</strong></td></tr></tbody></table><div style="height: 50px"></div><h2 id="Destroy-Phase"><a href="#Destroy-Phase" class="headerlink" title="Destroy Phase"></a>Destroy Phase</h2><table><thead><tr><th>Destroy Phase</th><th></th></tr></thead><tbody><tr><td><code>componentWillUnmount</code></td><td>clean up operations: f.e. removing any timers, 3rd party lib references</td></tr></tbody></table><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/uy15pn" target="_blank" rel="noopener">Understanding the React Component Lifecycle</a></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><iframe src="http://embed.plnkr.co/8KLnfn8S29y1cFw59FYY/?show=preview" frameborder="0" width="100%" height="1500"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;React enables to create compon
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>learning lerna</title>
    <link href="http://dearfrankg.github.io/2017/04/12/20170412-learning-lerna/"/>
    <id>http://dearfrankg.github.io/2017/04/12/20170412-learning-lerna/</id>
    <published>2017-04-12T19:30:18.000Z</published>
    <updated>2018-11-10T22:04:39.381Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goo.gl/OQnM1G" target="_blank" rel="noopener">Lerna</a>: A tool for managing JavaScript projects with multiple packages.</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Developing many packages in separate repos are messy with disadvantages.  To solve this many projects <code>babel</code>, <code>react</code>, <code>angular</code>, and many more, develop all packages in a single repo called a <code>monorepo</code>.</p><p><strong>Lerna is a tool that optimizes the workflow around managing monorepos.</strong></p><p>It looks like this:</p><pre><code>my-lerna-repo/  lerna.json  package.json  packages/    package-1/      package.json    package-2/      package.json</code></pre><h2 id="Why-use-Lerna"><a href="#Why-use-Lerna" class="headerlink" title="Why use Lerna"></a>Why use Lerna</h2><ol><li>It optimizes workflow for managing <code>packages</code></li><li>it’s much more organized than having separate repos for each package</li><li>manage separate utility projects tracking version independently (lodash v4.x, ramda v3.x)</li><li>manage a group of related components using only a single version (bootstrap-components v3.x)</li></ol><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Create-a-lerna-repo"><a href="#Create-a-lerna-repo" class="headerlink" title="Create a lerna repo"></a>Create a lerna repo</h3><blockquote><p>We are using lerna v2.x</p></blockquote><pre><code>// INSTALLnpm install -g lerna// CREATE LERNA REPOgit init lerna-repo       // create a new git repocd lerna-repolerna init                // LERNA COMMAND: lerna init: makes 2 files                          // lerna.json package.json// CONFIGURE LERNA{                         // configure lerna by editing lerna.json  &quot;lerna&quot;: &quot;2.0.0-rc.1&quot;,  &quot;packages&quot;: [    &quot;packages/*&quot;  ],  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;npmClient&quot;: &quot;yarn&quot;,  &quot;commands&quot;: {    &quot;bootstrap&quot;: {      &quot;hoist&quot;: &quot;**&quot;    }  }}// CREATE PACKAGESmkdir -p packages/project1mkdir -p packages/project2lerna exec npm init -- -y     // make package.json for each project// RUN COMMANDS ON SCOPElerna exec cat package.json --scope project1      // review them individually// SETUP DEPENDENCIESyarn add react react-dom// copy package.json dependency from root to project// LOCAL DEPENDENCY// one local project may depend on another// just add the dependency-project-name to package.json// then runlerna bootstrap</code></pre><h2 id="Commands-and-Options"><a href="#Commands-and-Options" class="headerlink" title="Commands and Options"></a>Commands and Options</h2><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><pre><code>- bootstrap  Link together local packages and npm install remaining package dependencies- publish    Publish updated packages to npm- updated    Check which packages have changed since the last release- import     Import a package with git history from an external repository- clean      Remove the node_modules directory from all packages- diff       Diff all packages or a single package since the last release- init       Initialize a lerna repo- run        Run npm script in each package- exec       Run a command in each package- ls         List all public packages</code></pre><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>configure lerna</p><pre><code>--npm-tag [tagname]     Publish packages with the specified npm dist-tag--npm-client [client]   Executable used to install dependencies (npm, yarn, pnpm, ...)--concurrency           How many threads to use if lerna parallelises the tasks                        (defaults to 4)--loglevel              What level of logs to report (defaults to &quot;info&quot;).                        On failure, all logs are written to lerna-debug.log in the                        current working directory.--git-remote [remote]   Push git changes to the specified remote instead of &apos;origin&apos;--canary, -c            Publish packages after every successful merge using the                        sha as part of the tag--conventional-commits  Use angular conventional-commit format to determine version                        bump and generate CHANGELOG--yes                   Skip all confirmation prompts</code></pre><p>init</p><pre><code>--independent, -i       Version packages independently--exact                 Specify cross-dependency version numbers exactly rather than                        with a caret (^) (only affects publish and init)</code></pre><p>bootstrap</p><pre><code>--hoist [glob]          Install external dependencies matching [glob] to the repo root.                        Use with no glob for all.--nohoist [glob]        Don&apos;t hoist external dependencies matching [glob] to the repo root--include-filtered-dependencies                        Flag to force lerna to include all dependencies and transitive                        dependencies when running &apos;bootstrap&apos;, even if they should not                        be included by the scope or ignore flags</code></pre><p>publish</p><pre><code>--skip-git              Skip commiting, tagging, and pushing git changes--skip-npm              Stop before actually publishing change to npm--exact                 Specify cross-dependency version numbers exactly rather than                        with a caret (^) (only affects publish and init)--message, -m [msg]     Use a custom commit message when creating the publish commit--repo-version          Specify repo version to publish--force-publish         Force publish for the specified packages (comma-separated)                        or all packages using *                        (skips the git diff check for changed packages)</code></pre><p>only affects ‘run’, ‘exec’, ‘clean’, ‘ls’ and ‘bootstrap’ commands</p><pre><code>--scope [glob]          Restricts the scope to package names matching the given glob--ignore [glob]         Ignores packages with names matching the given glob</code></pre><p>only affects ‘run’ command</p><pre><code>--stream                Stream output with lines prefixed by package (only &apos;run&apos;)</code></pre><p>only affects run, exec, publish and bootstrap</p><pre><code>--no-sort               When executing tasks, ignore the dependency ordering of packages</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://goo.gl/OQnM1G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lerna&lt;/a&gt;: A tool for managing JavaScript projects with multiple packages.
      
    
    </summary>
    
    
      <category term="lerna" scheme="http://dearfrankg.github.io/tags/lerna/"/>
    
  </entry>
  
  <entry>
    <title>redux refresher</title>
    <link href="http://dearfrankg.github.io/2017/04/05/20170405-redux-refresher/"/>
    <id>http://dearfrankg.github.io/2017/04/05/20170405-redux-refresher/</id>
    <published>2017-04-05T12:30:18.000Z</published>
    <updated>2018-11-10T22:04:39.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Review"><a href="#Redux-Review" class="headerlink" title="Redux Review"></a>Redux Review</h1><h2 id="ramda-assocPath"><a href="#ramda-assocPath" class="headerlink" title="ramda/assocPath"></a>ramda/assocPath</h2><ul><li>provides a cleaner/shorter way to update nested state</li></ul><p>Here we make a state change 3 levels deep with one line.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assocPath &#125; <span class="keyword">from</span> <span class="string">'ramda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1 = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;, <span class="attr">bb</span>: &#123; <span class="attr">cc</span>: <span class="number">22</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> o2 = assocPath([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])(<span class="number">42</span>)(o1);</span><br><span class="line"><span class="built_in">console</span>.log(o1 !== o2, o1.a !== o2.a); <span class="comment">// new copies of "changed" objects</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.a.bb === o2.a.bb); <span class="comment">// deep unchanged properties are copied by reference</span></span><br></pre></td></tr></table></figure><h2 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h2><p>redux-thunk solves the following problems</p><ul><li>async actions</li><li>dispatch multiple actions within an action creator</li><li>get access to redux state in an action creator</li></ul><p>Here we handle an async action creator, access state, and call multiple actions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using redux-thunk middleware</span></span><br><span class="line">fetchDataRequest = createAction(<span class="string">'fetch-data-request'</span>)</span><br><span class="line">fetchDataSuccess = createAction(<span class="string">'fetch-data-success'</span>)</span><br><span class="line">fetchDataFailure = createAction(<span class="string">'fetch-data-failure'</span>)</span><br><span class="line">fetchData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = getState()</span><br><span class="line">    <span class="keyword">if</span> (state.isLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(fetchDataRequest())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'http://example.com/todos'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(fetchTodosSuccess(json.body)))</span><br><span class="line">      .catch(<span class="function"><span class="params">ex</span> =&gt;</span> dispatch(fetchTodosFailure(ex)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reselect"><a href="#Reselect" class="headerlink" title="Reselect"></a>Reselect</h2><ul><li>Selectors can compute derived data</li><li>Selectors are memoized</li><li>Selectors are composable</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</span><br><span class="line"><span class="keyword">const</span> taxPercentSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.taxPercent</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</span><br><span class="line">  shopItemsSelector,</span><br><span class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taxSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxPercentSelector,</span><br><span class="line">  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> totalSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxSelector,</span><br><span class="line">  (subtotal, tax) =&gt; (&#123; <span class="attr">total</span>: subtotal + tax &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exampleState = &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    taxPercent: <span class="number">8</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">value</span>: <span class="number">1.20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(subtotalSelector(exampleState)) <span class="comment">// 2.15</span></span><br><span class="line"><span class="built_in">console</span>.log(taxSelector(exampleState))      <span class="comment">// 0.172</span></span><br><span class="line"><span class="built_in">console</span>.log(totalSelector(exampleState))    <span class="comment">// &#123; total: 2.322 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="How-to-write-redux-tests"><a href="#How-to-write-redux-tests" class="headerlink" title="How to write redux tests"></a>How to write redux tests</h2><p>Look <a href="https://goo.gl/qAFHy3" target="_blank" rel="noopener">here</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goo.gl/G6WE3z" target="_blank" rel="noopener">redux-thunk to dispatch multiple actions from Redux action creators</a></li><li><a href="https://goo.gl/PcpyAb" target="_blank" rel="noopener">redux-thunk to access Redux state in an action creator</a></li><li><a href="https://goo.gl/JSbN2q" target="_blank" rel="noopener">ramda/assocPath for a Cleaner/shorter way to update nested state in Redux</a></li><li><a href="https://goo.gl/cdNhzV" target="_blank" rel="noopener">reselect for computing derived data in an efficent composable way</a></li><li><a href="https://goo.gl/qAFHy3" target="_blank" rel="noopener">How to write redux tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redux-Review&quot;&gt;&lt;a href=&quot;#Redux-Review&quot; class=&quot;headerlink&quot; title=&quot;Redux Review&quot;&gt;&lt;/a&gt;Redux Review&lt;/h1&gt;&lt;h2 id=&quot;ramda-assocPath&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="redux" scheme="http://dearfrankg.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>lionshare</title>
    <link href="http://dearfrankg.github.io/2017/03/28/20170331-lionshare/"/>
    <id>http://dearfrankg.github.io/2017/03/28/20170331-lionshare/</id>
    <published>2017-03-29T03:30:18.000Z</published>
    <updated>2018-11-11T14:00:05.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lionshare-api"><a href="#lionshare-api" class="headerlink" title="lionshare-api"></a>lionshare-api</h1><h2 id="API-Summary"><a href="#API-Summary" class="headerlink" title="API Summary"></a>API Summary</h2><p>API that powers <a href="https://lionshare.capital" target="_blank" rel="noopener">Lionshare</a> by providing both historical (REST) and realtime time (websocket) cryptocurrency market data. The data is sourced from <a href="https://gdax.com" target="_blank" rel="noopener">GDAX</a>, <a href="https://poloniex.com/" target="_blank" rel="noopener">Poloniex</a>, and <a href="https://coinmarketcap.com/" target="_blank" rel="noopener">Coinmarketcap</a>.</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>Let’s get a feel for what we’re working with:</p><p>Summary of packages:</p><ul><li>babel - transforming</li><li>koa – server and middleware</li><li>websockets – web socket collection</li><li>autobahn – web application messaging protocol</li><li>redis – redis client</li><li>utilities – bluebird-promises, cross-env, dotenv, http-error, iso-fetch</li><li>utilities – ms, now-logs, pm2, safestart, semver</li></ul><p>Directory Structure</p><pre><code>src├── api           // api server├── db            // redis├── exchange      // exchange server├── utils├── ws            // web socket server├── check.js├── index.js└── init.js</code></pre><h2 id="API-Data"><a href="#API-Data" class="headerlink" title="API Data"></a>API Data</h2><h3 id="Prices"><a href="#Prices" class="headerlink" title="Prices"></a>Prices</h3><figure class="highlight json"><figcaption><span>'GET api.lionshare.capital/api/prices?period</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"BTC"</span>: [<span class="number">924.2</span>, <span class="number">924.63</span>, <span class="number">923.82</span>, <span class="number">923.02</span>, <span class="number">924.82</span>, ...],</span><br><span class="line">    <span class="attr">"ETH"</span>: [<span class="number">10.74</span>, <span class="number">10.8</span>, <span class="number">10.79</span>, <span class="number">10.82</span>, <span class="number">10.82</span>, <span class="number">10.84</span>, <span class="number">10.78</span>, ...],</span><br><span class="line">    <span class="attr">"LTC"</span>: [<span class="number">3.88</span>, <span class="number">3.86</span>, <span class="number">3.85</span>, <span class="number">3.85</span>, <span class="number">3.86</span>, <span class="number">3.86</span>, <span class="number">3.84</span>, ...]</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Markets"><a href="#Markets" class="headerlink" title="Markets"></a>Markets</h3><figure class="highlight"><figcaption><span>'GET api.lionshare.capital/api/markets'</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"BTC"</span>: <span class="number">14718750986</span>,</span><br><span class="line">    <span class="attr">"ETH"</span>: <span class="number">943628626</span>,</span><br><span class="line">    <span class="attr">"LTC"</span>: <span class="number">188560718</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><figure class="highlight"><figcaption><span>'GET api/updates?v</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: "https://github.com/lionsharecapital/lionshare-desktop/releases/download/v1.1.0/Lionshare-1.1.0-mac.zip",</span><br><span class="line">  name: "Lionshare 1.1.0",</span><br><span class="line">  notes: "- 💵 New currencies: IOC, SC, SJCX and DCR - ⌨ Keyboard shortcuts for prices and portfolio (Cmd+1/2) - ＄ Fixed formatting for non-US dollar currencies - 🐳 Fixed number formatting for whale users - 🛠 Various bug fixes and improvements ",</span><br><span class="line">  pub_date: "2017-02-06T01:51:06Z"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lionshare-api&quot;&gt;&lt;a href=&quot;#lionshare-api&quot; class=&quot;headerlink&quot; title=&quot;lionshare-api&quot;&gt;&lt;/a&gt;lionshare-api&lt;/h1&gt;&lt;h2 id=&quot;API-Summary&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="framework" scheme="http://dearfrankg.github.io/tags/framework/"/>
    
      <category term="example" scheme="http://dearfrankg.github.io/tags/example/"/>
    
      <category term="electron" scheme="http://dearfrankg.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>facebook on react performance</title>
    <link href="http://dearfrankg.github.io/2017/03/28/20170328-facebook-react-perf/"/>
    <id>http://dearfrankg.github.io/2017/03/28/20170328-facebook-react-perf/</id>
    <published>2017-03-29T03:30:18.000Z</published>
    <updated>2018-11-11T13:57:52.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Facebook-React-Perfomance"><a href="#Facebook-React-Perfomance" class="headerlink" title="Facebook React Perfomance"></a>Facebook React Perfomance</h1><p>Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.</p><p><strong>Use a production build</strong></p><p>This will perform much better</p><p><strong>Profiling Components with Chrome Timeline</strong></p><p>You can see how it performs</p><p><strong>Avoid Reconciliation</strong></p><p>React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.</p><p><strong><code>shouldComponentUpdate</code> can be used to avoid updating te DOM</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.color !== nextProps.color) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.count !== nextState.count) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        color=&#123;<span class="keyword">this</span>.props.color&#125;</span><br><span class="line">        onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))&#125;&gt;</span><br><span class="line">        Count: &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>React.PureComponent</code> does a shallow-compare</strong></p><p>This does the same thing as the previous code.</p><p>Most of the time, you can use React.PureComponent instead of writing your own shouldComponentUpdate.  <strong>It only does a shallow comparison</strong></p><blockquote><p>you can’t use it if the props or state may have been mutated in a way that a shallow comparison would miss.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GOOD: will only render when count or color changes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        color=&#123;<span class="keyword">this</span>.props.color&#125;</span><br><span class="line">        onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))&#125;&gt;</span><br><span class="line">        Count: &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>This can be a problem with more complex data structures. For example, this code does not work correctly:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BROKEN: changing list of words does not render</span></span><br><span class="line"><span class="comment">// because the words array was mutated which </span></span><br><span class="line"><span class="comment">// React.PureComponent sees as equal.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOfWords</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.props.words.join(',')&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordAdder</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      words: [<span class="string">'marklar'</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="comment">// This section is bad style and causes a bug</span></span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">this</span>.state.words;</span><br><span class="line">    words.push(<span class="string">'marklar'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">words</span>: words&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</span><br><span class="line">        &lt;ListOfWords words=&#123;<span class="keyword">this</span>.state.words&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>PureComponent will do a shallow comparison. Since this code mutates the words array, the old and new values of this.props.words will compare as equal, even though the actual words in the array have changed. The ListOfWords will thus not update even though it has new words that should be rendered.</p><p><strong>The Power Of Not Mutating Data</strong></p><p>Ways to avoid mutation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateColorMap</span>(<span class="params">colormap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, colormap, &#123;<span class="attr">right</span>: <span class="string">'blue'</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateColorMap</span>(<span class="params">colormap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;...colormap, <span class="attr">right</span>: <span class="string">'blue'</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="When-should-I-use-shouldComponentUpdate"><a href="#When-should-I-use-shouldComponentUpdate" class="headerlink" title="When should I use shouldComponentUpdate?"></a>When should I use <code>shouldComponentUpdate</code>?</h2><p>Will shouldComponentUpdate provide a measurable and perceivable performance improvement?</p><p>If not, don’t use it.</p><ul><li>Adding shouldComponentUpdate will often slow your component down</li><li>React is basically a very clever implementation of shouldComponentUpdate.</li><li>shouldComponentUpdate gains are often insignificant</li><li>Maintaining shouldComponentUpdate is hard</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/wnrjbi" target="_blank" rel="noopener">Optimizing React Performance</a></li><li><a href="https://goo.gl/NBWYm3" target="_blank" rel="noopener">Should I use shouldComponentUpdate?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Facebook-React-Perfomance&quot;&gt;&lt;a href=&quot;#Facebook-React-Perfomance&quot; class=&quot;headerlink&quot; title=&quot;Facebook React Perfomance&quot;&gt;&lt;/a&gt;Facebook Re
      
    
    </summary>
    
    
      <category term="reactjs" scheme="http://dearfrankg.github.io/tags/reactjs/"/>
    
      <category term="performance" scheme="http://dearfrankg.github.io/tags/performance/"/>
    
  </entry>
  
</feed>
