<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>app development review</title>
      <link href="/2018/11/11/20181111-app-development-review/"/>
      <url>/2018/11/11/20181111-app-development-review/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>We will create an app from scratch that will have the following characteristics:</p><ul><li>works with my domain</li><li>works with app hosted on laptop for development</li><li>works with app hosted by vendor for production</li><li>works with OAuth authentication</li><li>works with Google <code>YouTube Data API 3</code> Services</li></ul><h2 id="Setup-Test-Web-Server"><a href="#Setup-Test-Web-Server" class="headerlink" title="Setup Test Web Server"></a>Setup Test Web Server</h2><ul><li>start nginx on port 80<ul><li><code>sudo brew services start nginx</code></li></ul></li><li>test web server<ul><li><code>curl 127.0.0.1</code> –&gt; hello</li></ul></li></ul><h2 id="Setup-Your-Domain"><a href="#Setup-Your-Domain" class="headerlink" title="Setup Your Domain"></a>Setup Your Domain</h2><ul><li>Purchase Domain Name<ul><li><a href="https://domains.google.com/registrar" target="_blank" rel="noopener">https://domains.google.com/registrar</a></li><li>purchased a domain name for \$12</li></ul></li><li>Configue DNS<ul><li>Edit Name Servers<ul><li>Choose: <code>Use the Google Domains name servers</code></li></ul></li><li>Add custom resource records<ul><li><code>name: @, type: A, TTL: 1H, IP: xxx.xxx.xxx.xxx</code></li><li><code>name: *, type: A, TTL: 1H, IP: xxx.xxx.xxx.xxx</code></li></ul></li></ul></li><li>test dns – <code>ping dearfrankg.com</code> –&gt; …</li></ul><blockquote><p>Local IP Address<br>Do not use services like <code>myip</code> or <code>myip.com</code> to find your IP address. They’re not always up to date. Instead you can use your WAN IP address from you router.</p></blockquote><blockquote><p>DNS Propagation<br>Make sure you use the same DNS server IPs when configuring your domain and your local network. This insures propagation will not be an issue. Google DNS IPs are <code>8.8.8.8</code> and <code>8.8.4.4</code>.</p></blockquote><h2 id="Setup-Port-Forwarding"><a href="#Setup-Port-Forwarding" class="headerlink" title="Setup Port Forwarding"></a>Setup Port Forwarding</h2><p>When someone is trying to access you web server at your home, the request will be received by your modem then router. How will the router know which PC to forward the request to? That’s what port forwarding is for.</p><ul><li>configure router for port forwarding<ul><li><code>macbook-pro: incoming 80 to external 80</code></li></ul></li><li>test port fowarding<ul><li>curl <a href="http://dearfrankg.com" target="_blank" rel="noopener">http://dearfrankg.com</a> –&gt; hello</li><li>open <a href="http://dearfrankg.com" target="_blank" rel="noopener">http://dearfrankg.com</a> –&gt; hello</li></ul></li></ul><h2 id="Setup-Reverse-Poxy"><a href="#Setup-Reverse-Poxy" class="headerlink" title="Setup Reverse Poxy"></a>Setup Reverse Poxy</h2><p>Using port forwarding we would need to open many ports for many apps. That’s undesirable because it’s less secure. As an alternative we can setup a reverse proxy server to route different urls to different apps.</p><ul><li>setup nginx as a reverse proxy<ul><li>configure <code>top level domain</code> to <code>nginx server</code><ul><li><code>dearfrankg.com</code> to port 80 <code>nginx web server</code></li></ul></li><li>configure <code>sub domains</code> to <code>web apps</code><ul><li><code>app1.dearfrankg.com</code> to port 5000 <code>app1</code></li><li><code>app2.dearfrankg.com</code> to port 5001 <code>app2</code></li></ul></li></ul></li></ul><p>Reverse Proxy drawbacks:</p><ul><li>Bandwidth transfer will be doubled: <code>client &lt;-&gt; proxy &lt;-&gt; app</code></li><li>The traffic of all subdomains will pass through the proxy, so you might need more than one.</li><li>If the proxy and the webservers are hosted by different providers, latency will increase noticeably.</li><li>If the proxy is down, so are all connected subdomains, except if you have multiple load balanced proxies.</li></ul><h2 id="Setup-App"><a href="#Setup-App" class="headerlink" title="Setup App"></a>Setup App</h2><ul><li>setup app skeleton<ul><li><code>npx create-react-app my-great-app</code></li></ul></li><li>add <code>sass</code> support<ul><li>npm install –save node-sass</li></ul></li><li>add folders to <code>src</code> directory<ul><li>assets, components, services, utils</li></ul></li><li>reconfigure app to work with new structure<ul><li>create a new Header component</li></ul></li></ul><h3 id="Setup-OAuth-Auhentication"><a href="#Setup-OAuth-Auhentication" class="headerlink" title="Setup OAuth Auhentication"></a>Setup OAuth Auhentication</h3><p><strong>Get OAuth Credentials</strong></p><ul><li>create project at the <a href="https://console.developers.google.com/" target="_blank" rel="noopener">console.developers.google.com</a></li><li>create credentials and choose <code>API key</code><ul><li>store <code>YOUR_API_KEY</code> for later use.</li></ul></li><li>create credentials and choose <code>OAuth client ID</code><ul><li>choose application type: <code>web application</code></li><li>choose name: <code>proj-name</code></li><li>choose Authorized Javascript Origins: `<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a></li><li>click create</li><li>store <code>CLIENT_ID</code> for later use.</li></ul></li><li>Enable YouTube Data API v3<ul><li>goto <a href="https://console.developers.google.com/apis/library" target="_blank" rel="noopener">API Library</a> and search for YouTube</li><li>Click on the <code>YouTube Data API v3</code>, then click <code>ENABLE</code></li></ul></li><li>Clear the last hour of cache<ul><li><code>cmd shift delete</code> then <code>choose last hour</code> and click delete.</li></ul></li></ul><h2 id="Setup-Continuous-Workflow"><a href="#Setup-Continuous-Workflow" class="headerlink" title="Setup Continuous Workflow"></a>Setup Continuous Workflow</h2><p><strong>Continuous Integration (CI)</strong>: short-lived feature branches, team is merging to master branch multiple times per day, fully automated build and test process which gives feedback within 10 minutes; deployment is manual.</p><p><strong>Continuous Delivery (CD)</strong>: CI + the entire software release process is automated, it may be composed of multiple stages, and deployment to production is manual.</p><p><strong>Continuous Deployment</strong>: CI + CD + fully automated deployment to production.</p><h2 id="Extraa"><a href="#Extraa" class="headerlink" title="Extraa"></a>Extraa</h2><ul><li>create a project directory</li><li>create this <a href="https://goo.gl/KcaXbh" target="_blank" rel="noopener">index.html</a> file<ul><li>be sure to insert the <code>API_KEY</code> and <code>CLIENT_ID</code></li></ul></li><li>install the <code>serve</code> package if not installed<ul><li><code>npm i -g serve</code></li></ul></li><li>start the server<ul><li><code>serve .</code></li></ul></li><li>login using your Google account<ul><li>open <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a></li><li>click <code>sign in</code> button and approve access<ul><li>button should change to <code>sign out</code></li></ul></li><li>click <code>sign out</code> to logout<ul><li>button should change to <code>sign in</code></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>learning nextjs</title>
      <link href="/2018/11/10/20181110-learning-nextjs/"/>
      <url>/2018/11/10/20181110-learning-nextjs/</url>
      
        <content type="html"><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="the-hard-way"><a href="#the-hard-way" class="headerlink" title="the hard way"></a>the hard way</h3><ul><li>manually install the necessary packages</li><li>update scripts in package.json</li><li>add pages directory</li><li>start dev server</li></ul><h3 id="the-easy-way"><a href="#the-easy-way" class="headerlink" title="the easy way"></a>the easy way</h3><ul><li>review choices at <a href="https://goo.gl/8iZS8D" target="_blank" rel="noopener">Next.js examples</a></li><li>follow the install instuctions in the readme file.</li><li>start dev server</li></ul><p>typical install process:</p><pre><code>npx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app</code></pre><h2 id="Style-and-Design-Support"><a href="#Style-and-Design-Support" class="headerlink" title="Style and Design Support"></a>Style and Design Support</h2><h3 id="evergreen-ui-–-react-design-components"><a href="#evergreen-ui-–-react-design-components" class="headerlink" title="evergreen-ui – react design components"></a>evergreen-ui – react design components</h3><ul><li><a href="https://evergreen.segment.com/" target="_blank" rel="noopener">evergreen-ui</a></li></ul><p>install</p><pre><code>npm i --save evergeen-ui</code></pre><p>setup</p><ul><li><a href="https://goo.gl/Kzgwbc" target="_blank" rel="noopener">pages/_document.js</a></li></ul><p>This allows control over the HTML page. In this case we will include the CSS and JS required to make <code>evergreen-ui</code> work with SSR.</p><p>styles</p><ul><li>Adds a style tag for including the CSS necessary to render evergreen-ui.</li><li>Adds a script tag which will include the CSS cache necessary for hydration.</li></ul><p>hydration</p><p>The act of providing state to the client is called <code>hydation</code>. In this case we will be supplying the CSS cache. The <code>CSS cache</code> is a JS object generated from scanning the <code>css-in-js</code> to extract style. The keys are generated hashes like <code>&#39;jdvhd&#39;</code>, and the values are the associated CSS string. Both the client and the server generate hashes but on the client it will leverage the cache if available.</p><h3 id="styled-components-–-a-popular-css-in-js-solution"><a href="#styled-components-–-a-popular-css-in-js-solution" class="headerlink" title="styled components – a popular css-in-js solution"></a>styled components – a popular css-in-js solution</h3><ul><li><a href="https://www.styled-components.com/" target="_blank" rel="noopener">styled components</a></li></ul><p>install</p><pre><code>npm i --save styled-components</code></pre><p>setup</p><ul><li><a href="https://goo.gl/Vnh89f" target="_blank" rel="noopener">pages/_document.js</a></li><li><a href="https://goo.gl/Zrrdyp" target="_blank" rel="noopener">.babelrc</a></li></ul><blockquote><p><a href="https://goo.gl/aGL5Aa" target="_blank" rel="noopener">nesting rules</a></p></blockquote><h3 id="style-jsx-sass-–-a-popular-css-in-js-solution"><a href="#style-jsx-sass-–-a-popular-css-in-js-solution" class="headerlink" title="style-jsx-sass – a popular css-in-js solution"></a>style-jsx-sass – a popular css-in-js solution</h3><ul><li><a href="https://goo.gl/kKqcy8" target="_blank" rel="noopener">style-jsx-sass</a></li></ul><p>install</p><pre><code>npm i --save style-jsx-sass node-sass</code></pre><p>setup</p><ul><li><a href="https://goo.gl/tN63HX" target="_blank" rel="noopener">.babelrc</a></li></ul><h2 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h2><h3 id="Fonts"><a href="#Fonts" class="headerlink" title="Fonts"></a>Fonts</h3><p>setup</p><ul><li><a href="https://goo.gl/m27w7V" target="_blank" rel="noopener">font-awesome</a> font</li><li><a href="https://goo.gl/4Fo67x" target="_blank" rel="noopener">Open Sans</a> font</li><li><a href="https://goo.gl/YFWoZA" target="_blank" rel="noopener">components/meta.js</a></li></ul><p>Edit the <code>meta</code> component file to include fonts.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>setup</p><ul><li><code>static</code> folder</li></ul><p>Add the <code>static</code> folder to serve static assets.</p><h2 id="Gotchas"><a href="#Gotchas" class="headerlink" title="Gotchas"></a>Gotchas</h2><h3 id="Browser-issue-with-CSS-Grid"><a href="#Browser-issue-with-CSS-Grid" class="headerlink" title="Browser issue with CSS-Grid"></a>Browser issue with CSS-Grid</h3><p>There is a gotcha using fractional units with grid-rows. To use fractional units <code>1fr</code> with grid-rows, you must specify the size of the container div. You cannot use a percentage for the size or it will not work. See example gist <a href="https://goo.gl/5sE6RU" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> framework </tag>
            
            <tag> nextjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react storybook</title>
      <link href="/2018/11/06/20181105-react-storybook/"/>
      <url>/2018/11/06/20181105-react-storybook/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Storybook is the most popular UI component development tool for React. It helps you develop and design UI components outside your app in an isolated environment.</p><p><a href="https://www.learnstorybook.com/" target="_blank" rel="noopener">Learn Storybook</a> aims to teach tried-and-true patterns for component development using Storybook. You’ll walk through essential UI component techniques while building a UI from scratch in React.</p><h2 id="Steps-Covered"><a href="#Steps-Covered" class="headerlink" title="Steps Covered"></a>Steps Covered</h2><ul><li>setup</li><li>simple component</li><li>composite component</li><li>data</li><li>screens</li><li>testing</li><li>addons</li><li>deploy</li><li>conclusions</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.learnstorybook.com/" target="_blank" rel="noopener">Storybook Tutorial</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> storybook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>securing your web app</title>
      <link href="/2018/11/03/20181101-securing-your-web-app/"/>
      <url>/2018/11/03/20181101-securing-your-web-app/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>We’re going to explore ways that rogue agents can attack your web app, then we’ll a implement a plan that will protect against these attacks and keep your app secure.</p><h2 id="Attack-Vectors"><a href="#Attack-Vectors" class="headerlink" title="Attack Vectors"></a>Attack Vectors</h2><h3 id="MIM-Man-In-The-Middle"><a href="#MIM-Man-In-The-Middle" class="headerlink" title="MIM - Man In The Middle"></a>MIM - Man In The Middle</h3><p>MIM is an attack where an attacker sits in a public coffee shop sniffing internet traffic. When they are able to sniff your JWT token they can maliciously access your app.</p><p>Danger: When passing credentials such as passwords or JWT over the intenet insecurely then an attacker can maliciously access your app.</p><p>Solution: Use <code>HTTPS</code> to protect app internet traffic and use <code>VPN</code> to protect all internet tracffic.</p><h3 id="XSS-Cross-Site-Scripting"><a href="#XSS-Cross-Site-Scripting" class="headerlink" title="XSS - Cross Site Scripting"></a>XSS - Cross Site Scripting</h3><p>XSS is an attack technique where an atacker can run javascript in your app because they have control over a 3rd party script used in your app, allowing them to maliciously access your app</p><p>Danger: An attacker with the ability to run javascript in your app could gain access to an insecurely stored JWT and use that to maliciously access your app.</p><p>Solution: It’s not reasonable to control all 3rd party scripts, so the next best thing is to secure sensitive data from javascript. Store your JWT in a secure cookie with no javascript access and only https access. Do not store your JWT in web-storage, local-storage, or unprotected-cookie.</p><h3 id="CSRF-Cross-Site-Request-Forgery"><a href="#CSRF-Cross-Site-Request-Forgery" class="headerlink" title="CSRF - Cross Site Request Forgery"></a>CSRF - Cross Site Request Forgery</h3><p>CSRF is an attack technique where an attacker can call your app from their domain and your incorrectly configured app gives them authorization by passing an authorization cookie to the server.</p><p>Danger: When your cookie is incorrectly configured to be passed from any domain to your server on every request then a rogue agent can gain authorization to your app.</p><p>Solution: configure as follows:</p><ul><li>use cookie option <code>httpOnly</code> to prevents javascript from reading the cookie.</li><li>use cookie option <code>secure</code> which forces https use and prevents sniffing on the wire.</li><li>store JWT in a secure cookie to prevent access via XSS and MIM.</li><li>pass a x-csrf-token in both your cookie and html as a way to confirm app access from same domain.</li></ul><h3 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS - Cross Origin Resource Sharing"></a>CORS - Cross Origin Resource Sharing</h3><p>CORS is a utility that allows your app to access HTTP resources from other domains. By default it can only access them from the same domain with the exceptions of images and styles. Specifically accessing AJAX, fonts, ES-Modules from other domains requires CORS.</p><p>Danger: When CORS is configured incorectly can allow any domain to access your server this enables a rogue agent to attack from their domain. By configuring which domains can and cannot access we make our app much more secure.</p><p>Solution: Configure CORS correctly utilizing white-lists and black-lists to secure your site.</p><h2 id="Protection-Plan"><a href="#Protection-Plan" class="headerlink" title="Protection Plan"></a>Protection Plan</h2><p>TBD</p>]]></content>
      
      
      
        <tags>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>server side rendering in react</title>
      <link href="/2018/10/31/20181031-server-side-rendering-in-React/"/>
      <url>/2018/10/31/20181031-server-side-rendering-in-React/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Let’s have a closer look at the feature that allows you to build universal applications with React. First some definitions:</p><p><strong>Server-Side Rendering (SSR)</strong><br>The ability of a front-end framework to render markup while running on a back-end system.</p><p><strong>Single Page Application (SPA)</strong><br>SPA’s offer great advantages in speed and UX over traditional server-rendered apps. But there is a catch. The initial server request is generally returning an empty HTML file with a bunch of CSS and JavaScript (JS) links. Then the external files need to be fetched in order to render relevant markup. This means that the user will have to wait longer for the initial render. This also means that crawlers may interpret your page as empty.</p><p><strong>Universal Application</strong><br>Universal Applications have the ability to render both on the server and on the client. So the idea is to render your app on the server initially, then to leverage the capabilities of SPAs on the client. Now the user does not have to wait for your JS to load and gets a fully rendered HTML as soon as the initial request returns a response.</p><blockquote><p>SSR + SPA = Universal App</p></blockquote><p>Imagine the huge improvement for users navigating on slow 3G networks. Rather than waiting for over 20s for the website to load, you get content on their screen almost instantly.</p><p><img src="https://goo.gl/Wd7Bm9" alt=""></p><p>And now, all the requests that are made to your server return fully rendered HTML. Great news for your SEO department! Crawlers will now see your website as any other static site on the web and will index all the content you render on the server.</p><p>So to recap, the two main benefits we get from SSR are:</p><ul><li>Faster times for the initial page render</li><li>Fully indexable HTML pages</li></ul><h2 id="Understanding-SSR-—-one-step-at-a-time"><a href="#Understanding-SSR-—-one-step-at-a-time" class="headerlink" title="Understanding SSR — one step at a time"></a>Understanding SSR — one step at a time</h2><p>Let’s take an iterative approach to build our complete SSR example. We start with React’s API for server rendering and we’ll add something to the mix at each step.</p><p>You can follow this <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a> and the tags defined there for each step.</p><ol><li>Configure an express server to serve static files from the output folder</li><li>Create a route that will handle all non-static incoming requests and respond with HTML.</li><li>The client function ReactDOM.hydrate will attach event handlers to the server-rendered React app.</li></ol><blockquote><p>Note Babel works on both client and server code.</p></blockquote><h3 id="Your-Basic-Setup"><a href="#Your-Basic-Setup" class="headerlink" title="Your Basic Setup"></a>Your Basic Setup</h3><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">"express"</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">"react-dom/server"</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.resolve(__dirname, <span class="string">"../dist"</span>)));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  const reactDom = renderToString(jsx);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  res.writeHead(200, &#123; "Content-Type": "text/html" &#125;);</span></span><br><span class="line"><span class="xml">  res.end(htmlTemplate(reactDom));</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">app.listen(8000);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">function htmlTemplate(reactDom) &#123;</span></span><br><span class="line"><span class="xml">  return `</span></span><br><span class="line"><span class="xml">        <span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line">        &lt;html&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;meta charset="utf-8"&gt;</span><br><span class="line">            &lt;title&gt;React SSR&lt;/title&gt;</span><br><span class="line">        &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">        &lt;body&gt;</span><br><span class="line">            &lt;div id="app"&gt;$&#123;reactDom&#125;&lt;/div&gt;</span><br><span class="line">            &lt;script src="./app.bundle.js"&gt;&lt;/script&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br><span class="line">    `;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line">ReactDOM.hydrate(<span class="xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span>, app);</span></span><br></pre></td></tr></table></figure><p>That’s it! You just created your first server-rendered React app!</p><p>To see the full example, check out the <code>basic</code> tag in the <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><p>We have to be honest here, the app doesn’t do much. So let’s add a few routes and see how we handle the server part.</p><figure class="highlight js"><figcaption><span>src/components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, Switch, Route &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./Home"</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">"./About"</span>;</span><br><span class="line"><span class="keyword">import</span> Contact <span class="keyword">from</span> <span class="string">"./Contact"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Link to="/</span><span class="string">"&gt;Home&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/about<span class="string">"&gt;About&lt;/Link&gt;</span></span><br><span class="line"><span class="string">          &lt;Link to="</span>/contact<span class="string">"&gt;Contact&lt;/Link&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;Switch&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/<span class="string">" exact component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/about<span class="string">" exact component=&#123;About&#125; /&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/contact<span class="string">" exact component=&#123;Contact&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>The Layout component now renders multiple routes on the client.</p><p>We need to mimic the Router setup on the server. See the main changes below.</p><figure class="highlight js"><figcaption><span>src/components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; StaticRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> jsx = (</span><br><span class="line">    &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">      &lt;Layout /&gt;</span><br><span class="line">    &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  const reactDom = renderToString(jsx);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  res.writeHead(200, &#123; "Content-Type": "text/</span>html<span class="string">" &#125;);</span></span><br><span class="line"><span class="string">  res.end(htmlTemplate(reactDom));</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* ... */</span></span><br></pre></td></tr></table></figure><p>On the server, we need to wrap our React application in the <code>StaticRouter</code> component and provide the location. As a side note, the <code>context</code> is used for tracking potential redirects while rendering the React DOM. This needs to be handled with a <code>3XX response</code> from the server.</p><p>The full example can be seen on the <code>router</code> tag in the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>In the simple scenario, we need Redux to handle state management on the client. But what if we need to render parts of the DOM based on that state? It makes sense to initialize Redux on the server.</p><p>If your app is dispatching actions on the server, it needs to capture the state and send it over the wire together with the HTML. On the client, we feed that initial state into Redux.</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider <span class="keyword">as</span> ReduxProvider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> store = createStore();</span><br><span class="line"></span><br><span class="line">  store.dispatch(initializeSession());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> jsx = (</span><br><span class="line">    &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">        &lt;Layout /&gt;</span><br><span class="line">      &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ReduxProvider&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> reactDom = renderToString(jsx);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reduxState = store.getState();</span><br><span class="line"></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">  res.end(htmlTemplate(reactDom, reduxState));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlTemplate</span>(<span class="params">reactDom, reduxState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        /* ... */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;div id="app"&gt;<span class="subst">$&#123;reactDom&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;script&gt;</span></span><br><span class="line"><span class="string">            window.REDUX_DATA = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(reduxState)&#125;</span></span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;script src="./app.bundle.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /* ... */</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/client.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider <span class="keyword">as</span> ReduxProvider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"./components/Layout"</span>;</span><br><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(<span class="built_in">window</span>.REDUX_DATA);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsx = (</span><br><span class="line">  &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Layout /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ReduxProvider&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>);</span><br><span class="line">ReactDOM.hydrate(jsx, app);</span><br></pre></td></tr></table></figure><p>Notice that we call <code>createStore</code> twice, first on the server, then on the client. However, on the client, we initialize the state with whatever state was saved on the server. This process is similar to the DOM hydration.</p><p>The full example can be seen on the <code>redux</code> tag in the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h3 id="Fetch-Data"><a href="#Fetch-Data" class="headerlink" title="Fetch Data"></a>Fetch Data</h3><p>The final piece of the puzzle is loading data. This is where it gets a bit trickier. Let’s say we have an API serving JSON data.</p><p>In our codebase, I fetch all the events from the 2018 Formula 1 season from a public API. Let’s say we want to display all the events on the Home page.</p><p>We can call our API only from the client after the React app is mounted and everything is rendered. But this will have a bad impact on UX, potentially showing a spinner or a loader before the user sees relevant content.</p><p>We already have Redux, as a way of storing data on the server and sending it over to the client.</p><p>What if we make our API calls on the server, store the results in Redux, and then render the full HTML with the relevant data for the client?</p><p>But how can we know which calls need to be made?</p><p>First, we need a different way of declaring routes. So we switch to the so-called routes config file. And we statically declare the data requirements on each component.</p><figure class="highlight js"><figcaption><span>src/routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/about"</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/contact"</span>,</span><br><span class="line">    component: Contact,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/secret"</span>,</span><br><span class="line">    component: Secret,</span><br><span class="line">    exact: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>home.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">"../store"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    render( ) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; circuits &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Home.serverFetch = fetchData; <span class="comment">// static declaration of data requirements</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p>Keep in mind that <code>serverFetch</code> is made up, you can use whatever sounds better for you.</p><p>As a note here, <code>fetchData</code> is a Redux thunk action, returning a Promise when dispatched.</p><p>On the server, we can use a special function from <code>react-router</code>, called matchRoute .</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> &#123; StaticRouter, matchPath &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">"./routes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/*"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataRequirements = routes</span><br><span class="line">    .filter(<span class="function"><span class="params">route</span> =&gt;</span> matchPath(req.url, route)) <span class="comment">// filter matching paths</span></span><br><span class="line">    .map(<span class="function"><span class="params">route</span> =&gt;</span> route.component) <span class="comment">// map to components</span></span><br><span class="line">    .filter(<span class="function"><span class="params">comp</span> =&gt;</span> comp.serverFetch) <span class="comment">// check if components have data requirement</span></span><br><span class="line">    .map(<span class="function"><span class="params">comp</span> =&gt;</span> store.dispatch(comp.serverFetch())); <span class="comment">// dispatch data requirement</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.all(dataRequirements).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> jsx = (</span><br><span class="line">      &lt;ReduxProvider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;StaticRouter context=&#123;context&#125; location=&#123;req.url&#125;&gt;</span><br><span class="line">          &lt;Layout /&gt;</span><br><span class="line">        &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ReduxProvider&gt;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> reactDom = renderToString(jsx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reduxState = store.getState();</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(htmlTemplate(reactDom, reduxState));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p>With this, we get a list of components that will be mounted when React is rendered to string on the current URL.</p><p>We gather the data requirements and we wait for all the API calls to return. Finally, we resume the server render, but with data already available in Redux.</p><p>The full example can be seen on the <code>fetch-data</code> tag in the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><p>You probably notice that this comes with a performance penalty, because we’re delaying the render until the data is fetched.</p><p>This is where you start comparing metrics and do your best to understand which calls are essential and which aren’t. For example, fetching products for an e-commerce app might be crucial, but prices and sidebar filters can be lazy loaded.</p><h3 id="Helmet"><a href="#Helmet" class="headerlink" title="Helmet"></a>Helmet</h3><p>As a bonus, let’s look at SEO. While working with React, you may want to set different values in your <code>&lt;head&gt;</code> tag. For example, you may want to set the <em>title, meta tags, keywords</em>, and so on.</p><p>Keep in mind that the <code>&lt;head&gt;</code> tag is normally not part of your React app!</p><p><a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">react-helmet</a> has you covered in this scenario. And it has great support for SSR.</p><figure class="highlight js"><figcaption><span>contact.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">"react-helmet"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Contact = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;This is the contact page&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;Helmet&gt;</span></span><br><span class="line"><span class="regexp">      &lt;title&gt;Contact Page&lt;/</span>title&gt;</span><br><span class="line">      &lt;meta name=<span class="string">"description"</span> content=<span class="string">"This is a proof of concept for React SSR"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Helmet&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Contact;</span><br></pre></td></tr></table></figure><p>You just add your <code>head</code> data anywhere in your component tree. This gives you support for changing values outside the mounted React app on the client.</p><p>And now we add the support for SSR:</p><figure class="highlight js"><figcaption><span>src/server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">"react-helmet"</span>;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">app.get( <span class="string">"/*"</span>, ( req, res ) =&gt; &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">const</span> jsx = (</span><br><span class="line">            &lt;ReduxProvider store=&#123; store &#125;&gt;</span><br><span class="line">                &lt;StaticRouter context=&#123; context &#125; location=&#123; req.url &#125;&gt;</span><br><span class="line">                    &lt;Layout /&gt;</span><br><span class="line">                &lt;<span class="regexp">/StaticRouter&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ReduxProvider&gt;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> reactDom = renderToString( jsx );</span><br><span class="line">        <span class="keyword">const</span> reduxState = store.getState( );</span><br><span class="line">        <span class="keyword">const</span> helmetData = Helmet.renderStatic( );</span><br><span class="line"></span><br><span class="line">        res.writeHead( <span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125; );</span><br><span class="line">        res.end( htmlTemplate( reactDom, reduxState, helmetData ) );</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">app.listen( <span class="number">8000</span> );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlTemplate</span>(<span class="params"> reactDom, reduxState, helmetData </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="string">            <span class="subst">$&#123; helmetData.title.toString( ) &#125;</span></span></span><br><span class="line"><span class="string">            <span class="subst">$&#123; helmetData.meta.toString( ) &#125;</span></span></span><br><span class="line"><span class="string">            &lt;title&gt;React SSR&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /* ... */</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now we have a fully functional React SSR example!</p><p>We started from a simple render of HTML in the context of an Express app. We gradually added routing, state management, and data fetching. Finally, we handled changes outside the scope of the React application.</p><p>The final codebase is on <code>master</code> on the same <a href="https://goo.gl/bVQDWw" target="_blank" rel="noopener">repository</a>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As you’ve seen, SSR is not a big deal, but it can get complex. And it’s much easier to grasp if you build your needs step by step.</p><p>Is it worth adding SSR to your application? As always, it depends. It’s a must if your website is public and accessible to hundreds of thousands of users. But if you’re building a tool/dashboard-like application it might not be worth the effort.</p><p>However, leveraging the power of universal apps is a step forward for the front-end community.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/VGKPcK" target="_blank" rel="noopener">Demystifying server-side rendering in React</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>intro to next.js part1</title>
      <link href="/2018/10/31/20181031-intro-to-next-js/"/>
      <url>/2018/10/31/20181031-intro-to-next-js/</url>
      
        <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Next.js is a react framework for building any kind of react app from mobile to desktop to from SPA to static pages. This article will dive into how to get started quickly.</p><h3 id="Why-use-Next-js"><a href="#Why-use-Next-js" class="headerlink" title="Why use Next.js"></a>Why use Next.js</h3><p><strong>Zero Setup</strong><br>Automatic code splitting, filesystem based routing, hot code reloading and universal rendering.</p><p><strong>Fully Extensible</strong><br>Complete control over Babel and Webpack. Customizable server, routing and next-plugins.</p><p><strong>Ready for Production</strong><br>Optimized for a smaller build size, faster dev compilation and dozens of other improvements.</p><h2 id="Create-a-Next-js-project"><a href="#Create-a-Next-js-project" class="headerlink" title="Create a Next.js project"></a>Create a Next.js project</h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul><li>install <code>node</code> using <code>nvm</code></li></ul><figure class="highlight plain"><figcaption><span>on the command line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello-next</span><br><span class="line">cd hello-next</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save react react-dom next</span><br><span class="line">mkdir pages</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>edit package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Run the server</strong></p><figure class="highlight plain"><figcaption><span>on the command line</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><strong>Open the app</strong></p><p>open <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> from your favorite browser</p><blockquote><p>You’ll see a page with a <code>404 error</code> indicating the page cannot be found.</p></blockquote><h2 id="Creating-your-first-page"><a href="#Creating-your-first-page" class="headerlink" title="Creating your first page"></a>Creating your first page</h2><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Index;</span></span><br></pre></td></tr></table></figure><blockquote><p>If you make a typo error messages appear on the browser page.</p></blockquote><h2 id="Navigate-between-pages"><a href="#Navigate-between-pages" class="headerlink" title="Navigate between pages"></a>Navigate between pages</h2><p><strong>Using a link</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">"next/link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Index = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a&gt;About Page&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Index;</span><br></pre></td></tr></table></figure><ul><li>Link works with browser history (back button)</li><li>Don’t style a Link, style it’s children</li><li>Link works with <code>a</code> and <code>button</code> tags and any tag with an <code>onClick</code> event.</li></ul><h2 id="Using-shared-components"><a href="#Using-shared-components" class="headerlink" title="Using shared components"></a>Using shared components</h2><p><strong>Create a Header component</strong></p><figure class="highlight js"><figcaption><span>components/Header.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">"next/link"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> linkStyle = &#123;</span><br><span class="line">  marginRight: <span class="number">15</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/"</span>&gt;</span><br><span class="line">      &lt;a style=&#123;linkStyle&#125;&gt;Home&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">    &lt;Link href=<span class="string">"/about"</span>&gt;</span><br><span class="line">      &lt;a style=&#123;linkStyle&#125;&gt;About&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Link&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><p><strong>Using the Header component</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"../components/Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Create the Layout component</strong></p><figure class="highlight js"><figcaption><span>components/Layout.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> layoutStyle = &#123;</span><br><span class="line">  margin: <span class="number">20</span>,</span><br><span class="line">  padding: <span class="number">20</span>,</span><br><span class="line">  border: <span class="string">"1px solid #DDD"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;layoutStyle&#125;&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &#123;children&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Layout;</span></span><br></pre></td></tr></table></figure><p><strong>Use the Layout component</strong></p><figure class="highlight js"><figcaption><span>pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"../components/Layout.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Layout&gt;</span><br><span class="line">    &lt;p&gt;Hello Next.js&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Layout&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>pages/about.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">"../components/Layout.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;Layout&gt;</span><br><span class="line">    &lt;p&gt;About page&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Layout&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this post we demonstated using the Next.js react framework. We observed the following.</p><ul><li>Next uses pages just like HTML</li><li>Next pages consist of HTML/JS/CSS = JSX/JS/CSS-in-js</li><li>Next has a Link component for navigating between pages.</li><li>Next produces pages with React components.</li><li>React components can be shared and nested with other React components</li></ul><p>We have learned enough to build a website. In the next post I will demonstrate how to build dynamic applications using Next.js.</p>]]></content>
      
      
      
        <tags>
            
            <tag> framework </tag>
            
            <tag> nextjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>oss 0 vs redhat 34 billion</title>
      <link href="/2018/10/31/20181031-oss-vs-redhat/"/>
      <url>/2018/10/31/20181031-oss-vs-redhat/</url>
      
        <content type="html"><![CDATA[<p>Donald Fischer, who served as a product manager for Red Hat Enterprise Linux during its creation and early years of growth, writes:</p><blockquote><p>Red Hat saw, earlier than most, that the ascendance of open source made the need to pay for code go away, but the need for support and maintenance grew larger than ever. Thus Red Hat was never in the business of selling software, rather it was in the business of addressing the practical challenges that have always come along for the ride with software. […] As an open source developer, you created that software. You can keep your package secure, legally documented, and maintained; who could possibly do it better? So why does Red Hat make the fat profits, and not you? Unfortunately, doing business with large companies requires a lot of bureaucratic toil. That’s doubly true for organizations that require security, legal, and operational standards for every product they bring in the door. Working with these organizations requires a sales and marketing team, a customer support organization, a finance back-office, and lots of other “business stuff” in addition to technology. Red Hat has had that stuff, but you haven’t.<br><br><br>And just like you don’t have time to sell to large companies, they don’t have time to buy from you alongside a thousand other open source creators, one at a time. Sure, big companies know how to install and use your software. (And good news! They already do.) But they can’t afford to put each of 1100 npm packages through a procurement process that costs $20k per iteration. Red Hat solved this problem for one corner of open source by collecting 2,000+ open source projects together, adding assurances on top, and selling it as one subscription product. That worked for them, to the tune of billions. But did you get paid for your contributions?</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> business </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>understanding react performance</title>
      <link href="/2018/10/31/20181031-understanding-react-performance/"/>
      <url>/2018/10/31/20181031-understanding-react-performance/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>We’re going to dive into some typical react performance problems and how to solve them. We will be using and example Profile app which displays a profile card consisting of an image and four fields rendered from state, and one button that changes the state of the description field.</p><p><strong>References</strong></p><ul><li><a href="https://goo.gl/aPJM5t" target="_blank" rel="noopener">a checklist for eliminating common React performance issues</a></li></ul><h2 id="Identify-wasted-renders"><a href="#Identify-wasted-renders" class="headerlink" title="Identify wasted renders"></a>Identify wasted renders</h2><p>In order to identify wateful renders we can utilize these two tools:</p><ul><li>react-dev-tools – highlights when a component renders by flashing a green outline on the component.</li><li>console.log – from your components render method you can console.log to see when it’s rendering.</li></ul><p>Utilizing the react-dev-tools on our app show that when the description field is updated the whole profile component renders as identified by the green flashing border.</p><p>Below are some ways to optimize the situation.</p><h2 id="Extract-frequently-updated-regions-into-isolated-components"><a href="#Extract-frequently-updated-regions-into-isolated-components" class="headerlink" title="Extract frequently updated regions into isolated components"></a>Extract frequently updated regions into isolated components</h2><p>The Profile app is connected to 4 redux fields. So when the <code>description</code> field changes it causes the card to re-render. Remember whenever the <code>props</code> or <code>state</code> changes that causes a re-render. Let’s localize the elements being updated to a specific react component. We will create a <code>Profession</code> componenent connected to only the description</p><pre><code>const Profession = ({ description }) =&gt; {  return (    &lt;p&gt;     &lt;span className=&quot;faint&quot;&gt;I am&lt;/span&gt; a {description}    &lt;/p&gt;  );}</code></pre><p>Now only the <code>profession</code> component will update when the <code>description</code> changes.</p><h2 id="Use-pure-components-when-appropriate"><a href="#Use-pure-components-when-appropriate" class="headerlink" title="Use pure components when appropriate"></a>Use pure components when appropriate</h2><p>The Profession component consists of four words ‘I’, “am”, “a”, “description”. For example purposes if we create a new component for each of those four items maybe we can isolate the description field.</p><p>Pure components only render when their props change. By making our new components Pure we can avoid re-rendering when not necessary. An easy way to implement a <code>pure component</code> is to use <code>React.PureComponents</code> with class components (functional components can be pure also using react connect). Here is our new description component. We don’t show it but each of the child components is a pure component to avoid re-renders.</p><pre><code>const Description = ({ description }) =&gt; {  return (    &lt;p&gt;      &lt;I /&gt;an isolate      &lt;Am /&gt;      &lt;A /&gt;      &lt;Profession profession={description} /&gt;    &lt;/p&gt;  );};</code></pre><h2 id="Avoid-passing-new-objects-as-props"><a href="#Avoid-passing-new-objects-as-props" class="headerlink" title="Avoid passing new objects as props"></a>Avoid passing new objects as props</h2><p><strong>Watch out for new objects</strong></p><p>When you create an object variable in a render method, it creates a new object for every render. In the example below we create the <code>i</code> variable and assign it a new object. This causes the Calendar component to re-render repeatedly.</p><pre><code>class Description extends Component {  render() {    const i = { value: &quot;i&quot; };    return (      &lt;p&gt;        &lt;Title /&gt;        &lt;Calender i={i} /&gt;        &lt;Footer  /&gt;      &lt;/p&gt;    );  }}</code></pre><p>The solution is to use a class variable outside the render method. This prevents a new object from being created on each render. This way the Calendar component only renders once.</p><pre><code>class Description extends Component {  i = { day: 22 }  render() {    return (      &lt;p&gt;        &lt;Title /&gt;        &lt;Calender i={i} /&gt;        &lt;Footer  /&gt;      &lt;/p&gt;    );  }}</code></pre><p><strong>Watch out for explicit event handlers</strong></p><p>Here we have an event handler that creates a new function on every render.</p><pre><code>...render() {  &lt;div onClick={() =&gt; {//do something here}}}...</code></pre><p>The solution is to use a class method to avoid creating a new function on every render.</p><pre><code>...handleClick:() ={...}render() {  &lt;div onClick={this.handleClick}}...</code></pre><h2 id="Use-the-production-build"><a href="#Use-the-production-build" class="headerlink" title="Use the production build"></a>Use the production build</h2><p>For create-react-app</p><pre><code>npm run buildnpm run start</code></pre><p>This will yield bundle optimized files for production.</p><h2 id="Employ-code-splitting"><a href="#Employ-code-splitting" class="headerlink" title="Employ code splitting"></a>Employ code splitting</h2><p>You can implement this in a couple of ways:</p><ul><li><p>split by page – only code necessary for the page.</p></li><li><p>split by component – only code necessary for the component.</p></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now you’ve got a decent checklist for tracking and fixing common performance issues in react apps. Go build some fast apps!</p>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css selectors you must know</title>
      <link href="/2018/08/22/20180822-css-selectors-you-must-know/"/>
      <url>/2018/08/22/20180822-css-selectors-you-must-know/</url>
      
        <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048" target="_blank" rel="noopener">memorize 30 CSS selectors</a></li></ul><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. #container           id selector</span><br><span class="line"></span><br><span class="line">2. .foo                 class selector</span><br><span class="line"></span><br><span class="line">3. ul li                descendent selector</span><br></pre></td></tr></table></figure><h2 id="Memorize-these-30-Selectors"><a href="#Memorize-these-30-Selectors" class="headerlink" title="Memorize these 30 Selectors"></a>Memorize these 30 Selectors</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">01. *                                   every element</span><br><span class="line">    #container *                        every child element</span><br><span class="line"></span><br><span class="line">02. #x                                  id selector                         // avoid if possible</span><br><span class="line"></span><br><span class="line">03. .foo                                class selector</span><br><span class="line"></span><br><span class="line">04. li a                                descendent selector                 // li a p.error -- doing it wrong</span><br><span class="line"></span><br><span class="line">05. ul                                  type selector</span><br><span class="line"></span><br><span class="line">06. a:link                              not clicked psudeo class</span><br><span class="line"></span><br><span class="line">    a:visited                           clicked on psudeo class</span><br><span class="line"></span><br><span class="line">07. ul + p                              adjacent selector                   // only the first p after each ul</span><br><span class="line"></span><br><span class="line">08. ul &gt; li                             direct descendent selector          // avoids nested lists</span><br><span class="line"></span><br><span class="line">09. ul ~ p                              sibling selector                     // all p&apos;s that follow a ul</span><br><span class="line"></span><br><span class="line">10. a[title]                            attributes selector                 // only select anchor with title attri</span><br><span class="line"></span><br><span class="line">11. a[href=&quot;http://net.tutsplus.com&quot;]   attribute match selector            // find exact value</span><br><span class="line"></span><br><span class="line">12. a[href*=&quot;nettuts&quot;]                  contains selector                   // find must be contained in the v</span><br><span class="line"></span><br><span class="line">13. a[href^=&quot;http&quot;]                     starts with selector                // value must start with</span><br><span class="line"></span><br><span class="line">14. a[href$=&quot;.jpg&quot;]                     ends with selector                  // value must end with</span><br><span class="line"></span><br><span class="line">15. a[data-filetype=&quot;image&quot;]            data attribute match                // elements with data attribute matching</span><br><span class="line"></span><br><span class="line">16. a[data-info~=&quot;external&quot;]            data attribute containing word      // find word space separated list</span><br><span class="line"></span><br><span class="line">17. input[type=radio]:checked           checked psuedo class                // find elements that are checked</span><br><span class="line"></span><br><span class="line">18. .title:before                       before element psuedo class         // often used to place content</span><br><span class="line"></span><br><span class="line">    .title:after                        after element psuedo class          // officially use :: but best practice :</span><br><span class="line"></span><br><span class="line">19. a:hover                             hover action psuedo class           // when hovering</span><br><span class="line"></span><br><span class="line">20. div:not(#container)                 negation psuedo class               // all divs without #container</span><br><span class="line"></span><br><span class="line">21. p::first-line                       psuedo element                      // add style to psuedo elements</span><br><span class="line"></span><br><span class="line">    p::first-letter                                                         // mus be applied to block elements</span><br><span class="line"></span><br><span class="line">22. li:nth-child(3)                     nth-child selector                  // select the 3rd li</span><br><span class="line"></span><br><span class="line">    li:nth-child(4n)                                                        // select every fouth child</span><br><span class="line"></span><br><span class="line">23. li:nth-last-child(2)                nth-last-child selector             // select starting from last</span><br><span class="line"></span><br><span class="line">24. ul:nth-of-type(3)                   nth-of-type selector                // select the third of type ul</span><br><span class="line"></span><br><span class="line">25. li:nth-last-of-type(2)              nth-last-of-type selector           // select starting from last</span><br><span class="line"></span><br><span class="line">26. ul li:first-child                   first-child selector                // first li in list</span><br><span class="line"></span><br><span class="line">27. ul &gt; li:last-child                  last child selector                 // last child in list &apos;&gt;&apos; = decendant</span><br><span class="line"></span><br><span class="line">28. div p:only-child                    only-child selector                 // select p if div has only one p</span><br><span class="line"></span><br><span class="line">29. ul &gt; li:only-of-type                only-of-type selector               // select li if ul has only one li</span><br><span class="line"></span><br><span class="line">30. ul:first-of-type                    first of type psudo class           // find first element of type ul</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>intro to css-grid</title>
      <link href="/2018/08/19/20180819-intro-to-css-grid/"/>
      <url>/2018/08/19/20180819-intro-to-css-grid/</url>
      
        <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><ul><li><a href="https://goo.gl/fdbjt1" target="_blank" rel="noopener">https://goo.gl/fdbjt1</a></li></ul><h2 id="Grid-Terminology"><a href="#Grid-Terminology" class="headerlink" title="Grid Terminology"></a>Grid Terminology</h2><ul><li>grid container: contains the grid</li><li>grid lines: horizontal and vertical lines that divide the grid</li><li>grid cell: smallest unit of area in a grid</li><li>grid area: a rectangular area in the grid as small asone grid cell or as large as the entire grid.</li><li>grid track: the space between any two grid lines</li></ul><h2 id="How-to-define-a-grid"><a href="#How-to-define-a-grid" class="headerlink" title="How to define a grid"></a>How to define a grid</h2><p>Define grid:</p><pre><code>- display: grid;   // OR inline grid;- grid-template-columns: ...- grid-template-rows: ...</code></pre><h2 id="Creating-a-music-app"><a href="#Creating-a-music-app" class="headerlink" title="Creating a music app"></a>Creating a music app</h2><p>The grid conainer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Naming and Positioning Items by Grid Areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  ...;</span><br><span class="line">  <span class="selector-tag">grid-template-areas</span>:</span><br><span class="line">    "<span class="selector-tag">sidebar</span>  <span class="selector-tag">content</span>"</span><br><span class="line">    "<span class="selector-tag">footer</span>   <span class="selector-tag">footer</span>";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complete CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"sidebar  content"</span></span><br><span class="line">    <span class="string">"footer  footer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Let’s-Get-Responsive"><a href="#Let’s-Get-Responsive" class="headerlink" title="Let’s Get Responsive"></a>Let’s Get Responsive</h2><p>Mobile First</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"content"</span></span><br><span class="line">    <span class="string">"footer"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Desktop</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>:</span><br><span class="line">      <span class="string">"sidebar  content"</span></span><br><span class="line">      <span class="string">"footer   footer"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Placing-Content-within-the-Grid"><a href="#Placing-Content-within-the-Grid" class="headerlink" title="Placing Content within the Grid."></a>Placing Content within the Grid.</h2><p>FontAwesome 4.x was used.</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;</code></pre><h3 id="The-Sidebar"><a href="#The-Sidebar" class="headerlink" title="The Sidebar"></a>The Sidebar</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-bars"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-volume-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-spotify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-cog"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-soundcloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aside</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make the Sidebar a Grid Container</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-main-header"><a href="#The-main-header" class="headerlink" title="The main header"></a>The main header</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bit.ly/2sc2NJd"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"details"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>CattyBoard Top 100 Single Charts (11.06.36)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sm--hide"</span>&gt;</span>Unknown Artist<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sm--hide"</span>&gt;</span>2016 . Charts . 100 songs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-play"</span>&gt;</span> &amp;nbsp;Play all<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-plus"</span>&gt;</span> &amp;nbsp;Add to<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-ellipsis-h"</span>&gt;</span>&amp;nbsp;&amp;nbsp;More<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>define the grid areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__header</span> &gt; <span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: img;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main__header</span> &gt; <span class="selector-class">.details</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: dtls;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, define the grid itself</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__header</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"img"</span></span><br><span class="line">    <span class="string">"dtls"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For mobile</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main__header</span> &#123;</span><br><span class="line">    <span class="attribute">justify-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.main__header</span> &gt; <span class="selector-class">.details</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.sm--hide</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.img</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For desktop</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.main__header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">250px</span> <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">"img dtls"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="The-main-details"><a href="#The-main-details" class="headerlink" title="The main details"></a>The main details</h3><p>Here we’ll make CSS-Grid work with Flexbox</p><p>The HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main__body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1. One Dance<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Crake feat CatKid &amp;amp; Cyla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2:54<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>2. Panda<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cattee<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4:06<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3. Can't Stop the Feeling!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Catin Cimberlake<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3:56<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>4. Work From Home<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Cat Harmony feat Colla<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>3:34<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>CATTY CLOUD SYNC<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main__body</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Final-Result"><a href="#The-Final-Result" class="headerlink" title="The Final Result"></a>The Final Result</h2><ul><li><a href="https://codesandbox.io/s/rwp1zqx5jp" target="_blank" rel="noopener">https://codesandbox.io/s/rwp1zqx5jp</a></li></ul><p>Mobile</p><p><img src="https://i.imgur.com/lR9xEuW.png" alt=""></p><p>Desktop</p><p><img src="https://i.imgur.com/pqCMCNX.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> css-grid </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>recent practice</title>
      <link href="/2018/08/19/20180819-recent-practice/"/>
      <url>/2018/08/19/20180819-recent-practice/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://certain-owl.surge.sh/" target="_blank" rel="noopener">flexing flexbox</a></li><li><a href="https://codesandbox.io/s/rwp1zqx5jp" target="_blank" rel="noopener">css-grid</a></li><li><a href="https://codesandbox.io/s/6w079rly0k" target="_blank" rel="noopener">recursion practice</a></li><li><a href="https://codesandbox.io/s/1vmx5w5kx7" target="_blank" rel="noopener">fractal tree</a></li><li><a href="https://codesandbox.io/s/30p22krx95" target="_blank" rel="noopener">react bowling</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> example </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>using export with index.js</title>
      <link href="/2018/08/19/20180819-using-export-with-index-js/"/>
      <url>/2018/08/19/20180819-using-export-with-index-js/</url>
      
        <content type="html"><![CDATA[<p>Consider the app sructure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── config.js</span><br><span class="line">├── containers</span><br><span class="line">├── context.js</span><br><span class="line">├── images</span><br><span class="line">│   └── logo.svg</span><br><span class="line">├── index.js</span><br><span class="line">├── registerServiceWorker.js</span><br><span class="line">├── routes</span><br><span class="line">│   ├── App.css</span><br><span class="line">│   ├── App.js</span><br><span class="line">│   └── App.test.js</span><br><span class="line">├── styles</span><br><span class="line">│   └── index.css</span><br><span class="line">├── utils</span><br><span class="line">└── views</span><br><span class="line">    ├── body.css</span><br><span class="line">    ├── body.js</span><br><span class="line">    ├── flex.css</span><br><span class="line">    ├── flex.js</span><br><span class="line">    ├── header.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── info.js</span><br></pre></td></tr></table></figure><p>/src/views/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./header"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./body"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./info"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./flex"</span>;</span><br></pre></td></tr></table></figure><p>/src/views/body.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./body.css"</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  FlexDefaults,</span><br><span class="line">  FlexWrap1,</span><br><span class="line">  FlexWrap2,</span><br><span class="line">  Justify1,</span><br><span class="line">  Justify2,</span><br><span class="line">  Justify3,</span><br><span class="line">  Justify4,</span><br><span class="line">  Justify5,</span><br><span class="line">  Align1,</span><br><span class="line">  JustifyAndAlign</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"../views"</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Utilising the <code>index.js</code> file in this way you can import many views wether they exist in one file or many. This simplifies coding. You do need to remember to populate <code>index.js</code> when adding new files.</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> example </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>recursion review</title>
      <link href="/2018/08/19/20180819-recursion/"/>
      <url>/2018/08/19/20180819-recursion/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helper functions</span></span><br><span class="line"><span class="keyword">const</span> format = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="function"><span class="params">title</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`\n<span class="subst">$&#123;title&#125;</span>\n---------------------`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterate = <span class="function">(<span class="params">fnName, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;fnName&#125;</span>(<span class="subst">$&#123;n&#125;</span>) = <span class="subst">$&#123;fn(n)&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WRITE FUNCTIONS IN A RECURSIVE WAY</span></span><br><span class="line"><span class="comment">// pow, fibonaci, factorial, map, reverse, sumSalaries</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pow = <span class="function">(<span class="params">b, n</span>) =&gt;</span> (n === <span class="number">1</span> ? b : b * pow(b, n - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fibonaci = <span class="function"><span class="params">x</span> =&gt;</span> (x &lt;= <span class="number">1</span> ? <span class="number">1</span> : fibonaci(x - <span class="number">1</span>) + fibonaci(x - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factorial = <span class="function"><span class="params">x</span> =&gt;</span> (x === <span class="number">1</span> ? <span class="number">1</span> : x * factorial(x - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span> (arr.length === <span class="number">0</span> ? [] : fn(arr[<span class="number">0</span>]).concat(map(arr.slice(<span class="number">1</span>), fn)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">s</span> =&gt;</span> (s.length === <span class="number">1</span> ? s : s.slice(<span class="number">-1</span>) + reverse(s.slice(<span class="number">0</span>, <span class="number">-1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumSalaries = <span class="function"><span class="params">department</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isDepartment = <span class="built_in">Array</span>.isArray(department);</span><br><span class="line">  <span class="keyword">if</span> (isDepartment) &#123;</span><br><span class="line">    <span class="keyword">return</span> department.reduce(<span class="function">(<span class="params">acc, person</span>) =&gt;</span> acc + person.salary, <span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (dept <span class="keyword">in</span> department) &#123;</span><br><span class="line">      sum += sumSalaries(department[dept]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pow</span></span><br><span class="line">title(<span class="string">"pow"</span>);</span><br><span class="line"><span class="keyword">const</span> powOfBase2 = <span class="function"><span class="params">n</span> =&gt;</span> pow(<span class="number">2</span>, n);</span><br><span class="line">iterate(<span class="string">"powOfBase2"</span>, powOfBase2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fibonaci</span></span><br><span class="line">title(<span class="string">"fibonaci"</span>);</span><br><span class="line">iterate(<span class="string">"fibonaci"</span>, fibonaci);</span><br><span class="line"></span><br><span class="line"><span class="comment">// factorial</span></span><br><span class="line">title(<span class="string">"factorial"</span>);</span><br><span class="line">iterate(<span class="string">"factorial"</span>, factorial);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">title(<span class="string">"map"</span>);</span><br><span class="line"><span class="keyword">const</span> lettersArray = <span class="string">"abcde"</span>.split(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">const</span> uppercase = <span class="function"><span class="params">x</span> =&gt;</span> x.toUpperCase();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`map(<span class="subst">$&#123;format(lettersArray)&#125;</span>, uppercase) = <span class="subst">$&#123;map(lettersArray, uppercase)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// reverse</span></span><br><span class="line">title(<span class="string">"reverse"</span>);</span><br><span class="line"><span class="keyword">const</span> word = <span class="string">"abcde"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`reverse(<span class="subst">$&#123;format(word)&#125;</span>) = <span class="subst">$&#123;reverse(word)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sumSalaries</span></span><br><span class="line">title(<span class="string">"sumSalaries"</span>);</span><br><span class="line"><span class="keyword">const</span> company = &#123;</span><br><span class="line">  sales: [&#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">salary</span>: <span class="number">1000</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Alice"</span>, <span class="attr">salary</span>: <span class="number">600</span> &#125;],</span><br><span class="line">  development: &#123;</span><br><span class="line">    sites: [&#123; <span class="attr">name</span>: <span class="string">"Peter"</span>, <span class="attr">salary</span>: <span class="number">2000</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"Alex"</span>, <span class="attr">salary</span>: <span class="number">1800</span> &#125;],</span><br><span class="line">    internals: [&#123; <span class="attr">name</span>: <span class="string">"Jack"</span>, <span class="attr">salary</span>: <span class="number">1300</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`sumSalaries(company) = <span class="subst">$&#123;sumSalaries(company)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> example </tag>
            
            <tag> recusion </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux training</title>
      <link href="/2018/04/05/20180405-redux-training/"/>
      <url>/2018/04/05/20180405-redux-training/</url>
      
        <content type="html"><![CDATA[<h2 id="01-hello-world"><a href="#01-hello-world" class="headerlink" title="01 hello world"></a>01 hello world</h2><p>demo creating a simple react app with a single .js file.</p><ul><li><code>react run index.js</code></li></ul><h2 id="02-add-some-sass"><a href="#02-add-some-sass" class="headerlink" title="02 add some sass"></a>02 add some sass</h2><p>demo sass in your simple app.</p><ul><li><code>react run index.js --plugins sass</code></li></ul><h2 id="03-add-professional-file-structure"><a href="#03-add-professional-file-structure" class="headerlink" title="03 add professional file structure"></a>03 add professional file structure</h2><p>demo app with professional file structure.</p><ul><li><code>npm start</code></li></ul><h2 id="04-todomvc-redux"><a href="#04-todomvc-redux" class="headerlink" title="04 todomvc-redux"></a>04 todomvc-redux</h2><p>demo the ubiquitous todomvc app built with redux</p><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><ul><li>redux actions</li></ul><p>Actions are payloads of information that send data to your store. The only source of information for the store. You send them to the store using <code>store.dispatch()</code>.</p><ul><li>redux reducers</li></ul><p>Reducers specifies how the application state changes in response to an action.</p><ul><li>redux middleware</li></ul><p>Middleware provides a hook that allows access to the action before and after it reaches the reducer.</p><ul><li>redux store</li></ul><p>The store is an object that:</p><ul><li>holds app state</li><li>allows access to state via <code>getState()</code></li><li>allows updating state via <code>dispatch(action)</code></li><li>allows registering/unregistering listeners <code>(un)subscribe(listener)</code></li></ul><h3 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h3><p>zero config testing platform</p><p>features:</p><ul><li>snapshots</li><li>awesome cli interface</li><li>powerful mocking library</li><li>code coverage</li><li>parallelizes and sandboxes tests</li></ul><ul><li>test actions</li><li>test reducers</li><li>test middleware</li><li>test store</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> example </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux testing</title>
      <link href="/2018/04/05/20180405-redux-testing/"/>
      <url>/2018/04/05/20180405-redux-testing/</url>
      
        <content type="html"><![CDATA[<h2 id="Testing-with-Jest-snapshots"><a href="#Testing-with-Jest-snapshots" class="headerlink" title="Testing with Jest snapshots"></a>Testing with Jest snapshots</h2><h3 id="testing-actions"><a href="#testing-actions" class="headerlink" title="testing actions"></a>testing actions</h3><p>action creator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should create an action to add a recipe'</span>, () =&gt; &#123;</span><br><span class="line">  expect(actions.addRecipe(<span class="string">'test'</span>)).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>dynamic action creator</p><p>logic emits different object based on input parameter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">''</span>].forEach(<span class="function">(<span class="params">param</span>) =&gt;</span></span><br><span class="line">  it(<span class="string">`should add recipe with default parameter <span class="subst">$&#123;param&#125;</span>`</span>, () =&gt; &#123;</span><br><span class="line">    expect(actions.addRecipe(param)).toMatchSnapshot()</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="testing-asynchronous-actions"><a href="#testing-asynchronous-actions" class="headerlink" title="testing asynchronous actions"></a>testing asynchronous actions</h3><p>they discourage the use of asynchronous action creators</p><ul><li>create mock response</li><li>stub fetch success and error</li><li>setup mock fetch</li><li>fetch</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Async action creator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setRecipe = <span class="function">(<span class="params">id, data</span>) =&gt;</span> (&#123;</span><br><span class="line">  type: actions.SET_RECIPE,</span><br><span class="line">  payload: &#123; id, data &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchRecipe = <span class="function"><span class="params">id</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">'recipe/'</span> + id)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(setRecipe(id, json)))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a fake response object</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockResponse = <span class="function">(<span class="params">status, statusText, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">window</span>.Response(response, &#123;</span><br><span class="line">    status: status,</span><br><span class="line">    statusText: statusText,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleResponse = <span class="function">(<span class="params">mockedUrl, response</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">window</span>.fetch = jest.fn().mockImplementation(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (url === mockedUrl) &#123;</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span>(<span class="string">'Unknown URL: '</span> + url);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockFetch = <span class="function">(<span class="params">mockedUrl, status, data</span>) =&gt;</span></span><br><span class="line">  handleResponse(</span><br><span class="line">  mockedUrl,</span><br><span class="line">  <span class="built_in">Promise</span>.resolve(mockResponse(status, <span class="literal">null</span>, data)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockFetchError = <span class="function">(<span class="params">mockedUrl, state, error</span>) =&gt;</span></span><br><span class="line">  handleResponse(</span><br><span class="line">  mockedUrl,</span><br><span class="line">  <span class="built_in">Promise</span>.reject(mockResponse(state, error, <span class="string">'&#123;&#125;'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// The mock fetch() call will return a resolved promise</span></span><br><span class="line"><span class="comment">// that is similar to the real result from a fetch()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample mocked fetch code</span></span><br><span class="line">mockFetch(<span class="number">200</span>, <span class="string">'&#123;"key":"value"&#125;'</span>);</span><br><span class="line">fetch(<span class="string">'test.json'</span>)</span><br></pre></td></tr></table></figure><p>Unlike simple action creators, our code now relies on dispatch() being used, which forces us to<br>create a mock instance of a store. To do so, we will use the <code>redux-mock-store</code> library:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a mock store</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'redux-mock-store'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mockStore = configureStore([ thunk ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Structure of an async test block</span></span><br><span class="line">describe(<span class="string">'fetch recipe'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> store;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> store = mockStore(&#123;&#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Full async test</span></span><br><span class="line">  it(<span class="string">'should fetch recipe if it exists'</span>, () =&gt; &#123;</span><br><span class="line">    mockFetch(<span class="string">'recipe/100'</span>, <span class="number">200</span>, <span class="string">'&#123;"title":"hello"&#125;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store.dispatch(actions.fetchRecipe(<span class="number">100</span>))</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> expect(store.getActions()).toMatchSnapshot())</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Integration-Tests"><a href="#Integration-Tests" class="headerlink" title="Integration Tests"></a>Integration Tests</h3><p>The role of the integration tests is to verify that all the parts of the application work correctly together. A comprehensive unit test suite will ensure all the reducers, action creators, middleware, and libraries are correct. With integration tests, we will try to run them together in a single test to check system-wide behavior.</p><p>basic integration test include 4 steps</p><ol><li>verify initial state</li><li>mock external dependencies</li><li>dispatch an action</li><li>verify that the state has changed and any external APIs were called as expected</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'store'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchRecipes &#125; <span class="keyword">from</span> <span class="string">'actions/recipes'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mockFetch &#125; <span class="keyword">from</span> <span class="string">'test-utils'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'integration'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should fetch recipes from server'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = [&#123; <span class="attr">title</span>: <span class="string">'test'</span> &#125;];</span><br><span class="line"></span><br><span class="line">    expect(store.getState().recipes).toEqual([]);                   <span class="comment">// verify initial state</span></span><br><span class="line">    mockFetch(<span class="string">'recipes.json'</span>, <span class="number">200</span>, <span class="built_in">JSON</span>.stringify(data));           <span class="comment">// mock dependencies</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store.dispatch(fetchRecipes())                           <span class="comment">// dispatch action</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> expect(store.getState().recipes).toEqual(data));  <span class="comment">// verify state</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm refresher</title>
      <link href="/2017/05/12/20170511-npm-refresher/"/>
      <url>/2017/05/12/20170511-npm-refresher/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#creating-npm-packages">creating npm packages</a><ul><li><a href="#create-project-using-nwbhttpsgooglo4vldl-which-supports-es5-and-es6">create project using <a href="https://goo.gl/O4VLdl" target="_blank" rel="noopener">nwb</a> which supports es5 and es6</a></li><li><a href="#add-testing-packages">add testing packages</a></li><li><a href="#configure-packagejson">configure package.json</a></li><li><a href="#add-code">add code</a></li><li><a href="#run-tests-and-coverage">run tests and coverage</a></li><li><a href="#build">build</a></li><li><a href="#add-readmemd">add readme.md</a></li><li><a href="#configure-travis">configure Travis</a></li><li><a href="#create-git-repo">create git repo</a></li><li><a href="#activate-services-for-badges">activate services for badges</a></li><li><a href="#publish-package">publish package</a></li><li><a href="#confirm-package-is-working">confirm package is working</a></li></ul></li></ul><!-- /TOC --><h2 id="creating-npm-packages"><a href="#creating-npm-packages" class="headerlink" title="creating npm packages"></a>creating npm packages</h2><h3 id="create-project-using-nwb-which-supports-es5-and-es6"><a href="#create-project-using-nwb-which-supports-es5-and-es6" class="headerlink" title="create project using nwb which supports es5 and es6"></a>create project using <a href="https://goo.gl/O4VLdl" target="_blank" rel="noopener">nwb</a> which supports es5 and es6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nwb new web-module sum</span><br><span class="line">cd sum</span><br></pre></td></tr></table></figure><h3 id="add-testing-packages"><a href="#add-testing-packages" class="headerlink" title="add testing packages"></a>add testing packages</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add jest babel-jest</span><br></pre></td></tr></table></figure><h3 id="configure-package-json"><a href="#configure-package-json" class="headerlink" title="configure package.json"></a>configure package.json</h3><ul><li>add appropriate package name.  f.e. @cogent-labs/sum</li><li>add description</li><li>add test scripts</li><li>add babel config</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;@cogent-labs/sum&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a simple sum function&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;lib/index.js&quot;,</span><br><span class="line">  &quot;module&quot;: &quot;es/index.js&quot;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;es&quot;,</span><br><span class="line">    &quot;lib&quot;,</span><br><span class="line">    &quot;umd&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;nwb build-web-module&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;nwb clean-module&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;jest&quot;,</span><br><span class="line">    &quot;coverage&quot;: &quot;jest --coverage&quot;,</span><br><span class="line">    &quot;test:watch&quot;: &quot;jest --watchAll&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-jest&quot;: &quot;^20.0.1&quot;,</span><br><span class="line">    &quot;jest&quot;: &quot;^20.0.1&quot;,</span><br><span class="line">    &quot;nwb&quot;: &quot;0.15.x&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;repository&quot;: &quot;&quot;,</span><br><span class="line">  &quot;babel&quot;: &#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;es2015&quot;,</span><br><span class="line">      &quot;react&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add-code"><a href="#add-code" class="headerlink" title="add code"></a>add code</h3><figure class="highlight javascript"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>src/tests/index.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'../src'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'#sum'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should sum 1 and 2 and get 3'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> actual = sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> expected = <span class="number">3</span></span><br><span class="line">    expect(actual).toBe(expected)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="run-tests-and-coverage"><a href="#run-tests-and-coverage" class="headerlink" title="run tests and coverage"></a>run tests and coverage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br><span class="line">npm run coverage</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="add-readme-md"><a href="#add-readme-md" class="headerlink" title="add readme.md"></a>add readme.md</h3><pre><code># sum[![Travis][build-badge]][build][![npm package][npm-badge]][npm][![Coveralls][coveralls-badge]][coveralls]a simple sum function## getting startedinstall<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @cogent-labs/sum</span><br></pre></td></tr></table></figure>usage<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sum from &apos;@coget-labs/sum&apos;</span><br><span class="line"></span><br><span class="line">const result = sum(1,2)</span><br><span class="line"></span><br><span class="line">console.log(&apos;result:&apos;, result)</span><br></pre></td></tr></table></figure>test<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm test            // test once</span><br><span class="line">npm test:watch      // test in watch mode</span><br><span class="line">npm coverage        // test and provide coverage report</span><br></pre></td></tr></table></figure>[build-badge]: https://img.shields.io/travis/dearfrankg/sum/master.png?style=flat-square[build]: https://travis-ci.org/dearfrankg/sum[npm-badge]: https://img.shields.io/npm/v/@cogent-labs/sum.png?style=flat-square[npm]: https://www.npmjs.org/package/@cogent-labs/sum[coveralls-badge]: https://img.shields.io/coveralls/dearfrankg/sum/master.png?style=flat-square[coveralls]: https://coveralls.io/github/dearfrankg/sum</code></pre><h3 id="configure-Travis"><a href="#configure-Travis" class="headerlink" title="configure Travis"></a>configure Travis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line"></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 4</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"></span><br><span class="line">script: &quot;npm run-script coverage&quot;</span><br><span class="line"></span><br><span class="line">after_success:</span><br><span class="line">  - npm install codecov.io coveralls</span><br><span class="line">  - cat ./coverage/lcov.info | ./node_modules/codecov.io/bin/codecov.io.js</span><br><span class="line">  - cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure><h3 id="create-git-repo"><a href="#create-git-repo" class="headerlink" title="create git repo"></a>create git repo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git ci -m &apos;add sum</span><br><span class="line">git create sum</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="activate-services-for-badges"><a href="#activate-services-for-badges" class="headerlink" title="activate services for badges"></a>activate services for badges</h3><p>when push happens service is run</p><ul><li>goto travis site</li><li>goto coveralls site</li></ul><h3 id="publish-package"><a href="#publish-package" class="headerlink" title="publish package"></a>publish package</h3><p>With proud badges you’re ready to publish</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// SETUP ORG IF NECESSARY</span><br><span class="line"></span><br><span class="line">https://www.npmjs.com/org/create</span><br><span class="line"></span><br><span class="line">// LOGIN IF NECESSARY</span><br><span class="line"></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line">// PUBLISH A PUBLIC REPO</span><br><span class="line"></span><br><span class="line">npm publish --acccess public</span><br><span class="line"></span><br><span class="line">// access public is necessary</span><br><span class="line">// private repos cost $7 per mo</span><br></pre></td></tr></table></figure><h3 id="confirm-package-is-working"><a href="#confirm-package-is-working" class="headerlink" title="confirm package is working"></a>confirm package is working</h3><ol><li>confirm listing on your profile <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a></li><li>confirm pull</li><li>confirm tests</li><li>confirm usage</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react lifecycle</title>
      <link href="/2017/04/13/20170412-react-lifecycle/"/>
      <url>/2017/04/13/20170412-react-lifecycle/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>React enables to create components by invoking the React.createClass() method which expects a render method and triggers a lifecycle that can be hooked into via a number of so called lifecycle methods.</p><p>To get a clear idea of the lifecycle we will need to differentiate between</p><ul><li>creation phase</li><li>update phase</li><li>destroy phase</li></ul><h2 id="Creation-Phase"><a href="#Creation-Phase" class="headerlink" title="Creation Phase"></a>Creation Phase</h2><table><thead><tr><th>Creation Component</th><th></th></tr></thead><tbody><tr><td><code>getInitialState</code></td><td>set initial state</td></tr><tr><td><code>getDefaultProps</code></td><td>define props</td></tr><tr><td><code>componentWillMount</code></td><td><strong>YES set state</strong> – will not re-render.  (respond to wondow-resize, focus-changes)</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidMount</code></td><td><strong>YES set state</strong> – DOM manipulation, Data fetching, inititalize UI libs, setup listeners</td></tr></tbody></table><div style="height: 50px"></div><h2 id="Update-Phase"><a href="#Update-Phase" class="headerlink" title="Update Phase"></a>Update Phase</h2><table><thead><tr><th>Update State</th><th></th></tr></thead><tbody><tr><td><code>shouldComponentUpdate</code></td><td>decide to render or not returning a boolean</td></tr><tr><td><code>componentWillUpdate</code></td><td><strong>NO state changes here</strong> prepare for update – dispatch events, start animation</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidUpdate</code></td><td>DOM manipulation and Data fetching, update chart with new data <strong>careful not to infinite loop</strong></td></tr></tbody></table><div style="height: 50px"></div><table><thead><tr><th>Update Props</th><th></th></tr></thead><tbody><tr><td><code>componentWillReceiveProps</code></td><td><strong>YES set state</strong> – only called when props change <strong>you must check if props changed</strong></td></tr><tr><td><code>shouldComponentUpdate</code></td><td>decide to render or not returning a boolean</td></tr><tr><td><code>componentWillUpdate</code></td><td><strong>NO state changes here</strong> prepare for update – dispatch events, start animation</td></tr><tr><td><code>render</code></td><td>render</td></tr><tr><td><code>componentDidUpdate</code></td><td>DOM manipulation and Data fetching, update chart with new data <strong>careful not to infinite loop</strong></td></tr></tbody></table><div style="height: 50px"></div><h2 id="Destroy-Phase"><a href="#Destroy-Phase" class="headerlink" title="Destroy Phase"></a>Destroy Phase</h2><table><thead><tr><th>Destroy Phase</th><th></th></tr></thead><tbody><tr><td><code>componentWillUnmount</code></td><td>clean up operations: f.e. removing any timers, 3rd party lib references</td></tr></tbody></table><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/uy15pn" target="_blank" rel="noopener">Understanding the React Component Lifecycle</a></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><iframe src="http://embed.plnkr.co/8KLnfn8S29y1cFw59FYY/?show=preview" frameborder="0" width="100%" height="1500"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>learning lerna</title>
      <link href="/2017/04/12/20170412-learning-lerna/"/>
      <url>/2017/04/12/20170412-learning-lerna/</url>
      
        <content type="html"><![CDATA[<p><a href="https://goo.gl/OQnM1G" target="_blank" rel="noopener">Lerna</a>: A tool for managing JavaScript projects with multiple packages.</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>Developing many packages in separate repos are messy with disadvantages.  To solve this many projects <code>babel</code>, <code>react</code>, <code>angular</code>, and many more, develop all packages in a single repo called a <code>monorepo</code>.</p><p><strong>Lerna is a tool that optimizes the workflow around managing monorepos.</strong></p><p>It looks like this:</p><pre><code>my-lerna-repo/  lerna.json  package.json  packages/    package-1/      package.json    package-2/      package.json</code></pre><h2 id="Why-use-Lerna"><a href="#Why-use-Lerna" class="headerlink" title="Why use Lerna"></a>Why use Lerna</h2><ol><li>It optimizes workflow for managing <code>packages</code></li><li>it’s much more organized than having separate repos for each package</li><li>manage separate utility projects tracking version independently (lodash v4.x, ramda v3.x)</li><li>manage a group of related components using only a single version (bootstrap-components v3.x)</li></ol><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Create-a-lerna-repo"><a href="#Create-a-lerna-repo" class="headerlink" title="Create a lerna repo"></a>Create a lerna repo</h3><blockquote><p>We are using lerna v2.x</p></blockquote><pre><code>// INSTALLnpm install -g lerna// CREATE LERNA REPOgit init lerna-repo       // create a new git repocd lerna-repolerna init                // LERNA COMMAND: lerna init: makes 2 files                          // lerna.json package.json// CONFIGURE LERNA{                         // configure lerna by editing lerna.json  &quot;lerna&quot;: &quot;2.0.0-rc.1&quot;,  &quot;packages&quot;: [    &quot;packages/*&quot;  ],  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;npmClient&quot;: &quot;yarn&quot;,  &quot;commands&quot;: {    &quot;bootstrap&quot;: {      &quot;hoist&quot;: &quot;**&quot;    }  }}// CREATE PACKAGESmkdir -p packages/project1mkdir -p packages/project2lerna exec npm init -- -y     // make package.json for each project// RUN COMMANDS ON SCOPElerna exec cat package.json --scope project1      // review them individually// SETUP DEPENDENCIESyarn add react react-dom// copy package.json dependency from root to project// LOCAL DEPENDENCY// one local project may depend on another// just add the dependency-project-name to package.json// then runlerna bootstrap</code></pre><h2 id="Commands-and-Options"><a href="#Commands-and-Options" class="headerlink" title="Commands and Options"></a>Commands and Options</h2><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><pre><code>- bootstrap  Link together local packages and npm install remaining package dependencies- publish    Publish updated packages to npm- updated    Check which packages have changed since the last release- import     Import a package with git history from an external repository- clean      Remove the node_modules directory from all packages- diff       Diff all packages or a single package since the last release- init       Initialize a lerna repo- run        Run npm script in each package- exec       Run a command in each package- ls         List all public packages</code></pre><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><p>configure lerna</p><pre><code>--npm-tag [tagname]     Publish packages with the specified npm dist-tag--npm-client [client]   Executable used to install dependencies (npm, yarn, pnpm, ...)--concurrency           How many threads to use if lerna parallelises the tasks                        (defaults to 4)--loglevel              What level of logs to report (defaults to &quot;info&quot;).                        On failure, all logs are written to lerna-debug.log in the                        current working directory.--git-remote [remote]   Push git changes to the specified remote instead of &apos;origin&apos;--canary, -c            Publish packages after every successful merge using the                        sha as part of the tag--conventional-commits  Use angular conventional-commit format to determine version                        bump and generate CHANGELOG--yes                   Skip all confirmation prompts</code></pre><p>init</p><pre><code>--independent, -i       Version packages independently--exact                 Specify cross-dependency version numbers exactly rather than                        with a caret (^) (only affects publish and init)</code></pre><p>bootstrap</p><pre><code>--hoist [glob]          Install external dependencies matching [glob] to the repo root.                        Use with no glob for all.--nohoist [glob]        Don&apos;t hoist external dependencies matching [glob] to the repo root--include-filtered-dependencies                        Flag to force lerna to include all dependencies and transitive                        dependencies when running &apos;bootstrap&apos;, even if they should not                        be included by the scope or ignore flags</code></pre><p>publish</p><pre><code>--skip-git              Skip commiting, tagging, and pushing git changes--skip-npm              Stop before actually publishing change to npm--exact                 Specify cross-dependency version numbers exactly rather than                        with a caret (^) (only affects publish and init)--message, -m [msg]     Use a custom commit message when creating the publish commit--repo-version          Specify repo version to publish--force-publish         Force publish for the specified packages (comma-separated)                        or all packages using *                        (skips the git diff check for changed packages)</code></pre><p>only affects ‘run’, ‘exec’, ‘clean’, ‘ls’ and ‘bootstrap’ commands</p><pre><code>--scope [glob]          Restricts the scope to package names matching the given glob--ignore [glob]         Ignores packages with names matching the given glob</code></pre><p>only affects ‘run’ command</p><pre><code>--stream                Stream output with lines prefixed by package (only &apos;run&apos;)</code></pre><p>only affects run, exec, publish and bootstrap</p><pre><code>--no-sort               When executing tasks, ignore the dependency ordering of packages</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> lerna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux refresher</title>
      <link href="/2017/04/05/20170405-redux-refresher/"/>
      <url>/2017/04/05/20170405-redux-refresher/</url>
      
        <content type="html"><![CDATA[<h1 id="Redux-Review"><a href="#Redux-Review" class="headerlink" title="Redux Review"></a>Redux Review</h1><h2 id="ramda-assocPath"><a href="#ramda-assocPath" class="headerlink" title="ramda/assocPath"></a>ramda/assocPath</h2><ul><li>provides a cleaner/shorter way to update nested state</li></ul><p>Here we make a state change 3 levels deep with one line.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assocPath &#125; <span class="keyword">from</span> <span class="string">'ramda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1 = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;, <span class="attr">bb</span>: &#123; <span class="attr">cc</span>: <span class="number">22</span> &#125; &#125; &#125;;</span><br><span class="line"><span class="keyword">const</span> o2 = assocPath([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])(<span class="number">42</span>)(o1);</span><br><span class="line"><span class="built_in">console</span>.log(o1 !== o2, o1.a !== o2.a); <span class="comment">// new copies of "changed" objects</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.a.bb === o2.a.bb); <span class="comment">// deep unchanged properties are copied by reference</span></span><br></pre></td></tr></table></figure><h2 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h2><p>redux-thunk solves the following problems</p><ul><li>async actions</li><li>dispatch multiple actions within an action creator</li><li>get access to redux state in an action creator</li></ul><p>Here we handle an async action creator, access state, and call multiple actions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// using redux-thunk middleware</span></span><br><span class="line">fetchDataRequest = createAction(<span class="string">'fetch-data-request'</span>)</span><br><span class="line">fetchDataSuccess = createAction(<span class="string">'fetch-data-success'</span>)</span><br><span class="line">fetchDataFailure = createAction(<span class="string">'fetch-data-failure'</span>)</span><br><span class="line">fetchData = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = getState()</span><br><span class="line">    <span class="keyword">if</span> (state.isLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(fetchDataRequest())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'http://example.com/todos'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(fetchTodosSuccess(json.body)))</span><br><span class="line">      .catch(<span class="function"><span class="params">ex</span> =&gt;</span> dispatch(fetchTodosFailure(ex)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reselect"><a href="#Reselect" class="headerlink" title="Reselect"></a>Reselect</h2><ul><li>Selectors can compute derived data</li><li>Selectors are memoized</li><li>Selectors are composable</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</span><br><span class="line"><span class="keyword">const</span> taxPercentSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.taxPercent</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</span><br><span class="line">  shopItemsSelector,</span><br><span class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taxSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxPercentSelector,</span><br><span class="line">  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> totalSelector = createSelector(</span><br><span class="line">  subtotalSelector,</span><br><span class="line">  taxSelector,</span><br><span class="line">  (subtotal, tax) =&gt; (&#123; <span class="attr">total</span>: subtotal + tax &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exampleState = &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    taxPercent: <span class="number">8</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">value</span>: <span class="number">1.20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(subtotalSelector(exampleState)) <span class="comment">// 2.15</span></span><br><span class="line"><span class="built_in">console</span>.log(taxSelector(exampleState))      <span class="comment">// 0.172</span></span><br><span class="line"><span class="built_in">console</span>.log(totalSelector(exampleState))    <span class="comment">// &#123; total: 2.322 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="How-to-write-redux-tests"><a href="#How-to-write-redux-tests" class="headerlink" title="How to write redux tests"></a>How to write redux tests</h2><p>Look <a href="https://goo.gl/qAFHy3" target="_blank" rel="noopener">here</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goo.gl/G6WE3z" target="_blank" rel="noopener">redux-thunk to dispatch multiple actions from Redux action creators</a></li><li><a href="https://goo.gl/PcpyAb" target="_blank" rel="noopener">redux-thunk to access Redux state in an action creator</a></li><li><a href="https://goo.gl/JSbN2q" target="_blank" rel="noopener">ramda/assocPath for a Cleaner/shorter way to update nested state in Redux</a></li><li><a href="https://goo.gl/cdNhzV" target="_blank" rel="noopener">reselect for computing derived data in an efficent composable way</a></li><li><a href="https://goo.gl/qAFHy3" target="_blank" rel="noopener">How to write redux tests</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>facebook on react performance</title>
      <link href="/2017/03/28/20170328-facebook-react-perf/"/>
      <url>/2017/03/28/20170328-facebook-react-perf/</url>
      
        <content type="html"><![CDATA[<h1 id="Facebook-React-Perfomance"><a href="#Facebook-React-Perfomance" class="headerlink" title="Facebook React Perfomance"></a>Facebook React Perfomance</h1><p>Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.</p><p><strong>Use a production build</strong></p><p>This will perform much better</p><p><strong>Profiling Components with Chrome Timeline</strong></p><p>You can see how it performs</p><p><strong>Avoid Reconciliation</strong></p><p>React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.</p><p><strong><code>shouldComponentUpdate</code> can be used to avoid updating te DOM</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.color !== nextProps.color) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.count !== nextState.count) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        color=&#123;<span class="keyword">this</span>.props.color&#125;</span><br><span class="line">        onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))&#125;&gt;</span><br><span class="line">        Count: &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong><code>React.PureComponent</code> does a shallow-compare</strong></p><p>This does the same thing as the previous code.</p><p>Most of the time, you can use React.PureComponent instead of writing your own shouldComponentUpdate.  <strong>It only does a shallow comparison</strong></p><blockquote><p>you can’t use it if the props or state may have been mutated in a way that a shallow comparison would miss.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GOOD: will only render when count or color changes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        color=&#123;<span class="keyword">this</span>.props.color&#125;</span><br><span class="line">        onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;))&#125;&gt;</span><br><span class="line">        Count: &#123;<span class="keyword">this</span>.state.count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>This can be a problem with more complex data structures. For example, this code does not work correctly:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BROKEN: changing list of words does not render</span></span><br><span class="line"><span class="comment">// because the words array was mutated which </span></span><br><span class="line"><span class="comment">// React.PureComponent sees as equal.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOfWords</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.props.words.join(',')&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordAdder</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      words: [<span class="string">'marklar'</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="comment">// This section is bad style and causes a bug</span></span><br><span class="line">    <span class="keyword">const</span> words = <span class="keyword">this</span>.state.words;</span><br><span class="line">    words.push(<span class="string">'marklar'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">words</span>: words&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</span><br><span class="line">        &lt;ListOfWords words=&#123;<span class="keyword">this</span>.state.words&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>PureComponent will do a shallow comparison. Since this code mutates the words array, the old and new values of this.props.words will compare as equal, even though the actual words in the array have changed. The ListOfWords will thus not update even though it has new words that should be rendered.</p><p><strong>The Power Of Not Mutating Data</strong></p><p>Ways to avoid mutation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateColorMap</span>(<span class="params">colormap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, colormap, &#123;<span class="attr">right</span>: <span class="string">'blue'</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateColorMap</span>(<span class="params">colormap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;...colormap, <span class="attr">right</span>: <span class="string">'blue'</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="When-should-I-use-shouldComponentUpdate"><a href="#When-should-I-use-shouldComponentUpdate" class="headerlink" title="When should I use shouldComponentUpdate?"></a>When should I use <code>shouldComponentUpdate</code>?</h2><p>Will shouldComponentUpdate provide a measurable and perceivable performance improvement?</p><p>If not, don’t use it.</p><ul><li>Adding shouldComponentUpdate will often slow your component down</li><li>React is basically a very clever implementation of shouldComponentUpdate.</li><li>shouldComponentUpdate gains are often insignificant</li><li>Maintaining shouldComponentUpdate is hard</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/wnrjbi" target="_blank" rel="noopener">Optimizing React Performance</a></li><li><a href="https://goo.gl/NBWYm3" target="_blank" rel="noopener">Should I use shouldComponentUpdate?</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lionshare</title>
      <link href="/2017/03/28/20170331-lionshare/"/>
      <url>/2017/03/28/20170331-lionshare/</url>
      
        <content type="html"><![CDATA[<h1 id="lionshare-api"><a href="#lionshare-api" class="headerlink" title="lionshare-api"></a>lionshare-api</h1><h2 id="API-Summary"><a href="#API-Summary" class="headerlink" title="API Summary"></a>API Summary</h2><p>API that powers <a href="https://lionshare.capital" target="_blank" rel="noopener">Lionshare</a> by providing both historical (REST) and realtime time (websocket) cryptocurrency market data. The data is sourced from <a href="https://gdax.com" target="_blank" rel="noopener">GDAX</a>, <a href="https://poloniex.com/" target="_blank" rel="noopener">Poloniex</a>, and <a href="https://coinmarketcap.com/" target="_blank" rel="noopener">Coinmarketcap</a>.</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>Let’s get a feel for what we’re working with:</p><p>Summary of packages:</p><ul><li>babel - transforming</li><li>koa – server and middleware</li><li>websockets – web socket collection</li><li>autobahn – web application messaging protocol</li><li>redis – redis client</li><li>utilities – bluebird-promises, cross-env, dotenv, http-error, iso-fetch</li><li>utilities – ms, now-logs, pm2, safestart, semver</li></ul><p>Directory Structure</p><pre><code>src├── api           // api server├── db            // redis├── exchange      // exchange server├── utils├── ws            // web socket server├── check.js├── index.js└── init.js</code></pre><h2 id="API-Data"><a href="#API-Data" class="headerlink" title="API Data"></a>API Data</h2><h3 id="Prices"><a href="#Prices" class="headerlink" title="Prices"></a>Prices</h3><figure class="highlight json"><figcaption><span>'GET api.lionshare.capital/api/prices?period</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"BTC"</span>: [<span class="number">924.2</span>, <span class="number">924.63</span>, <span class="number">923.82</span>, <span class="number">923.02</span>, <span class="number">924.82</span>, ...],</span><br><span class="line">    <span class="attr">"ETH"</span>: [<span class="number">10.74</span>, <span class="number">10.8</span>, <span class="number">10.79</span>, <span class="number">10.82</span>, <span class="number">10.82</span>, <span class="number">10.84</span>, <span class="number">10.78</span>, ...],</span><br><span class="line">    <span class="attr">"LTC"</span>: [<span class="number">3.88</span>, <span class="number">3.86</span>, <span class="number">3.85</span>, <span class="number">3.85</span>, <span class="number">3.86</span>, <span class="number">3.86</span>, <span class="number">3.84</span>, ...]</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Markets"><a href="#Markets" class="headerlink" title="Markets"></a>Markets</h3><figure class="highlight"><figcaption><span>'GET api.lionshare.capital/api/markets'</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"BTC"</span>: <span class="number">14718750986</span>,</span><br><span class="line">    <span class="attr">"ETH"</span>: <span class="number">943628626</span>,</span><br><span class="line">    <span class="attr">"LTC"</span>: <span class="number">188560718</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><figure class="highlight"><figcaption><span>'GET api/updates?v</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: "https://github.com/lionsharecapital/lionshare-desktop/releases/download/v1.1.0/Lionshare-1.1.0-mac.zip",</span><br><span class="line">  name: "Lionshare 1.1.0",</span><br><span class="line">  notes: "- 💵 New currencies: IOC, SC, SJCX and DCR - ⌨ Keyboard shortcuts for prices and portfolio (Cmd+1/2) - ＄ Fixed formatting for non-US dollar currencies - 🐳 Fixed number formatting for whale users - 🛠 Various bug fixes and improvements ",</span><br><span class="line">  pub_date: "2017-02-06T01:51:06Z"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> framework </tag>
            
            <tag> example </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react performance</title>
      <link href="/2017/03/27/20170327-react-performance/"/>
      <url>/2017/03/27/20170327-react-performance/</url>
      
        <content type="html"><![CDATA[<h1 id="The-gist-of-performance-tuning"><a href="#The-gist-of-performance-tuning" class="headerlink" title="The gist of performance tuning"></a>The gist of performance tuning</h1><h2 id="Do-not-fix-what-isn’t-broken"><a href="#Do-not-fix-what-isn’t-broken" class="headerlink" title="Do not fix what isn’t broken"></a>Do not fix what isn’t broken</h2><p>Premature optimization is the root of all evil.</p><blockquote><p>Only work on optimizing if you can prove that a performance problem exists</p></blockquote><h2 id="Minimize-unnecessary-work"><a href="#Minimize-unnecessary-work" class="headerlink" title="Minimize unnecessary work"></a>Minimize unnecessary work</h2><p>re-rendering  </p><ul><li>sometimes react’s shallow-compare is not enough</li><li>re-rendering should only occur when props change</li></ul><p>shallow-compare</p><ul><li>why shallow-compare the 10k items in the list if you already know the result</li></ul><h2 id="Avoid-re-rendering-components-using-these-techniques"><a href="#Avoid-re-rendering-components-using-these-techniques" class="headerlink" title="Avoid re-rendering components using these techniques:"></a>Avoid re-rendering components using these techniques:</h2><ul><li>memoize from the lodash package</li><li>shouldComponentUpdate lifecycle method</li><li>HOCs from the recompose package</li><li>connect and createSelector from the redux and reselect packages</li></ul><h2 id="Pure-render-Anti-Patterns"><a href="#Pure-render-Anti-Patterns" class="headerlink" title="Pure render Anti-Patterns"></a>Pure render Anti-Patterns</h2><p>Avoid creating new refs in component props because they cause re-render.</p><p>Functions</p><ul><li><p>BAD: bind creates a new ref everytime  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyInput onChange=&#123;this.props.update.bind(this)&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>BAD: anonymous creates a new ref everytime  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyInput onChange=&#123;() =&gt; this.props.update()&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>GOOD: methods refs are constant  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyInput onChange=&#123;this.onChange&#125;/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>Arrays</p><ul><li><p>BAD: a literal array creates a new ref everytime  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SubComponent items=&#123;this.props.items || []&#125;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>GOOD: array constants refs are constant  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SubComponent items=&#123;this.props.items || EMPTY_ARRAY&#125;/&gt;</span><br></pre></td></tr></table></figure></li></ul><p>Objects</p><ul><li><p>BAD: a literal object creates a new ref everytime  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SubComponent style=&#123;&#123;display: &apos;block&apos;&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>GOOD: object constants refs are constant  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;SubComponent style=&#123;MY_STYLES&#125; /&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Avoid-re-rendering-pure-components"><a href="#Avoid-re-rendering-pure-components" class="headerlink" title="Avoid re-rendering pure components"></a>Avoid re-rendering pure components</h1><h2 id="Use-memoize-from-lodash"><a href="#Use-memoize-from-lodash" class="headerlink" title="Use memoize from lodash"></a>Use <code>memoize</code> from <code>lodash</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> memoize <span class="keyword">from</span> <span class="string">'lodash/memoize'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  _render = memoize(<span class="function">(<span class="params">text</span>) =&gt;</span> &lt;div&gt;&#123;text&#125;&lt;<span class="regexp">/div&gt;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123; return _render(this.props.text) &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Returning-false-from-shouldComponentUpdate"><a href="#Returning-false-from-shouldComponentUpdate" class="headerlink" title="Returning false from shouldComponentUpdate"></a>Returning false from <code>shouldComponentUpdate</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PureComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  shouldComponentUpdate() &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Use-the-HOCs-in-Recompose"><a href="#Use-the-HOCs-in-Recompose" class="headerlink" title="Use the HOCs in Recompose"></a>Use the HOCs in <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">Recompose</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this component will re-render only when props change</span></span><br><span class="line">@pure</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">      <span class="comment">///...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this component will re-render only when prop1/prop2 changes</span></span><br><span class="line"><span class="comment">// it will not re-render if prop3 changes</span></span><br><span class="line">@onlyUpdateForKeys([<span class="string">'prop1'</span>, <span class="string">'prop2'</span>])</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">      <span class="comment">///...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if you don't like ES7 decorators you can use them like this:</span></span><br><span class="line">MyComponent = pure(MyComponent)</span><br><span class="line">MyComponent = onlyUpdateForKeys([<span class="string">'prop1'</span>, <span class="string">'prop2'</span>])(MyComponent)</span><br></pre></td></tr></table></figure><h2 id="Use-Redux-and-connect"><a href="#Use-Redux-and-connect" class="headerlink" title="Use Redux and connect"></a>Use <code>Redux</code> and <code>connect</code></h2><p>connect </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// only re-renders when prop1 changes</span></span><br><span class="line"><span class="comment">// comparison is also done using shallowCompare</span></span><br><span class="line">connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    prop1: state.prop1</span><br><span class="line">&#125;))(SomeComponent)</span><br></pre></td></tr></table></figure><p>connect’s <code>gotcha</code> is calculated values </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is ok</span></span><br><span class="line">connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    hasSomething: <span class="keyword">this</span>.prop1 === <span class="number">5</span> <span class="comment">// true===true</span></span><br><span class="line">&#125;))(SomeComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is NOT OK</span></span><br><span class="line"><span class="comment">// computed data is a different object every-time even if props were un-changed</span></span><br><span class="line">connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    computedData: &#123;</span><br><span class="line">        height: state.height,</span><br><span class="line">        width: state.width</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))(SomeComponent)</span><br></pre></td></tr></table></figure><p>Fixing connect’s gotcha with <a href="https://github.com/reactjs/reselect" target="_blank" rel="noopener">reselect</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createSelector&#125; <span class="keyword">from</span> <span class="string">'reselect'</span></span><br><span class="line"><span class="keyword">const</span> selectComputedData = createSelector(</span><br><span class="line">    state =&gt; state.height,</span><br><span class="line">    state =&gt; state.width,</span><br><span class="line">    (height, width) =&gt; (&#123;</span><br><span class="line">        height,</span><br><span class="line">        width</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line">connect(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">    computedData: selectComputedData(state)</span><br><span class="line">&#125;))(SomeComponent)</span><br></pre></td></tr></table></figure><h1 id="Pure-Render-Anti-Pattern"><a href="#Pure-Render-Anti-Pattern" class="headerlink" title="Pure Render Anti-Pattern"></a>Pure Render Anti-Pattern</h1><p>When using a pure component, pay special attention to arrays and functions. <code>Arrays and functions create new refs</code> so it’s up to you to create them only once and not during every render.</p><p>functions </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BAD – renders everytime due to new fn ref</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;MyInput onChange=&#123;this.props.update.bind(this)&#125; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line">// BAD – renders everytime due to new fn ref</span><br><span class="line">render() &#123;</span><br><span class="line">  return &lt;MyInput onChange=&#123;() =&gt; this.props.update()&#125; /&gt;;</span><br><span class="line">&#125;</span><br><span class="line">// GOOD</span><br><span class="line">onChange () &#123;</span><br><span class="line">  this.props.doUpdate()</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line">  return &lt;MyInput onChange=&#123;this.onChange&#125;/&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BAD – if there are no items, SubComponent will render every time!</span></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;SubComponent items=&#123;this.props.items || []&#125;/&gt;</span><br><span class="line">&#125;</span><br><span class="line">// GOOD – This will avoid re-rendering</span><br><span class="line">const EMPTY_ARRAY = []</span><br><span class="line">render() &#123;</span><br><span class="line">    return &lt;SubComponent items=&#123;this.props.items || EMPTY_ARRAY&#125;/&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h1><p>This is a quick summary, but for more info and screen-shots read Benchling’s <a href="http://benchling.engineering/performance-engineering-with-react/" target="_blank" rel="noopener">part-1</a> and <a href="http://benchling.engineering/deep-dive-react-perf-debugging/" target="_blank" rel="noopener">part-2</a> blogs post about React performance engineering.</p><h2 id="Chrome-DevTools-Profiler"><a href="#Chrome-DevTools-Profiler" class="headerlink" title="Chrome DevTools Profiler"></a>Chrome DevTools Profiler</h2><p>Choose the Timeline tab in Chrome DevTools, and record while you perform an action in your application. The timeline will show you how much time the browser spent executing code, and how much time it spent rendering. Rendering here means the time that the browser itself takes to render the DOM on-screen — React render() calls are included in the JS execution time.</p><p>If you are doing Redux, use the slider in ReduxDevTools to repeat and record only the actions suspected to cause a slow re-render.</p><p>If you see that a React function like batchUpdates has a long total-time but short self-time, it means that there may be a performance issues with your React components, perhaps because they are rendering too often.<br>If this is the case we will use ReactPerf.</p><p><strong>React Perf</strong></p><p>Install the React Perf addon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-addons-perf</span><br></pre></td></tr></table></figure><p>Import it into your project and expose it to the global context:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Perf from &apos;react-addons-perf&apos;</span><br><span class="line">window.Perf = Perf</span><br></pre></td></tr></table></figure><p>Once installed in your project, you can use the <a href="https://chrome.google.com/webstore/detail/react-perf/hacmcodfllhbnekmghgdlplbdnahmhmm" target="_blank" rel="noopener">React Perf Chrome Extension</a> to call Perf functions, or issue calls directly from the console.</p><ol><li>Call Perf.start()</li><li>Take some actions in your application. This will be recorded by Perf (use ReduxDevTools slider if possible)</li><li>Call Perf.stop()</li><li>Now that the action has been recorded, you can call 3 useful functions:<br><strong>printInclusive()</strong> — prints how much time is spent in each component<br><strong>printExclusive()</strong> — prints how much time is spent doing rendering for each component (not including componentsWillMount, componentDidMount, props processing…)<br><strong>printWasted()</strong> — prints how much time was wasted rendering components that didn’t actually change (rendering was done only in the VirtualDOM layer, and no changes occurred in the browser DOM).This is the most important function, as it will bring up components that should be pure and instances of the anti-patterns described above.<br><strong>printOperations()</strong> — will print the actual browser DOM manipulation, this is handy only when the browser spends too much time rendering.</li></ol><h2 id="Should-I-try-to-optimize"><a href="#Should-I-try-to-optimize" class="headerlink" title="Should I try to optimize?"></a>Should I try to optimize?</h2><p>react-dom is very fast by itself. You should only try to optimize once you have a problem that you can quantify with React Perf.</p><p>For example, consider a simple component like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Label = <span class="function">(<span class="params">&#123;text&#125;</span>) =&gt;</span> &lt;div className=<span class="string">'label'</span>&gt;&#123;text&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>In this component, text probably never changes. Making it pure feels right, but this probably wont yield any noticeable improvement. Running shallowCompare will make about the same calculations as react-dom would, so by making the component pure you’ve just moved the processing to a different place.</p><p>So in other words…<br>Don’t imagine a future problem, wait till react-dom is not good enough by itself, it usually is.</p><h2 id="Bonus-Tips"><a href="#Bonus-Tips" class="headerlink" title="Bonus Tips"></a>Bonus Tips</h2><ul><li>NODE_DEV=production</li><li>Remove PropType checking with <code>babel-plugin-transform-react-remove-prop-types</code></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>React/Redux Performance Tuning Tips – <a href="https://goo.gl/6DC5A7" target="_blank" rel="noopener">part1</a> – <a href="https://goo.gl/OHYN6E" target="_blank" rel="noopener">part2</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>testing todomvc-redux</title>
      <link href="/2017/03/24/20170324-testing-todomvc-redux/"/>
      <url>/2017/03/24/20170324-testing-todomvc-redux/</url>
      
        <content type="html"><![CDATA[<h2 id="Testing-Philosophy"><a href="#Testing-Philosophy" class="headerlink" title="Testing Philosophy"></a>Testing Philosophy</h2><ul><li>test public interface</li><li>unit tests should only use the unit</li><li>integration tests can test the unit works well with others</li></ul><h2 id="The-Tests"><a href="#The-Tests" class="headerlink" title="The Tests"></a>The Tests</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> TextInput <span class="keyword">from</span> <span class="string">'./TextInput'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    addTodo: PropTypes.func.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSave = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.addTodo(text)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;header className=<span class="string">'header'</span>&gt;</span><br><span class="line">        &lt;h1&gt;todos&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TextInput</span></span><br><span class="line"><span class="regexp">          newTodo</span></span><br><span class="line"><span class="regexp">          handleSave=&#123;this.handleSave&#125;</span></span><br><span class="line"><span class="regexp">          placeholder='What needs to be done?' /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Header Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (8ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when saving with text.length &gt; 0</span><br><span class="line">      ✓ should call addTodo (4ms)</span><br><span class="line">    when saving with text.length = 0</span><br><span class="line">      ✓ should not call addTodo (3ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    TextInput</span><br><span class="line">      ✓ should set newTodo prop to `true` (2ms)</span><br><span class="line">      ✓ should set handleSave prop to `handleSave method` (2ms)</span><br><span class="line">      ✓ should set placeholder prop to `What needs to be done?` (3ms)</span><br></pre></td></tr></table></figure><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED &#125; <span class="keyword">from</span> <span class="string">'../constants/TodoFilters'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FILTER_TITLES = &#123;</span><br><span class="line">  [SHOW_ALL]: <span class="string">'All'</span>,</span><br><span class="line">  [SHOW_ACTIVE]: <span class="string">'Active'</span>,</span><br><span class="line">  [SHOW_COMPLETED]: <span class="string">'Completed'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    completedCount: PropTypes.number.isRequired,</span><br><span class="line">    activeCount: PropTypes.number.isRequired,</span><br><span class="line">    handleSetFilter: PropTypes.func.isRequired,</span><br><span class="line">    filter: PropTypes.string.isRequired,</span><br><span class="line">    clearCompleted: PropTypes.func.isRequired,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderTodoCount () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; activeCount &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> itemWord = activeCount === <span class="number">1</span> ? <span class="string">'item'</span> : <span class="string">'items'</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;span className=<span class="string">'todo-count'</span>&gt;</span><br><span class="line">        &lt;strong&gt;&#123;activeCount || <span class="string">'No'</span>&#125;&lt;<span class="regexp">/strong&gt; &#123;itemWord&#125; left</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderFilterButtons (filter) &#123;</span><br><span class="line">    <span class="keyword">const</span> title = FILTER_TITLES[filter]</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">filter</span>: selectedFilter, handleSetFilter &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;a</span><br><span class="line">        className=&#123;classnames(&#123;<span class="attr">selected</span>: filter === selectedFilter&#125;)&#125;</span><br><span class="line">        style=&#123;&#123;<span class="attr">cursor</span>: <span class="string">'pointer'</span>&#125;&#125;</span><br><span class="line">        onClick=&#123;() =&gt; handleSetFilter(filter)&#125; &gt;</span><br><span class="line">        &#123;title&#125;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  renderClearButton () &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; completedCount, clearCompleted &#125; = this.props</span></span><br><span class="line"><span class="regexp">    if (completedCount) &#123;</span></span><br><span class="line"><span class="regexp">      return (</span></span><br><span class="line"><span class="regexp">        &lt;button className='clear-completed'</span></span><br><span class="line"><span class="regexp">          onClick=&#123;clearCompleted&#125; &gt;</span></span><br><span class="line"><span class="regexp">          Clear completed</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;footer className=<span class="string">'footer'</span>&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.renderTodoCount()&#125;</span><br><span class="line">        &lt;ul className=<span class="string">'filters'</span>&gt;</span><br><span class="line">          &#123;[SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED].map(<span class="function"><span class="params">filter</span> =&gt;</span></span><br><span class="line">            &lt;li key=&#123;filter&#125;&gt;</span><br><span class="line">              &#123;<span class="keyword">this</span>.renderFilterButtons(filter)&#125;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          )&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.renderClearButton()&#125;</span><br><span class="line">      &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Footer Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (36ms)</span><br><span class="line">    when activeCount is 0</span><br><span class="line">      ✓ should render todo count as `No items left` (6ms)</span><br><span class="line">    when activeCount is 1</span><br><span class="line">      ✓ should render todo count as `1 item left` (6ms)</span><br><span class="line">    when activeCount is 2</span><br><span class="line">      ✓ should render todo count as `2 items left` (5ms)</span><br><span class="line">    when completedCount is 0</span><br><span class="line">      ✓ should not render clear-completed button (5ms)</span><br><span class="line">    when completedCount is &gt; 0</span><br><span class="line">      ✓ should render clear-completed button (5ms)</span><br><span class="line">    when filter prop matches filter link</span><br><span class="line">      ✓ should render filter link with class `selected` (7ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when clicking filter link</span><br><span class="line">      ✓ should call handleSetFilter with the correct filter (8ms)</span><br><span class="line">    when clicking clear-completed button</span><br><span class="line">      ✓ should call clearCompleted (5ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    filter links</span><br><span class="line">      ✓ should set onClick prop to `handleSetFilter` (11ms)</span><br><span class="line">    clear-completed button</span><br><span class="line">      ✓ should set onClick prop to `clearCompleted` (7ms)</span><br></pre></td></tr></table></figure><h3 id="MainSection"><a href="#MainSection" class="headerlink" title="MainSection"></a>MainSection</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span></span><br><span class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./TodoItem'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED &#125; <span class="keyword">from</span> <span class="string">'../constants/TodoFilters'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TODO_FILTERS = &#123;</span><br><span class="line">  [SHOW_ALL]: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>,</span><br><span class="line">  [SHOW_ACTIVE]: <span class="function">(<span class="params">todo</span>) =&gt;</span> !todo.completed,</span><br><span class="line">  [SHOW_COMPLETED]: <span class="function">(<span class="params">todo</span>) =&gt;</span> todo.completed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSection</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    todos: PropTypes.array.isRequired,</span><br><span class="line">    actions: PropTypes.object.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    filter: SHOW_ALL</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSetFilter = <span class="function">(<span class="params">filter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;filter&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderCompleteAll (completedCount) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todos, actions &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'checkbox'</span></span><br><span class="line">        className=<span class="string">'toggle-all'</span></span><br><span class="line">        checked=&#123;completedCount === todos.length&#125;</span><br><span class="line">        onChange=&#123;actions.completeAll&#125; /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderFooter (completedCount) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todos, actions &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Footer</span><br><span class="line">        completedCount=&#123;completedCount&#125;</span><br><span class="line">        activeCount=&#123;todos.length - completedCount&#125;</span><br><span class="line">        filter=&#123;<span class="keyword">this</span>.state.filter&#125;</span><br><span class="line">        handleSetFilter=&#123;<span class="keyword">this</span>.handleSetFilter&#125;</span><br><span class="line">        clearCompleted=&#123;actions.clearCompleted&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todos, actions &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123; filter &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> completedCount = todos.reduce(<span class="function">(<span class="params">count, todo</span>) =&gt;</span> todo.completed ? count + <span class="number">1</span> : count, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> filteredTodos = todos.filter(TODO_FILTERS[filter])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;section className=<span class="string">'main'</span>&gt;</span><br><span class="line">        &#123;todos.length ? <span class="keyword">this</span>.renderCompleteAll(completedCount) : <span class="literal">null</span>&#125;</span><br><span class="line">        &lt;ul className=<span class="string">'todo-list'</span>&gt;</span><br><span class="line">          &#123;filteredTodos.map(<span class="function"><span class="params">todo</span> =&gt;</span></span><br><span class="line">            &lt;TodoItem key=&#123;todo.id&#125; todo=&#123;todo&#125; &#123;...actions&#125;/&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &#123;todos.length ? this.renderFooter(completedCount) : null&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>section&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">MainSection Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (17ms)</span><br><span class="line">    ✓ should render filtered todo list for all filters (22ms)</span><br><span class="line">    when we have todos</span><br><span class="line">      ✓ should render toggle-all checkbox (11ms)</span><br><span class="line">      ✓ should render footer (11ms)</span><br><span class="line">    when we have no todos</span><br><span class="line">      ✓ should not render toggle-all checkbox (2ms)</span><br><span class="line">      ✓ should not render footer (2ms)</span><br><span class="line">    when all todos are completed</span><br><span class="line">      ✓ should render toggle-all checkbox checked (9ms)</span><br><span class="line">    when all todos are not completed</span><br><span class="line">      ✓ should render toggle-all checkbox unchecked (9ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when clicking toggle-all</span><br><span class="line">      ✓ should call completeAll (8ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    toggle-all</span><br><span class="line">      ✓ should set onChange prop to `actions.completeAll` (10ms)</span><br><span class="line">      when not all todos are complete</span><br><span class="line">        ✓ should set checked prop to `false` (13ms)</span><br><span class="line">      when all todos are complete</span><br><span class="line">        ✓ should set checked prop to `true` (10ms)</span><br><span class="line">    todo-list-item</span><br><span class="line">      ✓ should set todo prop to `todo` (10ms)</span><br><span class="line">      ✓ should set props for each action (9ms)</span><br><span class="line">    footer</span><br><span class="line">      ✓ should set completedCount prop to `completedCount` (8ms)</span><br><span class="line">      ✓ should set activeCount prop to `activeCount` (9ms)</span><br><span class="line">      ✓ should set filter prop to `state.filter` (12ms)</span><br><span class="line">      ✓ should set handleSetFilter prop to `handleSetFilter method` (10ms)</span><br><span class="line">      ✓ should set clearCompleted prop to `actions.clearCompleted` (8ms)</span><br></pre></td></tr></table></figure><h3 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TextInput</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    handleSave: PropTypes.func.isRequired,</span><br><span class="line">    newTodo: PropTypes.bool,</span><br><span class="line">    editing: PropTypes.bool,</span><br><span class="line">    text: PropTypes.string,</span><br><span class="line">    placeholder: PropTypes.string</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    text: <span class="keyword">this</span>.props.text || <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">text</span>: e.target.value&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleBlur = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.props.newTodo) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.handleSave(e.target.value.trim())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ENTER_KEY = <span class="number">13</span></span><br><span class="line">    <span class="keyword">if</span> (e.which === ENTER_KEY) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.handleSave(e.target.value.trim())</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.newTodo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">text</span>: <span class="string">''</span>&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'text'</span></span><br><span class="line">        className=&#123;classnames(&#123;</span><br><span class="line">          edit: <span class="keyword">this</span>.props.editing,</span><br><span class="line">          <span class="string">'new-todo'</span>: <span class="keyword">this</span>.props.newTodo</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">        placeholder=&#123;<span class="keyword">this</span>.props.placeholder&#125;</span><br><span class="line">        value=&#123;<span class="keyword">this</span>.state.text&#125;</span><br><span class="line">        onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">        onBlur=&#123;<span class="keyword">this</span>.handleBlur&#125;</span><br><span class="line">        onKeyDown=&#123;<span class="keyword">this</span>.handleSubmit&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">TextInput Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (8ms)</span><br><span class="line">    when newTodo prop is true</span><br><span class="line">      ✓ should render with class new-todo (2ms)</span><br><span class="line">    when editing prop is true</span><br><span class="line">      ✓ should render with class edit (2ms)</span><br><span class="line">    when text prop is defined</span><br><span class="line">      ✓ should render with value matching (3ms)</span><br><span class="line">    when text prop is undefined</span><br><span class="line">      ✓ should render with value as an empty string (2ms)</span><br><span class="line">    when placeholder prop is defined</span><br><span class="line">      ✓ should render with placeholder matching (2ms)</span><br><span class="line">    when placeholder prop is undefined</span><br><span class="line">      ✓ should render with placeholder matching (2ms)</span><br><span class="line">  callbacks</span><br><span class="line">    input</span><br><span class="line">      when change event</span><br><span class="line">        ✓ should set input value (3ms)</span><br><span class="line">      when blur event</span><br><span class="line">        when newTodo is false</span><br><span class="line">          ✓ should call handleSave (2ms)</span><br><span class="line">        when newTodo is true</span><br><span class="line">          ✓ should not call handleSave (2ms)</span><br><span class="line">      when keydown event without ENTER key</span><br><span class="line">        ✓ should not call handleSave (2ms)</span><br><span class="line">      when keydown event with ENTER key</span><br><span class="line">        ✓ should call handleSave (2ms)</span><br><span class="line">        when newTodo is true</span><br><span class="line">          ✓ should clear input field (3ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    input</span><br><span class="line">      ✓ should set type prop to `text` (2ms)</span><br><span class="line">      ✓ should set placeholder prop to `placeholder` (2ms)</span><br><span class="line">      ✓ should set onChange prop to `handleChange method` (1ms)</span><br><span class="line">      ✓ should set onBlur prop to `handleBlur method` (2ms)</span><br><span class="line">      ✓ should set onKeyDown prop to `handleSubmit method` (1ms)</span><br><span class="line">      when text prop is defined</span><br><span class="line">        ✓ should set value prop to `text` (2ms)</span><br><span class="line">      when text prop is undefined</span><br><span class="line">        ✓ should set value prop to empty string (2ms)</span><br><span class="line">      when editing prop is true</span><br><span class="line">        ✓ should set class prop to include `edit` (2ms)</span><br><span class="line">      when newTodo prop is true</span><br><span class="line">        ✓ should set class prop to include `new-todo` (4ms)</span><br></pre></td></tr></table></figure><h3 id="TodoItem"><a href="#TodoItem" class="headerlink" title="TodoItem"></a>TodoItem</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> TextInput <span class="keyword">from</span> <span class="string">'./TextInput'</span></span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">'classnames'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    todo: PropTypes.object.isRequired,</span><br><span class="line">    completeTodo: PropTypes.func.isRequired,</span><br><span class="line">    editTodo: PropTypes.func.isRequired,</span><br><span class="line">    deleteTodo: PropTypes.func.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    editing: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDoubleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">editing</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSave = <span class="function">(<span class="params">id, text</span>) =&gt;</span> &#123;</span><br><span class="line">    (text.length)</span><br><span class="line">      ? <span class="keyword">this</span>.props.editTodo(&#123;id, text&#125;)</span><br><span class="line">      : <span class="keyword">this</span>.props.deleteTodo(id)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">editing</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getTodoElement () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todo, completeTodo, deleteTodo &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.editing) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;TextInput</span><br><span class="line">          text=&#123;todo.text&#125;</span><br><span class="line">          editing=&#123;<span class="keyword">this</span>.state.editing&#125;</span><br><span class="line">          handleSave=&#123;(text) =&gt; <span class="keyword">this</span>.handleSave(todo.id, text)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">'view'</span>&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            type=<span class="string">'checkbox'</span></span><br><span class="line">            className=<span class="string">'toggle'</span></span><br><span class="line">            checked=&#123;todo.completed&#125;</span><br><span class="line">            onChange=&#123;() =&gt; completeTodo(todo.id)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;label onDoubleClick=&#123;<span class="keyword">this</span>.handleDoubleClick&#125;&gt;</span><br><span class="line">            &#123;todo.text&#125;</span><br><span class="line">          &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button className='destroy'</span></span><br><span class="line"><span class="regexp">            onClick=&#123;() =&gt; deleteTodo(todo.id)&#125; /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render () &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;li className=&#123;classnames(&#123;</span></span><br><span class="line"><span class="regexp">        editing: this.state.editing,</span></span><br><span class="line"><span class="regexp">        completed: this.props.todo.completed</span></span><br><span class="line"><span class="regexp">      &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.getTodoElement()&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">TodoItem Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (12ms)</span><br><span class="line">    when in edit-mode</span><br><span class="line">      ✓ should render todo in edit mode (7ms)</span><br><span class="line">      ✓ should render li with class &quot;editing&quot; (4ms)</span><br><span class="line">    when in view mode</span><br><span class="line">      ✓ should render todo in view mode (9ms)</span><br><span class="line">    when the todo is complete</span><br><span class="line">      ✓ should render li with class &quot;completed&quot; (4ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when in edit mode</span><br><span class="line">      when saving with text.length &gt; 0</span><br><span class="line">        ✓ should call editTodo and exit edit mode (8ms)</span><br><span class="line">      when saving with text.length = 0</span><br><span class="line">        ✓ should call deleteTodo and exit edit mode (7ms)</span><br><span class="line">    when in view mode</span><br><span class="line">      when toggle is clicked</span><br><span class="line">        ✓ should call completeTodo (3ms)</span><br><span class="line">      when label is doubleclicked</span><br><span class="line">        ✓ should enter edit mode (4ms)</span><br><span class="line">      when delete button is clicked</span><br><span class="line">        ✓ should call deleteTodo (3ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    when in edit mode</span><br><span class="line">      TextInput</span><br><span class="line">        ✓ should set text prop to `todo.text` (4ms)</span><br><span class="line">        ✓ should set editing prop to `state.editing` (5ms)</span><br><span class="line">        ✓ should set handleSave prop to an anonymous function (4ms)</span><br><span class="line">    when in view mode</span><br><span class="line">      todo complete toggle</span><br><span class="line">        ✓ should set type prop to `checkbox` (4ms)</span><br><span class="line">        ✓ should set checked prop to `todo.completed` (4ms)</span><br><span class="line">        ✓ should set onChange prop to an anonymous function (3ms)</span><br><span class="line">      todo label</span><br><span class="line">        ✓ should set onDoubleClick prop to `handleDoubleClick method` (4ms)</span><br><span class="line">      todo destroy button</span><br><span class="line">        ✓ should set onClick prop to an anonymous function (2ms)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>testing todomvc-mobx</title>
      <link href="/2017/03/24/20170324-testing-todomvc-mobx/"/>
      <url>/2017/03/24/20170324-testing-todomvc-mobx/</url>
      
        <content type="html"><![CDATA[<h2 id="Testing-Philosophy"><a href="#Testing-Philosophy" class="headerlink" title="Testing Philosophy"></a>Testing Philosophy</h2><ul><li>test public interface</li><li>unit tests should only use the unit</li><li>integration tests can test the unit works well with others</li></ul><h2 id="The-Tests"><a href="#The-Tests" class="headerlink" title="The Tests"></a>The Tests</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span></span><br><span class="line"><span class="keyword">import</span> Entry <span class="keyword">from</span> <span class="string">'./Entry'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    addTodo: React.PropTypes.func.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSave = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.addTodo(text)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;header className=<span class="string">"header"</span>&gt;</span><br><span class="line">        &lt;h1&gt;todos&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Entry handleSave=&#123;this.handleSave&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default observer(Header)</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Header Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should contain correct children (28ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when saving text having length &gt; 0</span><br><span class="line">      ✓ should call addTodo with text (5ms)</span><br><span class="line">    when saving text having length = 0</span><br><span class="line">      ✓ should not call addTodo (2ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    Entry component</span><br><span class="line">      ✓ should set handleSave prop to `handleSave method` (4ms)</span><br></pre></td></tr></table></figure><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ENTER_KEY = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    handleSave: React.PropTypes.func.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'text'</span></span><br><span class="line">        ref=<span class="string">'newField'</span></span><br><span class="line">        className=<span class="string">'new-todo'</span></span><br><span class="line">        placeholder=<span class="string">'What needs to be done?'</span></span><br><span class="line">        onKeyDown=&#123;<span class="keyword">this</span>.handleKeyDown&#125;</span><br><span class="line">        autoFocus=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleKeyDown = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.which === ENTER_KEY) &#123;</span><br><span class="line">      event.preventDefault()</span><br><span class="line">      <span class="keyword">this</span>.props.handleSave(event.target.value.trim())</span><br><span class="line">      <span class="keyword">const</span> node = ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.newField)</span><br><span class="line">      node.value = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Entry Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (8ms)</span><br><span class="line">    when onKeyDown event with ENTER key</span><br><span class="line">      ✓ should clear input component value (4ms)</span><br><span class="line">  callbacks</span><br><span class="line">    input component</span><br><span class="line">      when onKeyDown event with ENTER key</span><br><span class="line">        ✓ should call handleSave callback (3ms)</span><br><span class="line">      when onKeyDown event without ENTER key</span><br><span class="line">        ✓ should not call handleSave callback (3ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    input component</span><br><span class="line">      ✓ should set type prop to `text` (3ms)</span><br><span class="line">      ✓ should set placeholder prop to `What needs to be done?` (2ms)</span><br><span class="line">      ✓ should set onKeyDown prop to `handleKeyDown method` (3ms)</span><br></pre></td></tr></table></figure><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Footer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    todo: React.PropTypes.object.isRequired,</span><br><span class="line">    view: React.PropTypes.object.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todo, view &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">if</span> (todo.todos.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;footer className=<span class="string">'footer'</span> data-spec=<span class="string">'footer'</span>&gt;</span><br><span class="line">        &lt;span className=<span class="string">'todo-count'</span>&gt;</span><br><span class="line">          &lt;strong&gt;&#123;todo.activeTodoCount || <span class="string">'No'</span>&#125;&lt;<span class="regexp">/strong&gt; &#123;todo.activeTodoWord&#125; left</span></span><br><span class="line"><span class="regexp">        &lt;/</span>span&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul className=<span class="string">'filters'</span>&gt;</span><br><span class="line">          &#123;view.todoFilters.map(<span class="keyword">this</span>.renderFilterLink)&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#123; !!todo.completedCount &amp;&amp;</span></span><br><span class="line"><span class="regexp">          &lt;button</span></span><br><span class="line"><span class="regexp">            className='clear-completed'</span></span><br><span class="line"><span class="regexp">            onClick=&#123;todo.clearCompleted&#125;&gt;</span></span><br><span class="line"><span class="regexp">            Clear completed</span></span><br><span class="line"><span class="regexp">          &lt;/</span>button&gt;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/footer&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  renderFilterLink = (filter, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; todoFilter &#125; = this.props.view</span></span><br><span class="line"><span class="regexp">    const url = ['', 'active', 'completed'][index]</span></span><br><span class="line"><span class="regexp">    const caption = ['All', 'Active', 'Completed'][index]</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;li key=&#123;index&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;a href=&#123;'#/</span><span class="string">' + url&#125;</span></span><br><span class="line"><span class="string">          className=&#123;filter ===  todoFilter ? '</span>selected<span class="string">' : '</span><span class="string">'&#125;&gt;</span></span><br><span class="line"><span class="string">          &#123;caption&#125;</span></span><br><span class="line"><span class="string">        &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &#123;'</span> <span class="string">'&#125;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Footer Component</span><br><span class="line">  rendering</span><br><span class="line">    when todos exist</span><br><span class="line">      ✓ should contain correct children (19ms)</span><br><span class="line">    when no todos exist</span><br><span class="line">      ✓ should not render (4ms)</span><br><span class="line">    when activeTodoCount is 0</span><br><span class="line">      ✓ should render todo count as &quot;No items left&quot; (6ms)</span><br><span class="line">    when activeCount is 1</span><br><span class="line">      ✓ should render todo count as &quot;1 item left&quot; (5ms)</span><br><span class="line">    when activeCount is 2</span><br><span class="line">      ✓ should render todo count as &quot;2 items left&quot; (4ms)</span><br><span class="line">    when completedCount is 0</span><br><span class="line">      ✓ should not render clear-completed button (7ms)</span><br><span class="line">    when completedCount is &gt; 0</span><br><span class="line">      ✓ should render clear-completed button (5ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when clicking on filter link</span><br><span class="line">      ✓ should navigate to the correct url (4ms)</span><br><span class="line">    when clicking on clear-completed button</span><br><span class="line">      ✓ should call clearCompleted (11ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    filter link</span><br><span class="line">      when filter link matches todoFilter</span><br><span class="line">        ✓ should set className prop to `selected` (6ms)</span><br><span class="line">    clear-completed button</span><br><span class="line">      ✓ should set onClick prop to `todo.clearCompleted` (5ms)</span><br></pre></td></tr></table></figure><h3 id="MainSection"><a href="#MainSection" class="headerlink" title="MainSection"></a>MainSection</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./TodoItem'</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MainSection</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    todo: React.PropTypes.object.isRequired,</span><br><span class="line">    view: React.PropTypes.object.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todo, view &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">if</span> (todo.todos.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;section className=<span class="string">"main"</span>&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"checkbox"</span></span><br><span class="line">          className=<span class="string">"toggle-all"</span></span><br><span class="line">          checked=&#123;todo.activeTodoCount === <span class="number">0</span>&#125;</span><br><span class="line">          onChange=&#123;(e) =&gt; todo.toggleAll(e.target.checked)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;ul className=<span class="string">"todo-list"</span>&gt;</span><br><span class="line">          &#123;todo.visibleTodos.map(<span class="function"><span class="params">todo</span> =&gt;</span></span><br><span class="line">            &lt;TodoItem</span><br><span class="line">              key=&#123;todo.id&#125;</span><br><span class="line">              todo=&#123;todo&#125;</span><br><span class="line">              view=&#123;view&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>section&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">MainSection Component</span><br><span class="line">  rendering</span><br><span class="line">    ✓ should render correctly (11ms)</span><br><span class="line">    when we have todos</span><br><span class="line">      ✓ should render toggle-all checkbox (7ms)</span><br><span class="line">    when we have no todos</span><br><span class="line">      ✓ should not render toggle-all checkbox (2ms)</span><br><span class="line">    when all todos are completed</span><br><span class="line">      ✓ should render toggle-all checkbox checked (5ms)</span><br><span class="line">    when all todos are not completed</span><br><span class="line">      ✓ should render toggle-all checkbox not checked (5ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when clicking toggle-all</span><br><span class="line">      ✓ should call toggleAll (9ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    toggle-all</span><br><span class="line">      ✓ should set onChange prop to `toggleAll` (6ms)</span><br><span class="line">      when todos are complete</span><br><span class="line">        ✓ should set checked prop to `true`  (5ms)</span><br><span class="line">      when todos are not complete</span><br><span class="line">        ✓ should set checked prop to `false` (6ms)</span><br><span class="line">    TodoItem of todo-list</span><br><span class="line">      ✓ should set todo prop to `todo` (7ms)</span><br><span class="line">      ✓ should set view prop to `view` (6ms)</span><br></pre></td></tr></table></figure><h3 id="TodoItem"><a href="#TodoItem" class="headerlink" title="TodoItem"></a>TodoItem</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;observable&#125; <span class="keyword">from</span> <span class="string">'mobx'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ESCAPE_KEY = <span class="number">27</span></span><br><span class="line"><span class="keyword">const</span> ENTER_KEY = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    todo: React.PropTypes.object.isRequired,</span><br><span class="line">    view: React.PropTypes.object.isRequired</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @observable editText = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  renderEditMode = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;input</span><br><span class="line">      type=<span class="string">'text'</span></span><br><span class="line">      ref=<span class="string">'editField'</span></span><br><span class="line">      className=<span class="string">'edit'</span></span><br><span class="line">      value=&#123;<span class="keyword">this</span>.editText&#125;</span><br><span class="line">      onBlur=&#123;<span class="keyword">this</span>.handleSubmit&#125;</span><br><span class="line">      onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">      onKeyDown=&#123;<span class="keyword">this</span>.handleKeyDown&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  )</span><br><span class="line">  renderViewMode = <span class="function">(<span class="params">todo</span>) =&gt;</span> (</span><br><span class="line">    &lt;div className=<span class="string">'view'</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'checkbox'</span></span><br><span class="line">        className=<span class="string">'toggle'</span></span><br><span class="line">        checked=&#123;todo.completed&#125;</span><br><span class="line">        onChange=&#123;todo.toggle&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;label onDoubleClick=&#123;<span class="keyword">this</span>.handleDoubleClick&#125;&gt;</span><br><span class="line">        &#123;todo.title&#125;</span><br><span class="line">      &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button className='destroy' onClick=&#123;todo.destroy&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    const &#123;todo, view&#125; = this.props</span></span><br><span class="line"><span class="regexp">    const isEditing = view.todoBeingEdited === todo</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;li className=&#123;[</span></span><br><span class="line"><span class="regexp">        todo.completed ? 'completed' : '',</span></span><br><span class="line"><span class="regexp">        isEditing ? 'editing' : ''</span></span><br><span class="line"><span class="regexp">      ].join(' ')&#125;&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">        &#123; isEditing </span></span><br><span class="line"><span class="regexp">          ? this.renderEditMode()</span></span><br><span class="line"><span class="regexp">          : this.renderViewMode(todo)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDoubleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> todo = <span class="keyword">this</span>.props.todo</span><br><span class="line">    <span class="keyword">this</span>.props.view.todoBeingEdited = todo</span><br><span class="line">    <span class="keyword">this</span>.editText = todo.title</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; todo, view &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> val = event.target.value.trim()</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">      todo.setTitle(val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      todo.destroy()</span><br><span class="line">    &#125;</span><br><span class="line">    view.todoBeingEdited = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleKeyDown = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.which === ESCAPE_KEY) &#123;</span><br><span class="line">      <span class="keyword">this</span>.editText = <span class="keyword">this</span>.props.todo.title</span><br><span class="line">      <span class="keyword">this</span>.props.view.todoBeingEdited = <span class="literal">null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.which === ENTER_KEY) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleSubmit(event)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.editText = event.target.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">TodoItem Component</span><br><span class="line">  rendering</span><br><span class="line">    when in view mode</span><br><span class="line">      ✓ should render correctly (12ms)</span><br><span class="line">    when in edit mode</span><br><span class="line">      ✓ should render correctly (8ms)</span><br><span class="line">    when todo is not double-clicked</span><br><span class="line">      ✓ should render without className `editing` (3ms)</span><br><span class="line">    when todo is double-clicked</span><br><span class="line">      ✓ should render with className `editing` (6ms)</span><br><span class="line">    when todo is complete</span><br><span class="line">      ✓ should render li with class &quot;completed&quot; (4ms)</span><br><span class="line">  callbacks</span><br><span class="line">    when in edit mode</span><br><span class="line">      when onBlur and text.length &gt; 0</span><br><span class="line">        ✓ should call setTitle callback and exit edit mode (9ms)</span><br><span class="line">      when onBlur and text.length = 0</span><br><span class="line">        ✓ should call deleteTodo and exit edit mode (6ms)</span><br><span class="line">      when onChange</span><br><span class="line">        ✓ should call handleChange method (6ms)</span><br><span class="line">      when onKeyDown with ENTER key</span><br><span class="line">        ✓ should call handleKeyDown and handleSubmit methods (7ms)</span><br><span class="line">      when onKeyDown with ESC key</span><br><span class="line">        ✓ should call handleChange method (9ms)</span><br><span class="line">      when onKeyDown without ESC or ENTER key</span><br><span class="line">        ✓ should call handleChange method but not execute anything (7ms)</span><br><span class="line">    when in view mode</span><br><span class="line">      when clicking toggle checkbox</span><br><span class="line">        ✓ should call toggle callback (5ms)</span><br><span class="line">      when doubleclicking label</span><br><span class="line">        ✓ should enter edit mode (5ms)</span><br><span class="line">      when clicking delete button</span><br><span class="line">        ✓ should call deleteTodo (5ms)</span><br><span class="line">  props passed to components</span><br><span class="line">    toggle checkbox</span><br><span class="line">      ✓ should set type prop to `checkbox` (3ms)</span><br><span class="line">      ✓ should set checked prop to `todo.completed` (3ms)</span><br><span class="line">      ✓ should set onChange prop to `todo.toggle` (4ms)</span><br><span class="line">    label</span><br><span class="line">      ✓ should set onDoubleClick prop to `handleDoubleClick method` (4ms)</span><br><span class="line">    destroy button</span><br><span class="line">      ✓ should set onClick prop to `destroy` (3ms)</span><br><span class="line">    edit field</span><br><span class="line">      ✓ should set value prop to `todo.title` (7ms)</span><br><span class="line">      ✓ should set onBlur prop to `handleSubmit method` (6ms)</span><br><span class="line">      ✓ should set onChange prop to `handleChange method` (6ms)</span><br><span class="line">      ✓ should set onKeyDown prop to `handleKeyDown method` (5ms)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>magic of mobx</title>
      <link href="/2017/03/23/20170323-magic-of-mobx/"/>
      <url>/2017/03/23/20170323-magic-of-mobx/</url>
      
        <content type="html"><![CDATA[<ul><li>source: <a href="https://goo.gl/A2e2FN" target="_blank" rel="noopener">Making React reactive: the pursuit of high performing, easily maintainable React apps</a></li></ul><h2 id="How-to-build-blazing-fast-react-apps"><a href="#How-to-build-blazing-fast-react-apps" class="headerlink" title="How to build blazing fast react apps?"></a>How to build blazing fast react apps?</h2><ul><li>draw thousands of inter-related objects with updates and repaints happening in less than 40ms.</li><li>react alone will not do the trick.</li><li>the search for an elegant solution led to Observables</li><li>with the model being Observable and the React components being Observers, <code>only relevant parts of the UI get updated</code>.</li></ul><h2 id="I-want-proof"><a href="#I-want-proof" class="headerlink" title="I want proof!!"></a>I want proof!!</h2><ul><li><a href="https://goo.gl/cVihvw" target="_blank" rel="noopener">Cart with Observables</a></li><li><a href="https://goo.gl/MlZdQN" target="_blank" rel="noopener">Cart without Observables</a></li></ul><p><img src="http://i.imgur.com/cpZx1Lu.png" alt=""></p><p>Let’s define our data model:</p><blockquote><p>Open bullets represent the derived data that should be updated if some other data changes and so should its representation in the UI.</p></blockquote><p><img src="http://i.imgur.com/hFMjgoG.png" alt=""></p><p>So even in this simple model a lot of data is flowing around, and a lot of UI updates are required when stuff changes.</p><p>Let’s compile a list of relations</p><ul><li>article.price changes entry prices</li><li>article.price changes cart total</li><li>cart.articles changes cart.total</li><li>article.name changes article view</li><li>article.name changes entry.name</li><li>etc, etc, etc</li></ul><p>The gist of our problem</p><ul><li>As a developer we don’t want to track this information.</li><li>rendering will become slow if we re-render on every data change.</li></ul><h2 id="It’s-more-fun-if-we-make-it"><a href="#It’s-more-fun-if-we-make-it" class="headerlink" title="It’s more fun if we make it ;)"></a>It’s more fun if we make it ;)</h2><p><strong>Write our <a href="">data model</a> and our <a href="">user interface</a></strong></p><ul><li>CartView renders cart.total and cart.entries using CartEntryView</li><li>An id is provided for each entry</li><li>The remove button drops the entry.amount by one and removes the entry when it hits zero</li></ul><p><strong>Add an observer to each component to settle all the requirements</strong></p><p>The observer function did two things:</p><ul><li>changes the render function into a <code>computed</code> function</li><li>the component was registered as an observer of that function which forces a re-render when it becomes stale.</li></ul><p><strong>When observable data changes only the relevant parts of the UI are updated</strong></p><p>These tests confirm that a minimal amount of re-rendering occurs:</p><blockquote><p>The highlighted area shows the components that re-rendered.<br>The number on the end is an id.</p></blockquote><ul><li><p>rename an article not in the shopping cart</p><pre><code>Rendering ArticleView 2</code></pre></li><li><p>add an article to the cart then rename it</p><pre><code>Rendering ArticleView 1Rendering CartEntryView 4</code></pre></li><li><p>add an article to the cart the update its price</p><pre><code>Rendering ArticleView 2Rendering CartTotalView</code></pre></li><li><p>remove it from the cart and update the price again</p><pre><code>Rendering ArticleView 1</code></pre></li></ul><p><strong>no need to explicitly re-render the children of a component</strong></p><p>Each component tracks its own dependencies.</p><p>The cart.total can change without re-rendering the cart.entries</p><ul><li><p>add an article to the cart the update its price</p><pre><code>Rendering ArticleView 2Rendering CartTotalView</code></pre></li></ul><h2 id="The-Numbers"><a href="#The-Numbers" class="headerlink" title="The Numbers"></a>The Numbers</h2><p><img src="http://i.imgur.com/o0O4VvY.png" alt=""></p><p><img src="http://i.imgur.com/5ekmdcS.png" alt=""></p><ul><li>Creating: behaves very similar.</li><li>Updating: Instead of re-rendering 20,006 components, only 31 components are re-rendered</li></ul><p><strong>How to Optimize even more</strong></p><p>Separating the CartView into CartView and CartTotalView saves us from checking if we need to re-rendering the 10k cart-view items. This drops rendering updates to 60ms!</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul><li>Order of magnitude faster without compromising the maintainability of the code</li><li>Optimizing using ImmutableJS would render very fast but much more work on the data model</li></ul><p>Also immutable data does not help you to keep your calculated values up to date. So with immutable data, changing the name of an article would really fast re-render the ArticleView, but still not invalidate any existing CartEntryViews that refers to the same article.</p><p>I strongly advise using controllers or action dispatchers as an abstraction around updating your model data to keep the separation of concerns clear in your project.</p><p>Leave the <strong>hard work</strong> of figuring out when and how to update the UI as fast as possible to React and Observables, and focus on the interesting parts of coding :).</p>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>testing review</title>
      <link href="/2017/03/21/20170314-testing-review/"/>
      <url>/2017/03/21/20170314-testing-review/</url>
      
        <content type="html"><![CDATA[<p>This is a succint version of <a href="https://goo.gl/cl4b1P" target="_blank" rel="noopener">Eventbrite React Testing Best Practices</a></p><h1 id="Eventbrite-React-Testing-Best-Practices"><a href="#Eventbrite-React-Testing-Best-Practices" class="headerlink" title="Eventbrite React Testing Best Practices"></a>Eventbrite React Testing Best Practices</h1><h2 id="Testing-environment"><a href="#Testing-environment" class="headerlink" title="Testing environment"></a>Testing environment</h2><ul><li>jest, enzyme, jest-enzyme</li></ul><h2 id="Testing-philosophy"><a href="#Testing-philosophy" class="headerlink" title="Testing philosophy"></a>Testing philosophy</h2><p>Test the public interface.</p><ul><li>public input: props</li><li>public output: elements rendered, callbacks invoked.</li></ul><p>render with various prop configs, assert what is rendered and called back.</p><h2 id="Writing-a-test-case"><a href="#Writing-a-test-case" class="headerlink" title="Writing a test case"></a>Writing a test case</h2><ul><li>use arrow functions</li><li>no beforeEach afterEach</li></ul><h2 id="Finding-nodes"><a href="#Finding-nodes" class="headerlink" title="Finding nodes"></a>Finding nodes</h2><ul><li>sprinkle: data-spec=”reset-button”</li><li>use <code>getSpecWrapper</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/unitTest.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DATA_SPEC_ATTRIBUTE_NAME = <span class="string">'data-spec'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Finds all instances of components in the rendered `componentWrapper` that are DOM components</span></span><br><span class="line"><span class="comment">* with the `data-spec` attribute matching `name`.</span></span><br><span class="line"><span class="comment">* @param &#123;ReactWrapper&#125; componentWrapper - Rendered componentWrapper (result of mount, shallow, or render)</span></span><br><span class="line"><span class="comment">* @param &#123;string&#125; specName - Name of `data-spec` attribute value to find</span></span><br><span class="line"><span class="comment">* @param &#123;string|Function&#125; typeFilter - (Optional) Expected type of the wrappers (defaults to all HTML tags)</span></span><br><span class="line"><span class="comment">* @returns &#123;ReactComponent[]&#125; All matching DOM components</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSpecWrapper = <span class="function">(<span class="params">componentWrapper, specName, typeFilter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> specWrappers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!typeFilter) &#123;</span><br><span class="line">        specWrappers = componentWrapper.find(<span class="string">`[<span class="subst">$&#123;DATA_SPEC_ATTRIBUTE_NAME&#125;</span>="<span class="subst">$&#123;specName&#125;</span>"]`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        specWrappers = componentWrapper.findWhere(<span class="function">(<span class="params">wrapper</span>) =&gt;</span> (</span><br><span class="line">            wrapper.prop(DATA_SPEC_ATTRIBUTE_NAME) === specName &amp;&amp; wrapper.type() === typeFilter</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> specWrappers;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Finding-components"><a href="#Finding-components" class="headerlink" title="Finding components"></a>Finding components</h2><ul><li>use <code>getSpecWrapper</code></li></ul><p>The key in the “good” example is the third parameter passed to getSpecWrapper. By default getSpecWrapper will try to find a node with the specified data-spec. But if you specify the component class (Checkbox in this case), it’ll return a reference to the component wrapper.</p><h2 id="Testing-existence"><a href="#Testing-existence" class="headerlink" title="Testing existence"></a>Testing existence</h2><p><strong>testing node existence</strong></p><p>To find nodes you use the <code>getSpecWrapper</code> helper and use the <code>jest-enzyme</code> <code>.toBePresent</code> and <code>.toBeEmpty</code> assertion matchers:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">Spinner</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// assert that node exists (doesn't throw an Error)</span></span><br><span class="line"><span class="xml">expect(wrapper).toBePresent();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// assert that node doesn't exist (throws an Error)</span></span><br><span class="line"><span class="xml">expect(wrapper).toBeEmpty();</span></span><br></pre></td></tr></table></figure><p><strong>testing component existence</strong></p><p>Typically, you’ll find components by using Enzyme’s <code>find</code> method which returns an an Enzyme ReactWrapper and the <code>jest-enzyme</code> <code>.toBePresent</code> and <code>.toBeEmpty</code> assertion matchers:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">Select</span> <span class="attr">values</span>=<span class="string">&#123;dummyValues&#125;</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">let selectOptionWrappers = wrapper.find(SelectOption);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// assert that there are no found nodes</span></span><br><span class="line"><span class="xml">expect(selectOptionWrappers).toBeEmpty();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// assert that there are more than zero found nodes</span></span><br><span class="line"><span class="xml">expect(selectOptionWrappers).toBePresent();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// assert there to be a specific number of found nodes</span></span><br><span class="line"><span class="xml">expect(selectOptionWrappers).toHaveLength(dummyValues.length);</span></span><br></pre></td></tr></table></figure><h2 id="Assertion-helpers"><a href="#Assertion-helpers" class="headerlink" title="Assertion helpers"></a>Assertion helpers</h2><p>Whenever possible, use jest-enzyme assertion helpers in favor of the normal assertion helpers that just come with jest:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// good (leverages `.prop` from `jest-enzyme`)</span><br><span class="line">it(&apos;should render a checked checkbox if it is selected&apos;, () =&gt; &#123;</span><br><span class="line">    let wrapper = mount(&lt;Component isSelected=&#123;true&#125; /&gt;);</span><br><span class="line">    let checkboxWrapper = wrapper.find(Checkbox);</span><br><span class="line"></span><br><span class="line">    expect(checkboxWrapper).toHaveProp(&apos;isChecked&apos;, true);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Using good assertions improves error messages!!</p></blockquote><h2 id="Types-of-renderers"><a href="#Types-of-renderers" class="headerlink" title="Types of renderers"></a>Types of renderers</h2><blockquote><p>Eventbrite uses <code>mount</code> for rendering all components when testing.</p></blockquote><ul><li>The win is consistency</li><li>The lose is performance</li></ul><p>Eventbrite understands the performance impact.</p><h2 id="Testing-render"><a href="#Testing-render" class="headerlink" title="Testing render"></a>Testing render</h2><ul><li>Do not test the child components (they already have tests)</li></ul><p>The easiest way to test HTML elements and their attributes, is to use Jest snapshots:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">it(<span class="string">'includes the disabled CSS class when `isDisabled` is `true`'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">Spinner</span> <span class="attr">isDisabled</span>=<span class="string">&#123;true&#125;</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // assert that the current render matches the saved snapshot</span></span><br><span class="line"><span class="xml">    expect(wrapper).toMatchSnapshot();</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>While snapshot testing is very simple, that simplicity comes at a cost. The initial snapshot file is generated the first time the test is run, so you need to visually inspect that the generated snapshot is correct, otherwise you could be saving a bad test case. Furthermore, the snapshot does not convey the intent of the test so you need to have a very verbose/descriptive test case title (the it()).</p><p>Also because we use <code>mount</code> for rendering, the entire component tree is in the snapshot, including any helper components, higher-order components, etc. The larger the component, the larger a snapshot will be.  As such, you should use snapshot testing sparingly and instead test that child components are rendered and get the appropriate props.</p><p>Lastly, since snapshot files are saved to disk, running the tests are slower than traditional means of unit testing.</p><h2 id="Testing-events"><a href="#Testing-events" class="headerlink" title="Testing events"></a>Testing events</h2><p>As mentioned in our <code>Testing philosophy</code>, part of the output of your component are the callback handlers it invokes. These event callbacks are functions passed as props to your component and need to be tested.</p><ul><li>trigger the events that in turn will invoke the callback handler</li></ul><p><strong>test events triggered by the DOM</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'properly fires `onChange` when input changes'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> onChange = jest.fn();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pass mock function to component as `onChange` prop</span></span><br><span class="line">    <span class="keyword">let</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">    let inputWrapper = getSpecWrapper(wrapper, 'text-input');</span></span><br><span class="line"><span class="xml">    let inputValue = 'Here is a value';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // Create a fake event with the properties needed by the component</span></span><br><span class="line"><span class="xml">    let mockEvent = &#123;</span></span><br><span class="line"><span class="xml">        target: &#123;</span></span><br><span class="line"><span class="xml">            value: inputValue</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // simulate onChange event on input DOM</span></span><br><span class="line"><span class="xml">    inputWrapper.simulate('change', mockEvent);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // assert that the stubbed function was called with the</span></span><br><span class="line"><span class="xml">    // expected value</span></span><br><span class="line"><span class="xml">    expect(onChange).toHaveBeenCalledWith(inputValue);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p><strong>Testing events triggered by child components</strong></p><p>More than likely instead of your component adding event handlers directly to DOM nodes, it will be adding handlers to child components. Therefore instead of simulating a DOM event, simulate the child component’s event handler being invoked.</p><p>Let’s say you have an <code>AutocompleteField</code> component that has a child <code>TextInput</code>. The <code>AutocompleteField</code> has an <code>onChange</code> prop that is invoked whenever its child <code>TextInput</code>‘s <code>onChange</code> event is invoked. The <code>AutocompleteField</code>‘s <code>onChange</code> prop also passes the current input value. The test case would be set up like:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'properly fires `onChange` when input changes'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> onChange = jest.fn();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pass stubbed function to component as `onChange` prop</span></span><br><span class="line">    <span class="keyword">let</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">AutocompleteField</span> <span class="attr">suggestions</span>=<span class="string">&#123;[]&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;onChange&#125;</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">    let textInputWrapper = wrapper.find(TextInput);</span></span><br><span class="line"><span class="xml">    let inputValue = 'Here is a value';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // We don't want to make any assumptions about the markup of `TextInput`. The</span></span><br><span class="line"><span class="xml">    // `AutocompleteField` component handles `onChange` of `TextInput`, so all we need to</span></span><br><span class="line"><span class="xml">    // do is call the prop directly like `TextInput` would and ensure we get the appropriate</span></span><br><span class="line"><span class="xml">    // value</span></span><br><span class="line"><span class="xml">    textInputWrapper.prop('onChange')(inputValue);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // assert that the stubbed function was called with the</span></span><br><span class="line"><span class="xml">    // expected value</span></span><br><span class="line"><span class="xml">    expect(onChange).toHaveBeenCalledWith(inputValue);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>The test case above uses <code>jest.fn()</code> to create a mock function. The mock is passed as the AutocompleteField component’s <code>onChange</code> prop so that we can make assertions on it at the end. After finding a reference to the TextInput, we simulate how TextInput would invoke its <code>onChange</code> callback prop. We get a reference to the prop using Enzyme’s .prop helper and call the function with the <code>inputValue</code>. This exactly how <code>TextInput</code> would call it when its DOM input field changes. However, because we don’t want to make any assumptions about the markup of <code>TextInput</code> we simulate its <code>onChange</code> prop instead of digging into it in order to simulate its DOM.</p><p>Invoking the <code>onChange</code> prop will ultimately call our <code>onChange</code> with the value. Therefore, our assertion is that <code>onChange</code> was not only called, but also called with the expected input value. This assertion leverages the <code>.toHaveBeenCalledWith</code> assertion helper from <code>jest-enzyme</code>.</p><h2 id="Testing-state"><a href="#Testing-state" class="headerlink" title="Testing state"></a>Testing state</h2><ul><li>do not test the state of a component, only the public interface.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good (tests internal state *indirectly* via re-rendered markup)</span></span><br><span class="line">it(<span class="string">'toggles active state when checkbox is toggled'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">Component</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">    let checkboxWrapper = wrapper.find(Checkbox);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // first assert that by default the active class is *not* present</span></span><br><span class="line"><span class="xml">    expect(wrapper).toMatchSnapshot();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // simulate toggling the checkbox on by calling its</span></span><br><span class="line"><span class="xml">    // onChange callback handler passing `true` for</span></span><br><span class="line"><span class="xml">    // checked state</span></span><br><span class="line"><span class="xml">    checkboxWrapper.prop('onChange')(true);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // now assert that the active class *is* present</span></span><br><span class="line"><span class="xml">    expect(wrapper).toMatchSnapshot();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // simulate toggling the checkbox back off</span></span><br><span class="line"><span class="xml">    checkboxWrapper.prop('onChange')(false);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    // finally assert once again that active class is *not*</span></span><br><span class="line"><span class="xml">    // present</span></span><br><span class="line"><span class="xml">    expect(wrapper).toMatchSnapshot();</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="Testing-updated-props"><a href="#Testing-updated-props" class="headerlink" title="Testing updated props"></a>Testing updated props</h2><p>Typically components are stateless, meaning that what is rendered by the component is 100% based upon the props that are based in. In these cases creating a component with initial props when <code>testing render</code> and <code>testing events</code> as explained above should suffice. There shouldn’t be a need to test the re-render of a component receiving new props.</p><p>However, when a component leverages internal state and its props are changed, what will be rendered will be based on a combination of those updated props and the existing state. In this case, test that the new markup is as it should be, indirectly verifying that the updated prop(s) either have or have not overridden the existing state.</p><p>To test the initialValue prop behavior:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;does NOT allow `initialValue` to override existing &lt;input&gt; value&apos;, () =&gt; &#123;</span><br><span class="line">    let initialValue = &apos;react&apos;;</span><br><span class="line">    let newValue = &apos;enzyme&apos;;</span><br><span class="line">    let wrapper = mount(&lt;TextInput initialValue=&#123;initialValue&#125; /&gt;);</span><br><span class="line"></span><br><span class="line">    // ensure that the `initialValue` is properly reflected</span><br><span class="line">    // by checking the &lt;input&gt; node</span><br><span class="line">    expect(wrapper).toMatchSnapshot();</span><br><span class="line"></span><br><span class="line">    // update the TextInput&apos;s props</span><br><span class="line">    wrapper.setProps(&#123;value: newValue&#125;);</span><br><span class="line"></span><br><span class="line">    // ensure that the &lt;input&gt; node&apos;s value hasn&apos;t changed</span><br><span class="line">    expect(wrapper).toMatchSnapshot();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To test the value prop behavior:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;DOES allow `value` to override existing &lt;input&gt; value&apos;, () =&gt; &#123;</span><br><span class="line">    let initialValue = &apos;react&apos;;</span><br><span class="line">    let newValue = &apos;enzyme&apos;;</span><br><span class="line">    let wrapper = mount(&lt;TextInput initialValue=&#123;initialValue&#125; /&gt;);</span><br><span class="line"></span><br><span class="line">    // ensure that the `initialValue` is properly reflected</span><br><span class="line">    // by checking the &lt;input&gt; node</span><br><span class="line">    expect(wrapper).toMatchSnapshot();</span><br><span class="line"></span><br><span class="line">    // update the TextInput&apos;s props</span><br><span class="line">    wrapper.setProps(&#123;value: newValue&#125;);</span><br><span class="line"></span><br><span class="line">    // ensure that the &lt;input&gt; node&apos;s value has changed</span><br><span class="line">    expect(wrapper).toMatchSnapshot();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>The key to passing new props to the existing TextInput component is the <code>setProps</code> helper method. It will cause a re-render, which will allow us to assert that the new markup is as it should be.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nwb</title>
      <link href="/2017/03/14/20170314-nwb/"/>
      <url>/2017/03/14/20170314-nwb/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-nwb"><a href="#What-is-nwb" class="headerlink" title="What is nwb"></a>What is nwb</h2><p><code>nwb</code> (<em>node, webpack, babel</em>) is a toolkit for:</p><ul><li>Quick Development<ul><li>quickly test components using command line tools: react, preact, inferno</li></ul></li><li>Developing:<ul><li>Apps: React/Preact/Inferno</li><li>React Components and Libraries</li><li>npm Modules for the Web</li></ul></li></ul><p>nwb supports zero-config, but also config and plugins.</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>install globally to get the <code>nwb</code> CLI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nwb</span><br></pre></td></tr></table></figure><blockquote><p>Using npm &gt;= 3 is recommended, as Babel 6 takes significantly more time and disk space to install with npm 2 due to its lack of deduplication.</p></blockquote><h2 id="Quick-react-component-with-a-single-js-file"><a href="#Quick-react-component-with-a-single-js-file" class="headerlink" title="Quick react component with a single .js file"></a>Quick react component with a single <code>.js</code> file</h2><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">export default &lt;div&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react run app.js</span><br></pre></td></tr></table></figure><p>DONE! <code>open http://localhost:3000</code></p><blockquote><p>just export your component.<br>when handling rendering yourself then don’t export.</p></blockquote><h2 id="Creating-things-with-nwb"><a href="#Creating-things-with-nwb" class="headerlink" title="Creating things with nwb"></a>Creating things with nwb</h2><ul><li>react app: <code>nwb new react-app my-app</code></li><li>react components: <code>nwb new react-component my-component</code></li><li>npm modules: <code>nwb new web-module my-module</code></li></ul><h2 id="Create-component-walkthrough"><a href="#Create-component-walkthrough" class="headerlink" title="Create component walkthrough"></a>Create component walkthrough</h2><p>create a component<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nwb new react-component my-component --force</span><br><span class="line">// --force flag prevents questions and sets up defaults</span><br></pre></td></tr></table></figure></p><p>project structure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my-component/</span><br><span class="line">  .gitignore</span><br><span class="line">  .travis.yml</span><br><span class="line">  CONTRIBUTING.md</span><br><span class="line">  nwb.config.js</span><br><span class="line">  package.json</span><br><span class="line">  README.md</span><br><span class="line">  demo/</span><br><span class="line">    src/</span><br><span class="line">      index.js</span><br><span class="line">  node_modules/</span><br><span class="line">  src/</span><br><span class="line">    index.js</span><br><span class="line">  tests/</span><br><span class="line">    .eslintrc</span><br><span class="line">    index-test.js</span><br></pre></td></tr></table></figure><ul><li><p><strong>demo</strong>:<br>show off your component with a react app</p></li><li><p><strong>node_modules</strong>:<br><code>react</code> and <code>react-dom</code> installed on project creation</p></li><li><p><strong>nwb.config.js</strong>:<br>tweak or extend default config</p></li><li><p><strong>src</strong>:<br>your react component</p></li><li><p><strong>tests</strong>:<br>run from a <code>tests</code> directory or colocated</p></li></ul><p>scripts</p><ul><li><code>npm start</code> – serve react demo app</li><li><code>npm test</code></li><li><code>npm run test:coverage</code></li><li><code>npm run test:watch</code></li><li><code>npm run build</code></li><li><code>npm run clean</code></li></ul><p>build flags</p><ul><li>build flag <code>--no-demo</code> disables bundling the demo app</li><li>build flag <code>--no-prototypes</code> disables <code>propTypes</code> wrapping/stripping</li></ul><blockquote><p>How to use build flags<br>You need to pass a <code>--</code> argument to indicate all additional arguments should be passed to the command itself, for example:<br><code>npm run build -- --no-demo --no-proptypes</code></p></blockquote><h2 id="Zero-Configuration-Setup"><a href="#Zero-Configuration-Setup" class="headerlink" title="Zero Configuration Setup"></a>Zero Configuration Setup</h2><ul><li>Write JavaScript with ES6/ES2015 and JSX, transpiled down to ES5.</li><li>Use new JavaScript features which are at Stage 2 and above in the TC39 process:<ul><li>async/await syntax, for writing async code in a synchronous way.</li><li>Class properties, for avoiding boilerplate when writing ES2015 classes.</li><li>Decorators.</li><li>Object rest/spread, for shallow cloning, merging and partially destructuring objects as syntax.</li></ul></li><li>Polyfills for <code>Promise</code>, <code>fetch()</code> and <code>Object.assign()</code><br>disabled with a <code>--no-polyfill</code> flag if you don’t need them.</li><li>Import stylesheets (and font resources), images and JSON.</li><li>Autoprefixed CSS, so you don’t need to write browser prefixes.</li><li>*** <code>automatic dependency installation</code> – use <code>react run src --install</code></li><li>*** <code>babel resolve</code> – makes <code>src</code> a resolve point so that you can <code>import Todo from &#39;components&#39;</code> vs <code>import Todo from &#39;../../../components&#39;</code></li></ul><h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><ul><li>quick feedback loop with hot reloading</li><li>preconfigured demo app for live testing</li><li>preconfigured testing<br>defaults to karma/mocha/expect/phantomjs but jest/enzyme/expect easy to configure</li><li>preconfigured code coverage with HTML reporting via <code>coverage/html/</code></li><li>preconfigured CI supports travis, coveralls, codecov.io</li><li>preconfigured publishing to npm</li></ul><h2 id="Customizing"><a href="#Customizing" class="headerlink" title="Customizing"></a>Customizing</h2><h3 id="Configuring-Jest"><a href="#Configuring-Jest" class="headerlink" title="Configuring Jest"></a>Configuring Jest</h3><p>This is a simple hack to get <code>Jest</code> and <code>enzyme</code> to work before they come out with a plugin for it.</p><p>add packages<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-jest jest enzyme react-addons-test-utils</span><br></pre></td></tr></table></figure></p><p>./jest.transform.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = require(&apos;babel-jest&apos;).createTransformer(&#123;</span><br><span class="line">  presets: [&apos;es2015&apos;, &apos;react&apos;, &apos;stage-1&apos;], // or whatever you need</span><br><span class="line">  plugins: [&apos;transform-decorators-legacy&apos;] // if you need decorator support</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>package.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;jest&quot;: &#123;</span><br><span class="line">  &quot;transform&quot;: &#123;</span><br><span class="line">    &quot;^.+\\.js$&quot;: &quot;./jest.transform.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;jest &quot;,</span><br><span class="line">  &quot;test:watch&quot;: &quot;jest --watch&quot;,</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> framework </tag>
            
            <tag> reactjs </tag>
            
            <tag> nwb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>state of development</title>
      <link href="/2017/03/14/20170314-state-of-development/"/>
      <url>/2017/03/14/20170314-state-of-development/</url>
      
        <content type="html"><![CDATA[<p>I’ve covered a lot of ground in the last couple of weeks I wanted to dump it onto this blog to remember.</p><h1 id="Ranking-Dev-Tools"><a href="#Ranking-Dev-Tools" class="headerlink" title="Ranking Dev Tools"></a>Ranking Dev Tools</h1><h2 id="Web-Dev-Tools-by-Preference"><a href="#Web-Dev-Tools-by-Preference" class="headerlink" title="Web Dev Tools by Preference"></a>Web Dev Tools by Preference</h2><h3 id="Web-App-Creation-Frameworks"><a href="#Web-App-Creation-Frameworks" class="headerlink" title="Web App Creation Frameworks"></a>Web App Creation Frameworks</h3><h4 id="1-nwb"><a href="#1-nwb" class="headerlink" title="#1 nwb"></a>#1 nwb</h4><p>nwb (<em>node webpack and babel</em>)</p><ul><li>produces apps, components and libraries.</li><li>supports react/preact/inferno/react-native</li><li>quick-start with a single .js file.</li><li>optional configuration</li><li>automatic dependency installation</li><li>thought out skeleton supports delivery to npm</li><li>includes testing and coverage support</li></ul><h4 id="2-create-react-app"><a href="#2-create-react-app" class="headerlink" title="#2 create-react-app"></a>#2 create-react-app</h4><ul><li>produces react apps</li><li>zero config</li><li>extensible with custom scripts</li><li>includes top notch testing and coverage support</li><li>supported by facebook</li></ul><h4 id="3-fuse-box-create-react-app"><a href="#3-fuse-box-create-react-app" class="headerlink" title="#3 fuse-box-create-react-app"></a>#3 fuse-box-create-react-app</h4><ul><li>a create-react-app clone with fast babel compilation.</li><li>uses fuse-box fast babel compiler under the hood.</li></ul><h3 id="State-Management-By-Preference"><a href="#State-Management-By-Preference" class="headerlink" title="State Management By Preference"></a>State Management By Preference</h3><h4 id="1-Mobx"><a href="#1-Mobx" class="headerlink" title="#1 Mobx"></a>#1 Mobx</h4><ul><li>best of breed</li><li>easy to get started</li><li>medium learning curve</li><li>good support and fan following</li></ul><p>Mobx has taken over the number 1 spot.</p><p>I agree with the philosophy of Mobx that there is one source of truth that everything else can be derived from. That includes being able to derive actions and reducers.</p><p>Mobx is easier to implement and provide 100% of the functionality of Redux.  Make sure you look into the <strong>opinionated</strong> way to do Mobx.  Start with the <code>mobx-state-tree</code>.</p><h4 id="2-Redux"><a href="#2-Redux" class="headerlink" title="#2 Redux"></a>#2 Redux</h4><ul><li>most popular at this time</li><li>medium learning curve</li><li>mega community support and libs</li></ul><h2 id="Desktop-Dev-Tools-by-Preference"><a href="#Desktop-Dev-Tools-by-Preference" class="headerlink" title="Desktop Dev Tools by Preference"></a>Desktop Dev Tools by Preference</h2><h3 id="1-Electron"><a href="#1-Electron" class="headerlink" title="#1 Electron"></a>#1 Electron</h3><p>The electron framework has been gaining steam for a few years and has been used to create the following apps:</p><ul><li>atom</li><li>slack</li><li>MS Dev Studio</li><li>webtorrent</li></ul><blockquote><p>I don’t support any electron app creation  frameworks at this time.<br>That means create with just node, babel and electron.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> packages </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fusebox is babel on steroids</title>
      <link href="/2017/03/06/20170306-fusebox/"/>
      <url>/2017/03/06/20170306-fusebox/</url>
      
        <content type="html"><![CDATA[<h2 id="Building-an-app-with-fusebox"><a href="#Building-an-app-with-fusebox" class="headerlink" title="Building an app with fusebox"></a>Building an app with fusebox</h2><p>Create project folder and install dependencies<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> add project directory</span><br><span class="line">mkdir tic-tac-toe</span><br><span class="line">cd tic-tac-toe</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> add package.json file</span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> add packages for fusebox and babel</span><br><span class="line">yarn add --dev \</span><br><span class="line">babel-core \</span><br><span class="line">babel-plugin-transform-react-jsx \</span><br><span class="line">babel-preset-latest \</span><br><span class="line">fuse-box</span><br></pre></td></tr></table></figure></p><blockquote><p>for decorator support add<br>babel-plugin-transform-decorators-legacy<br>babel-preset-stage-1</p></blockquote><p>add packages for react<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># add packages for react app</span><br><span class="line">yarn add \</span><br><span class="line">react \</span><br><span class="line">react-dom</span><br></pre></td></tr></table></figure></p><blockquote><p>for mobx support add<br>mobx<br>mobx-react<br>mobx-react-devtools</p></blockquote><p>configure babel using <code>.babelrc</code> file<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sourceMaps"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"latest"</span>, <span class="string">"stage-1"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"transform-react-jsx"</span>],</span><br><span class="line">    [<span class="string">"transform-decorators-legacy"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>configure fuse using <code>fuse.js</code> file<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;FuseBox, SVGPlugin, CSSPlugin, BabelPlugin&#125; = <span class="built_in">require</span>(<span class="string">"fuse-box"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create FuseBox Instance</span></span><br><span class="line"><span class="keyword">let</span> fuse = <span class="keyword">new</span> FuseBox(&#123;</span><br><span class="line">  homeDir: <span class="string">"src/"</span>,</span><br><span class="line">  sourcemaps: <span class="literal">true</span>,</span><br><span class="line">  outFile: <span class="string">"./build/out.js"</span>,</span><br><span class="line">  plugins: [SVGPlugin(), CSSPlugin(), BabelPlugin()]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fuse.devServer(<span class="string">"&gt;index.js"</span>);</span><br></pre></td></tr></table></figure></p><p>configure <code>package.json</code> scripts<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node fuse.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>create the build directory<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br></pre></td></tr></table></figure></p><p>create a <code>./build/index.html</code> file<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset="UTF-8"&gt;</span><br><span class="line">  &lt;title&gt;my-app&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id="root"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script src="out.js" charset="utf-8"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>create the app using the <code>./src/index.js</code> file<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'render'</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;hello&lt;<span class="regexp">/div&gt;, document.getElementById('root')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p><p>start the app<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></p><p>open in browser<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open http://localhost:4444</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> framework </tag>
            
            <tag> reactjs </tag>
            
            <tag> fusebox </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mobx simple, scalable state management</title>
      <link href="/2017/03/04/20170304-mobx/"/>
      <url>/2017/03/04/20170304-mobx/</url>
      
        <content type="html"><![CDATA[<h2 id="The-gist-of-mobx"><a href="#The-gist-of-mobx" class="headerlink" title="The gist of mobx"></a>The gist of mobx</h2><ol><li>define your state</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appState = observable(&#123;</span><br><span class="line">  timer: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>view responds to state</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line"></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerView</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; appState &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button onClick=&#123;<span class="keyword">this</span>.onReset&#125;&gt;</span><br><span class="line">        Seconds passed: &#123;appState.timer&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  onReset = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    this.props.appState.resetTimer();</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">React.render(&lt;TimerView appState=&#123;appState&#125; /</span>&gt;, <span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><ol start="3"><li>modify the state</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">appState.resetTimer = action(<span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  appState.timer = <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(action(<span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  appState.timer += <span class="number">1</span>;</span><br><span class="line">&#125;), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="Concepts-and-Principles"><a href="#Concepts-and-Principles" class="headerlink" title="Concepts and Principles"></a>Concepts and Principles</h2><h3 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h3><ol><li><p><strong>state</strong>: data in spreadsheet cells</p></li><li><p><strong>derivations</strong>: there are two kinds…<br><code>computed values</code>: spreadsheet formulas<br><code>reactions</code>: spreadsheet formulas with side-effects</p></li><li><p><strong>actions</strong>: a change to data in our spreadsheet cells</p></li></ol><h3 id="Principles"><a href="#Principles" class="headerlink" title="Principles"></a>Principles</h3><blockquote><p>ACTION –&gt; STATE –&gt; VIEWS</p></blockquote><p>MobX supports a uni-directional data flow</p><blockquote><p>actions change state, which updates the views.</p></blockquote><p>All Derivations are updated <code>automatically</code> and <code>atomically</code> when the state changes. As a result it is never possible to observe intermediate values.</p><p>All Derivations are updated <code>synchronously</code> by default. This means that for example actions can safely inspect a computed value directly after altering the state.</p><p>Computed values are updated <code>lazily</code>. Any computed value that is not actively in use will not be updated until it is needed for a side effect (I/O). If a view is no longer in use it will be garbage collected automatically.</p><p>All Computed values should be <code>pure</code>. They are not supposed to change state.</p><p>The following listing illustrates the above concepts and principles:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable, autorun&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> todoStore = observable(&#123;</span><br><span class="line">  todos: [], <span class="comment">// observable state</span></span><br><span class="line"></span><br><span class="line">  get completedCount() &#123;  <span class="comment">// a derived value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed).length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">autorun(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// observes the state</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Completed %d of %d items"</span>,</span><br><span class="line">    todoStore.completedCount,</span><br><span class="line">    todoStore.todos.length</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">todoStore.todos[<span class="number">0</span>] = &#123;  <span class="comment">// modify the state</span></span><br><span class="line">  title: <span class="string">"Take a walk"</span>,</span><br><span class="line">  completed: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// -&gt; synchronously prints 'Completed 0 of 1 items'</span></span><br><span class="line"></span><br><span class="line">todoStore.todos[<span class="number">0</span>].completed = <span class="literal">true</span>; <span class="comment">// modify the state</span></span><br><span class="line"><span class="comment">// -&gt; synchronously prints 'Completed 1 of 1 items'</span></span><br></pre></td></tr></table></figure><h2 id="Mobx-API"><a href="#Mobx-API" class="headerlink" title="Mobx API"></a>Mobx API</h2><p>The most important MobX api’s. Understanding <code>observable</code>, <code>computed</code>, <code>reactions</code> and <code>actions</code> is enough to master MobX and use it in your applications!</p><h3 id="Creating-observables"><a href="#Creating-observables" class="headerlink" title="Creating observables"></a>Creating observables</h3><p>observable(value)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">observable(value)</span><br><span class="line">@observable classProperty = value</span><br></pre></td></tr></table></figure><h3 id="Computed-values"><a href="#Computed-values" class="headerlink" title="Computed values"></a>Computed values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed(() =&gt; expression)</span><br><span class="line">computed(() =&gt; expression, (newValue) =&gt; void)</span><br><span class="line">computed(() =&gt; expression, options)</span><br><span class="line">@computed get classProperty() &#123; return expression; &#125;</span><br><span class="line">@computed.struct get classProperty() &#123; return expression; &#125;</span><br></pre></td></tr></table></figure><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">action(fn)</span><br><span class="line">action(name, fn)</span><br><span class="line">@action classMethod</span><br><span class="line">@action(name) classMethod</span><br><span class="line">@action boundClassMethod = (args) =&gt; &#123; body &#125;</span><br><span class="line">@action(name) boundClassMethod = (args) =&gt; &#123; body &#125;</span><br></pre></td></tr></table></figure><h3 id="Reactions-and-Derivations"><a href="#Reactions-and-Derivations" class="headerlink" title="Reactions and Derivations"></a>Reactions and Derivations</h3><p>oberserver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">observer(React.createClass(&#123; ... &#125;))</span><br><span class="line">observer((props, context) =&gt; ReactElement)</span><br><span class="line">observer(class MyComponent extends React.Component &#123; ... &#125;)</span><br><span class="line">@observer class MyComponent extends React.Component &#123; ... &#125;)</span><br></pre></td></tr></table></figure><p>autorun</p><p>Usage: <code>autorun(debugname?, () =&gt; { sideEffect })</code>. Autorun runs the provided sideEffect and tracks which observable state is accessed while running the side effect. Whenever one of the used observables is changed in the future, the same sideEffect will be run again. Returns a disposer function to cancel the side effect.</p><p>when</p><p>Usage: <code>when(debugname?, () =&gt; condition, () =&gt; { sideEffect })</code>. The condition expression will react automatically to any observables it uses. As soon as the expression returns true the sideEffect function will be invoked, but only once. when returns a disposer to prematurely cancel the whole thing.</p><p>autorunAsync</p><p>Usage: <code>autorunAsync(debugname?, () =&gt; { sideEffect }, delay)</code>. Similar to autorun, but the sideEffect will be delayed and debounced with the given delay.</p><p>reaction</p><p>Usage: <code>reaction(debugname?, () =&gt; data, data =&gt; { sideEffect }, fireImmediately = false, delay = 0)</code>. A variation on autorun that gives more fine-grained control on which observables that will be tracked. It takes two function, the first one is tracked and returns data that is used as input for the second one, the side effect. Unlike autorun the side effect won’t be run initially, and any observables that are accessed while executing the side effect will not be tracked. The side effect can be debounced, just like autorunAsync.</p><p>expr</p><p>Usage: <code>expr(() =&gt; someExpression)</code>. Just a shorthand for computed(() =&gt; someExpression).get(). expr is useful in some rare cases to optimize another computed function or reaction. In general it is simpler and better to just split the function in multiple smaller computed’s to achieve the same effect.</p><p>onReactionError</p><p>Usage: <code>extras.onReactionError(handler: (error: any, derivation) =&gt; void)</code></p><p>This method attaches a global error listener, which is invoked for every error that is thrown from a reaction. This can be used for monitoring or test purposes.</p>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> mobx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>electron apps with react</title>
      <link href="/2017/03/04/20170304-electron/"/>
      <url>/2017/03/04/20170304-electron/</url>
      
        <content type="html"><![CDATA[<h2 id="Electron-Framework"><a href="#Electron-Framework" class="headerlink" title="Electron Framework"></a>Electron Framework</h2><p>The electron framework has been gaining steam for a few years and has been used to create the following apps:</p><ul><li>atom</li><li>slack</li><li>MS Dev Studio</li><li>webtorrent</li></ul><p>There are no app creation frameworks that I support as of MAR-2017.  That means just node, babel and electron.</p><p>I would start with a reference app like:</p><ul><li><a href="https://goo.gl/nVXvLA" target="_blank" rel="noopener">lionshare desktop</a></li></ul><h3 id="libraries"><a href="#libraries" class="headerlink" title="libraries"></a>libraries</h3><p>here are some commonly used libs:</p><ul><li>electron</li><li>node-auto-launch</li><li>electron-is-dev</li><li>electron-machine-id</li><li>universal-analytics</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react TDD done right</title>
      <link href="/2017/02/22/20170222-react-tdd-done-right/"/>
      <url>/2017/02/22/20170222-react-tdd-done-right/</url>
      
        <content type="html"><![CDATA[<h2 id="Start-with-an-end-to-end-test"><a href="#Start-with-an-end-to-end-test" class="headerlink" title="Start with an end-to-end test"></a>Start with an end-to-end test</h2><p>First and foremost, start every feature with an end-to-end test. An end-to-end test is basically a test from the user’s perspective (click here, wait, confirm this text is displayed, etc.)</p><p>The go-to library for end-to-end tests is Selenium but since it sucks use <a href="http://webdriver.io/" target="_blank" rel="noopener">webdriverio</a></p><h3 id="The-first-test"><a href="#The-first-test" class="headerlink" title="The first test"></a>The first test</h3><ul><li>opens the app</li><li>opens the login page</li><li>enters a phone number field</li><li>enters a 6 digit code</li><li>confirm that the intro is shown</li></ul><p><strong>Use page objects</strong></p><p>It’s important to note how idiomatically this reads. That’s because I’m using a pattern called PageObjects here, which Fowler talks about <a href="http://martinfowler.com/bliki/PageObject.html" target="_blank" rel="noopener">here</a>.  Essentially you create a PageObject that represents a page in your app, that encapsulates all the nasty Selenium stuff.</p><p><strong>Use <code>async/await</code> everywhere</strong></p><p>nuff said.</p><p><strong>Create a fast way of logging in</strong></p><p>Whether that’s special login credentials or a pre-authed session cookie.</p><p><strong>Decouple your end-to-end tests, so they can run in parallel</strong></p><p>End-to-end tests are really slow, and really flaky, so it’s not really feasible to have a single test that logs in, pokes around, and tests every feature.  If your test clicks into the app 10 levels deep, you would have to wait an ungodly 60 seconds after every change. You need every test to start with a fresh browser and a fresh login.</p><blockquote><p>Decouple your end-to-end tests, so they can run in parallel</p></blockquote><p><strong>Success: a failing end-to-end test</strong></p><p>So you’ve got your end-to-end test, and it’s failing. Sweet. The next thing you want to do is work your way inwards from the point-of-contacts, writing unit tests and implementations until the end-to-end test passes.</p><p>See the <a href="https://goo.gl/NRdMLn" target="_blank" rel="noopener">test</a> and the <a href="https://goo.gl/AkNJeq" target="_blank" rel="noopener">pageObjects</a></p><h2 id="Unit-tests"><a href="#Unit-tests" class="headerlink" title="Unit tests"></a>Unit tests</h2><p>The first thing the user sees is the login page/button, so I’d probably start with a failing test for that. Here’s a <a href="https://goo.gl/uEFMov" target="_blank" rel="noopener">unit test</a> for login taken from that same project:</p><p>Move away from the magic and the multitude of plugins. I recommend:</p><ul><li><a href="">tape</a><br>or</li><li><a href="">jest</a> and <a href="">enzyme</a></li></ul><p><strong>your unit test should answer 5 questions</strong></p><ul><li>what are you testing</li><li>what aspect are you testing</li><li>how is the component tested</li><li>what is the actual result</li><li>what is the expected result</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">describe(<span class="string">'Login'</span>, () =&gt; &#123;                                     <span class="comment">// what you are testing</span></span><br><span class="line">  it(<span class="string">'should test this aspect'</span>, () =&gt; &#123;                       <span class="comment">// what aspect</span></span><br><span class="line">    <span class="keyword">const</span> login = shallow(&lt;Login &#123;...props&#125; step=&#123;0&#125; /&gt;)      // how is it tested</span><br><span class="line">    login.setProps(&#123; step: 1 &#125;)</span><br><span class="line">    const logInWithPhone = login.find(&#123; testID: 'logInWithPhone' &#125;)</span><br><span class="line"></span><br><span class="line">    const actual = logInWithPhone.length                      // actual</span><br><span class="line">    const expected = 1                                        // expected</span><br><span class="line">    expect(actual).toEqual(expected)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Testing-the-inputs-and-outputs-of-components"><a href="#Testing-the-inputs-and-outputs-of-components" class="headerlink" title="Testing the inputs and outputs of components"></a>Testing the inputs and outputs of components</h3><p>It’s important, I think, to focus purely on input/output in unit tests.</p><blockquote><p>Test inputs and outputs of components. Don’t “reach in” and test the implementation.</p></blockquote><p>Enzyme lets you “reach in” and grab the actual state of the component, or the instance methods. Using these features is asking for brittle tests, because they lead you to testing the implementation and not the actual functionality or behavior of the component. The component could remain exactly the same from the point-of-view of the application, but if change the state or instance method (the implementation), the test will fail and you’ll have lots of fun maintaining your app.</p><p>The <code>input</code> is generally one of three things:</p><ul><li>Static props</li><li>Events generated by the user</li><li>A child component calling a passed-in function</li></ul><p>The <code>output</code> is generally one of three things:</p><ul><li>The presence of a child component</li><li>A call to function prop, like a redux action creator</li><li>Values passed into child component props</li></ul><blockquote><p>So your test-setup should generally only reference the inputs, and your test-assertions should only check the outputs.</p></blockquote><p>This keeps the component a “black box”, where your only test for effects. This makes your components wayyyy more flexible and lets you change the implementation without breaking a million tests, leading to lower maintenance costs.</p><p><strong>Success: a failing unit test</strong></p><p>Okay so you’ve got a failing unit test. Next you’d write the actual component, getting the unit test to pass. You’d slowly write failing unit tests, testing inputs/outputs, until you get to the edges where you need to send or get data from an outside source. This is where the interesting stuff happens.</p><h2 id="Integration-tests"><a href="#Integration-tests" class="headerlink" title="Integration tests"></a>Integration tests</h2><p>I write integration tests last, at the edges of where my React application meets the outside world, which is generally a REST API. Here’s a <a href="https://goo.gl/tmtQIC" target="_blank" rel="noopener">failing test</a> for an async redux action creator.</p><p>This test assumes you’ve got all of your redux-related files in a single <code>redux</code> folder, and the configureStore configures the store with redux-thunk middleware.</p><p>getUsers returns an async function that fetches from the api, and dispatches an action that gets processed by an entities reducer.</p><p>Sweet! An integration test. You don’t need to get super specific and write a ton of these. You generally want to follow the test pyramid:</p><center><img src="/images/test-pyramid.gif" alt="test pyramid"></center><p>This pyramid shows the percentage of tests that you should write for each test group.  I recommend that you create tests in this order: e2e, unit, integration.</p><blockquote><p>Create tests in this order: e2e, unit, integration.</p></blockquote><p>So, you write your end-to-end test, slowly work your way through the unit tests to the edges where you write your integration tests, all the while filling out the implementations. Eventually, your end-to-end test passes and you’ve got yourself a swag new, well-tested feature to deliver to the product team.</p><h2 id="Where-to-put-the-tests"><a href="#Where-to-put-the-tests" class="headerlink" title="Where to put the tests"></a>Where to put the tests</h2><p>Maintaining two parallel structures (one for source and another for tests) is a senseless task. I try to co-locate related concepts as much as possible, and that includes putting tests next to source. I like the Facebook convention of putting tests in a <code>__tests__</code> folder. You can check it out in the React repo.</p><p>Facebook, though, doesn’t seem to differentiate between unit and integration tests, they just suffix each test with <code>-test.js</code>. I’ve been suffixing unit tests with <code>.unit.js</code> and integration tests with <code>.integration.js</code>. This is important because unit tests need to run super fast, and should be run in a pre-commit git hook (or at least on your continuous integration server). Integration tests are much slower because they have to fetch external resources, and should be run less frequently.</p><blockquote><p>suffix your tests with <code>.unit.js</code> and <code>.integration.js</code></p></blockquote><h2 id="Other-Tools"><a href="#Other-Tools" class="headerlink" title="Other Tools"></a>Other Tools</h2><ul><li><a href="">nyc</a> and <a href="">babel-plugin-instanbul</a> – for code coverage</li><li><a href="">atom-lcov</a> – for highlighting coverage in your editor</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goo.gl/26qOuN" target="_blank" rel="noopener">Good Practices for Testing React Apps</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react testing with contracts</title>
      <link href="/2017/02/11/20170211-react-testing/"/>
      <url>/2017/02/11/20170211-react-testing/</url>
      
        <content type="html"><![CDATA[<h3 id="TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS"><a href="#TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS" class="headerlink" title="TO BE DEPRECATED AFTER I PULL OUT THE GEMS"></a>TO BE DEPRECATED AFTER I PULL OUT THE GEMS</h3><h3 id="TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS-1"><a href="#TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS-1" class="headerlink" title="TO BE DEPRECATED AFTER I PULL OUT THE GEMS"></a>TO BE DEPRECATED AFTER I PULL OUT THE GEMS</h3><h3 id="TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS-2"><a href="#TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS-2" class="headerlink" title="TO BE DEPRECATED AFTER I PULL OUT THE GEMS"></a>TO BE DEPRECATED AFTER I PULL OUT THE GEMS</h3><h3 id="TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS-3"><a href="#TO-BE-DEPRECATED-AFTER-I-PULL-OUT-THE-GEMS-3" class="headerlink" title="TO BE DEPRECATED AFTER I PULL OUT THE GEMS"></a>TO BE DEPRECATED AFTER I PULL OUT THE GEMS</h3><h2 id="React-Testing-Explained"><a href="#React-Testing-Explained" class="headerlink" title="React Testing Explained"></a>React Testing Explained</h2><p>Here are the <code>App</code> and <code>LockScreen</code> components.</p><figure class="highlight js"><figcaption><span>App</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> LockScreen <span class="keyword">from</span> <span class="string">'./LockScreen'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LockScreen</span><br><span class="line">        wallpaperPath=<span class="string">'react_wallpaper.png'</span></span><br><span class="line">        userInfoMessage=<span class="string">'This is Tim'</span>s phone. If found, please give it back to him. He will be sad without it<span class="string">'</span></span><br><span class="line"><span class="string">        onUnlocked=&#123;() =&gt; alert('</span>unlocked!<span class="string">')&#125;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>LockScreen</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ClockDisplay <span class="keyword">from</span> <span class="string">'./ClockDisplay'</span></span><br><span class="line"><span class="keyword">import</span> TopOverlay <span class="keyword">from</span> <span class="string">'./TopOverlay'</span></span><br><span class="line"><span class="keyword">import</span> SlideToUnlock <span class="keyword">from</span> <span class="string">'./SlideToUnlock'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    wallpaperPath: PropTypes.string,</span><br><span class="line">    userInfoMessage: PropTypes.string,</span><br><span class="line">    onUnlocked: PropTypes.func,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      wallpaperPath,</span><br><span class="line">      userInfoMessage,</span><br><span class="line">      onUnlocked,</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div</span><br><span class="line">        style=&#123;&#123;</span><br><span class="line">          height: <span class="string">'100%'</span>,</span><br><span class="line">          display: <span class="string">'flex'</span>,</span><br><span class="line">          justifyContent: <span class="string">'space-between'</span>,</span><br><span class="line">          flexDirection: <span class="string">'column'</span>,</span><br><span class="line">          backgroundImage: wallpaperPath ? <span class="string">`url(<span class="subst">$&#123;wallpaperPath&#125;</span>)`</span> : <span class="string">',</span></span><br><span class="line"><span class="string">          backgroundColor: '</span>black<span class="string">',</span></span><br><span class="line"><span class="string">          backgroundPosition: '</span>center<span class="string">',</span></span><br><span class="line"><span class="string">          backgroundSize: '</span>cover<span class="string">',</span></span><br><span class="line"><span class="string">        &#125;&#125;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;ClockDisplay /&gt;</span></span><br><span class="line"><span class="string">        &#123;userInfoMessage ? (</span></span><br><span class="line"><span class="string">          &lt;TopOverlay</span></span><br><span class="line"><span class="string">            style=&#123;&#123;</span></span><br><span class="line"><span class="string">              padding: '</span><span class="number">2</span>em<span class="string">',</span></span><br><span class="line"><span class="string">              marginBottom: '</span>auto<span class="string">',</span></span><br><span class="line"><span class="string">            &#125;&#125;</span></span><br><span class="line"><span class="string">          &gt;</span></span><br><span class="line"><span class="string">            &#123;userInfoMessage&#125;</span></span><br><span class="line"><span class="string">          &lt;/TopOverlay&gt;</span></span><br><span class="line"><span class="string">        ) : null&#125;</span></span><br><span class="line"><span class="string">        &lt;SlideToUnlock onSlide=&#123;onUnlocked&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Contracts"><a href="#Contracts" class="headerlink" title="Contracts"></a>Contracts</h2><p> A contract defines the expected behavior of your component and what assumptions are reasonable to have about its usage. Without a clear contract, your component may be hard to understand. Writing tests is a great way to formally define your component’s contract.</p><p> Things that are commonly part of a contract:</p><ul><li>what it renders</li><li>props</li><li>state</li><li>UI interaction</li></ul><p>Things that are uncommonly part of a contract:</p><ul><li>the context the component is rendered in</li><li>how instance methods affect the component</li><li>side effects of the component lifecycle</li></ul><h3 id="Discovering-your-components-contract"><a href="#Discovering-your-components-contract" class="headerlink" title="Discovering your components contract"></a>Discovering your components contract</h3><p>To find your component’s contract, ask yourself questions like:</p><ul><li>What does my component render?</li><li>Does my component render different things under different circumstances?</li><li>When I pass a function as a prop, what does my component use it for? Does it call it, or just give it to another component? If it calls it, what does it call it with?</li><li>When the user interacts with my component, what happens?</li></ul><h3 id="Finding-the-LockScreen’s-contract"><a href="#Finding-the-LockScreen’s-contract" class="headerlink" title="Finding the LockScreen’s contract"></a>Finding the LockScreen’s contract</h3><p>By examining our constraints and putting them to scrutiny, we broke many of them down into multiple, smaller constraints. This is great! This will make it easier to write our test code.</p><ul><li>should render the container div</li><li>should contain everything else when rendering the container div</li><li>should render the container div with certain styles</li><li>should assign wallpaperPath to container-div background-image when wallpaperPath prop is defined</li><li>should render Clock</li><li>should not pass props to Clock when rendering Clock</li><li>should render TopOverlay when the userInfoMessage prop is defined</li><li>should pass userInfoMessage as children to TopOverlay when the userInfoMessage prop is defined</li><li>should render TopOverlay with certain styles when the userInfoMessage prop is defined</li><li>should not render TopOverlay when userInfoMessage prop is undefined</li><li>should render SlideToUnlock</li><li>should assign onUnlocked to SlideToUnlock onSlide prop when onUnlocked prop is defined</li><li>should assign onUnlocked to SlideToUnlock onSlide prop when onUnlocked prop is undefined</li><li>should optionally receive a wallpaperPath as a string</li><li>should optionally receive a userInfoMessage as a string</li><li>should optionally receive a onUnlocked as a function</li></ul><p>This is a good starting point for our component contract. There may be more constraints within this component’s contract, and in production code you will want to find as many as you can, but for the purposes of this example, let’s just work with these. You can always add tests later if you discover additional constraints.</p><h3 id="What’s-Worth-Testing"><a href="#What’s-Worth-Testing" class="headerlink" title="What’s Worth Testing?"></a>What’s Worth Testing?</h3><p>Some of these constraints are worth testing, and others are not.</p><h4 id="Rules-of-Thumb-that-determine-if-something-is-not-worth-testing"><a href="#Rules-of-Thumb-that-determine-if-something-is-not-worth-testing" class="headerlink" title="Rules of Thumb that determine if something is not_worth_testing:"></a>Rules of Thumb that determine if something is not_worth_testing:</h4><ul><li>duplicates app code? This makes it brittle.</li><li>duplicates library code?</li><li>is this an internal concern?  Can it be affected by only the public api?</li></ul><p>These are only rules of thumb, so be careful not to use them to justify not testing something just because it’s hard. <strong>Often, things that seem hard to test are the most important to test</strong>, because the code under test is making many assumptions about the rest of the application.</p><p>Let’s find out which tests we can eliminate with our rules:</p><ul><li>Eliminate <code>prop tests</code> because it duplicates app code<br>it is already covered in React’s PropTypes system.</li><li>Eliminate <code>certain styles test</code> because it duplicates app code making it brittle<br>changing styles in the app would require same changes in tests</li></ul><p>Here’s what we’re left with:</p><ul><li>should render the container div</li><li>should contain everything else when rendering the container div</li><li>should assign wallpaperPath to container-div background-image when wallpaperPath prop is defined</li><li>should render Clock</li><li>should not pass props to Clock when rendering Clock</li><li>should render TopOverlay when the userInfoMessage prop is defined</li><li>should pass userInfoMessage as children to TopOverlay when the userInfoMessage prop is defined</li><li>should not render TopOverlay when userInfoMessage prop is undefined</li><li>should render SlideToUnlock</li><li>should assign onUnlocked to SlideToUnlock onSlide prop when onUnlocked prop is defined</li><li>should assign onUnlocked to SlideToUnlock onSlide prop when onUnlocked prop is undefined</li></ul><h2 id="Setting-Up-Some-Test-Boilerplate"><a href="#Setting-Up-Some-Test-Boilerplate" class="headerlink" title="Setting Up Some Test Boilerplate"></a>Setting Up Some Test Boilerplate</h2><p>Let’s start scaffolding out a test for this component. I will be using <code>Jest</code> with <code>enzyme</code> in my tests. Jest works great with React and is also the test runner included in apps created with <code>create-react-app</code>, so you may already be set up to use it. Enzyme is a mature React testing library that works in both node and the browser.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span></span><br><span class="line"><span class="keyword">import</span> LockScreen <span class="keyword">from</span> <span class="string">'./LockScreen'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'LockScreen'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> props</span><br><span class="line">  <span class="keyword">let</span> mountedLockScreen</span><br><span class="line">  <span class="keyword">const</span> lockScreen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mountedLockScreen) &#123;</span><br><span class="line">      mountedLockScreen = mount(</span><br><span class="line">        &lt;LockScreen &#123;...props&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mountedLockScreen</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props = &#123;</span><br><span class="line">      wallpaperPath: <span class="literal">undefined</span>,</span><br><span class="line">      userInfoMessage: <span class="literal">undefined</span>,</span><br><span class="line">      onUnlocked: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    mountedLockScreen = <span class="literal">undefined</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All tests will go here</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Writing-the-Tests"><a href="#Writing-the-Tests" class="headerlink" title="Writing the Tests!"></a>Writing the Tests!</h3><h4 id="conditional-tests"><a href="#conditional-tests" class="headerlink" title="conditional tests"></a>conditional tests</h4><p>When the test has words in it like <code>if</code> or <code>when</code> that is an indicator of a conditional test. When we need to describe behavior that only occurs within a certain condition, we can describe that condition, and then use beforeEach within that describe to set that condition up.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">"when userInfoMessage prop exists"</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.userInfoMessage = <span class="string">"This is my favorite phone!"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should render TopOverlay"</span>, () =&gt; &#123;</span><br><span class="line">    expect(lockScreen().find(TopOverlay).length).toBe(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should pass userInfoMessage as children to TopOverlay"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> topOverlay = lockScreen().find(TopOverlay)</span><br><span class="line">    expect(topOverlay.props().children).toBe(props.userInfoMessage)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This will leave our test outline looking like this:</p><ul><li>should render the container div</li><li>when rendering the container div<ul><li>should contain everything else</li></ul></li><li>when wallpaperPath prop is defined<ul><li>should assign wallpaperPath to container-div background-image</li></ul></li><li>should render Clock</li><li>when rendering Clock<ul><li>should not pass props to Clock</li></ul></li><li>when the userInfoMessage prop is defined<ul><li>should render TopOverlay</li><li>should pass userInfoMessage as children to TopOverlay</li></ul></li><li>when userInfoMessage prop is undefined<ul><li>should not render TopOverlay</li></ul></li><li>should render SlideToUnlock</li><li>when onUnlocked prop is defined<ul><li>should assign onUnlocked to SlideToUnlock onSlide prop</li></ul></li><li>when onUnlocked prop is undefined<ul><li>should assign onUnlocked to SlideToUnlock onSlide prop</li></ul></li></ul><h4 id="final-test-file"><a href="#final-test-file" class="headerlink" title="final test file"></a>final test file</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should render the container div'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> divs = lockScreen().find(<span class="string">'div'</span>)</span><br><span class="line">  expect(divs.length).toBeGreaterThan(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when rendering the container div"</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">"contains everything else that gets rendered"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> divs = lockScreen().find(<span class="string">"div"</span>)</span><br><span class="line">    <span class="comment">// When using .find, enzyme arranges the nodes in order such</span></span><br><span class="line">    <span class="comment">// that the outermost node is first in the list. So we can</span></span><br><span class="line">    <span class="comment">// use .first() to get the outermost div.</span></span><br><span class="line">    <span class="keyword">const</span> wrappingDiv = divs.first()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enzyme omits the outermost node when using the .children()</span></span><br><span class="line">    <span class="comment">// method on lockScreen(). This is annoying, but we can use it</span></span><br><span class="line">    <span class="comment">// to verify that wrappingDiv contains everything else this</span></span><br><span class="line">    <span class="comment">// component renders.</span></span><br><span class="line">    expect(wrappingDiv.children()).toEqual(lockScreen().children())</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when wallpaperPath prop is defined"</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.wallpaperPath = <span class="string">"some/image.png"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should assign wallpaperPath to container-div background-image"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrappingDiv = lockScreen().find(<span class="string">"div"</span>).first()</span><br><span class="line">    expect(wrappingDiv.props().style.backgroundImage).toBe(<span class="string">`url(<span class="subst">$&#123;props.wallpaperPath&#125;</span>)`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">"should render Clock"</span>, () =&gt; &#123;</span><br><span class="line">  expect(lockScreen().find(ClockDisplay).length).toBe(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when rendering Clock"</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">"should not pass props to Clock"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> clockDisplay = lockScreen().find(ClockDisplay)</span><br><span class="line">    expect(<span class="built_in">Object</span>.keys(clockDisplay.props()).length).toBe(<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when the userInfoMessage prop is defined"</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.userInfoMessage = <span class="string">"This is my favorite phone!"</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should render TopOverlay"</span>, () =&gt; &#123;</span><br><span class="line">    expect(lockScreen().find(TopOverlay).length).toBe(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should pass userInfoMessage as children to TopOverlay"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> topOverlay = lockScreen().find(TopOverlay)</span><br><span class="line">    expect(topOverlay.props().children).toBe(props.userInfoMessage)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when userInfoMessage prop is undefined"</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.userInfoMessage = <span class="literal">undefined</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should not render TopOverlay"</span>, () =&gt; &#123;</span><br><span class="line">    expect(lockScreen().find(TopOverlay).length).toBe(<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">"should render SlideToUnlock"</span>, () =&gt; &#123;</span><br><span class="line">  expect(lockScreen().find(SlideToUnlock).length).toBe(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when onUnlocked prop is defined"</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.onUnlocked = jest.fn()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should assign onUnlocked to SlideToUnlock onSlide prop"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> slideToUnlock = lockScreen().find(SlideToUnlock)</span><br><span class="line">    expect(slideToUnlock.props().onSlide).toBe(props.onUnlocked)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"when onUnlocked prop is undefined"</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    props.onUnlocked = <span class="literal">undefined</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"should assign onUnlocked to SlideToUnlock onSlide prop"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> slideToUnlock = lockScreen().find(SlideToUnlock)</span><br><span class="line">    expect(slideToUnlock.props().onSlide).not.toBeDefined()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Maybe-not-what-you-expected"><a href="#Maybe-not-what-you-expected" class="headerlink" title="Maybe not what you expected"></a>Maybe not what you expected</h2><p>You may have expected our test cases to end up as something like:</p><ul><li>When dragging the slide-to-unlock handle all the way to the right<br>then the unlock callback is called</li><li>When dragging the slide-to-unlock handle partway to the right<br>then releases it, the handle is animated back to its original position</li><li>The clock at the top of the screen should always show the current time</li></ul><p>This intuition is natural. From an application perspective, these are some of the most noticeable features. However, we didn’t end up writing tests for any of that functionality. Why? They were not the concern of LockScreen.</p><p>The features described above are the concerns of SlideToUnlock and ClockDisplay, so tests around those features would go in the tests for those components, not here.</p><p>Because React components are reusable units, unit tests are a natural fit for them. And when unit testing, you should only test what your actual unit cares about. It is better to see the trees than the forest when writing React component tests.</p><h4 id="cheat-sheet-concerns-of-most-React-components"><a href="#cheat-sheet-concerns-of-most-React-components" class="headerlink" title="cheat sheet: concerns of most React components:"></a>cheat sheet: concerns of most React components:</h4><ul><li>What do I do with the props I receive?</li><li>What components do I render?</li><li>What do I pass to rendered components?</li><li>Do I ever keep anything in state?</li><li>Do I invalidate state when receiving new props?</li><li>When do I update state?</li><li>If a user interacts with me, what do I do?</li><li>If a child component calls a callback I passed to it, what do I do?</li><li>Does anything happen when I’m mounted? When I’m unmounted?</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://goo.gl/B5mXvu" target="_blank" rel="noopener">The Right Way to Test React Components</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web animation</title>
      <link href="/2017/02/09/20170209-web-animation/"/>
      <url>/2017/02/09/20170209-web-animation/</url>
      
        <content type="html"><![CDATA[<h2 id="The-gist-of-it…"><a href="#The-gist-of-it…" class="headerlink" title="The gist of it…"></a>The gist of it…</h2><p>Use <code>transform</code> instead of changing CSS properties like <code>width</code> or <code>margin</code></p><p>transform will let you leverage the GPU and takes little effort.</p><p>with transform you can:</p><ul><li><code>position</code>: transform: translateX()</li><li><code>scale</code>: transform: scale()</li><li><code>rotation</code>: transform: rotate()</li><li><code>opacity</code>: opacity: 0…1</li></ul><p>The expensive operation in the browser is <code>layout</code>.  When you change the <code>width</code> or <code>margin</code> of a <code>div</code> you cause the browser to have to calculate <code>layout</code> for all the elements contained in that <code>div</code>.  This is a hugely expensive operation that will cause your animation to be <code>janky</code>.</p><h2 id="Checking-the-results-in-the-debugger"><a href="#Checking-the-results-in-the-debugger" class="headerlink" title="Checking the results in the debugger"></a>Checking the results in the debugger</h2><p>Using the <code>timeline</code> section of the <code>dev tools</code> you can check the load on the <code>cpu</code> and <code>paint</code> operations.  They should be very very low.  If they are high you’re doing it wrong.</p><h2 id="Animation-techniques"><a href="#Animation-techniques" class="headerlink" title="Animation techniques"></a>Animation techniques</h2><h3 id="technique-1"><a href="#technique-1" class="headerlink" title="technique 1"></a>technique 1</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* BAD */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width .<span class="number">35s</span>, margin-left .<span class="number">35s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mysidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(100vw - 255px);</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">255px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here our <code>SideBar</code> component has the <code>sidebar</code> class and starts off with some properties.  When we add the <code>mysidebar</code> class to it, then the properties get overridden by the <code>mysidebar</code> class.  The speed of the transition is controlled with the <code>transition</code> property under the <code>sidebar</code> class.</p><h3 id="technique-2"><a href="#technique-2" class="headerlink" title="technique 2"></a>technique 2</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GOOD */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mybox</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">3s</span> ease infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> move &#123;</span><br><span class="line">  50% &#123;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here a box identified by the <code>#mybox</code> id, will animate back and forth infinitely.</p><p>animation property:</p><ul><li><code>move</code> is the animation name</li><li><code>3s</code> take 3 seconds to complete the animation</li><li><code>ease</code> the flow of the movement.   others: (ease-in, ease-in-out, linear)</li><li><code>infinite</code> a flag to indicate not to stop</li></ul><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><ul><li><a href="https://goo.gl/dEKgfL" target="_blank" rel="noopener">Animating with Translate - a Paul Irish codepen</a></li><li><a href="https://goo.gl/OzKCVa" target="_blank" rel="noopener">High Performance Animations</a></li><li><a href="https://goo.gl/cyBAJO" target="_blank" rel="noopener">10 principles for smooth web animations</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> animation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>locking down mongodb</title>
      <link href="/2017/02/09/20170210-mongodb/"/>
      <url>/2017/02/09/20170210-mongodb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Update May 3 2017</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// start db in auth mode</span><br><span class="line">mcs</span><br><span class="line"></span><br><span class="line">// login (recommended)</span><br><span class="line">export MONGO_PASS=abc123</span><br><span class="line">mc connect -u username -p $MONGO_PASS MyServer/myapp</span><br><span class="line"></span><br><span class="line">// other ways to login</span><br><span class="line">// mc connect mongodb://user:pass@localhost:27017/myapp</span><br><span class="line">// mc connect -u user -p pass MyServer/myapp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// exit CLI</span><br><span class="line">&gt; exit</span><br><span class="line"></span><br><span class="line">// shutdown db</span><br><span class="line">mcq -y</span><br></pre></td></tr></table></figure><p>I gots hacked!!!<br>So… I have to learn to secure the old db.</p><h2 id="Securing-the-DB"><a href="#Securing-the-DB" class="headerlink" title="Securing the DB"></a>Securing the DB</h2><p>Keep in mind I use <code>mongoctl</code> for <code>mongodb</code> management</p><h3 id="Get-security-fixes"><a href="#Get-security-fixes" class="headerlink" title="Get security fixes"></a>Get security fixes</h3><p>upgrade to the latest version for the latest security fixes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ mc list-versions</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">VERSION              EDITION              LOCATION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">3.0.12               community            /Users/frankg/mongodb/mongodb-osx-x86_64-community-3.0.12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ mc install-mongodb 3.4.2</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">$ mc list-versions</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">VERSION              EDITION              LOCATION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">3.0.12               community            /Users/frankg/mongodb/mongodb-osx-x86_64-community-3.0.12</span><br><span class="line">3.4.2                community            /Users/frankg/mongodb/mongodb-osx-x86_64-community-3.4.2</span><br></pre></td></tr></table></figure><h3 id="Create-and-Manage-users"><a href="#Create-and-Manage-users" class="headerlink" title="Create and Manage users"></a>Create and Manage users</h3><h4 id="The-admin-user"><a href="#The-admin-user" class="headerlink" title="The admin user"></a>The admin user</h4><p>An admin user can do almost anything.  The key word there is almost.</p><blockquote><p>admin users cannot login to all databases.<br>you should create the users that need to login to each database<br>I think the reason they did this is to prevent admin passwords from being used on the internet</p></blockquote><p>admin users can login to the admin database or login without specifying a database.</p><p>create an admin user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mcc</span><br><span class="line"></span><br><span class="line">MongoDB server version: 3.4.2</span><br><span class="line">&gt; use admin</span><br><span class="line"></span><br><span class="line">&gt; db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;frankg&quot;,</span><br><span class="line">    pwd: &quot;xyz123&quot;,</span><br><span class="line">    roles: [ &apos;root&apos; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>view a user’s roles</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mcc</span><br><span class="line"></span><br><span class="line">MongoDB server version: 3.4.2</span><br><span class="line">&gt; use admin</span><br><span class="line"></span><br><span class="line">&gt; db.getUser(&quot;frankg&quot;)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;_id&quot; : &quot;admin.frankg&quot;,</span><br><span class="line">  &quot;user&quot; : &quot;frankg&quot;,</span><br><span class="line">  &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">  &quot;roles&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;role&quot; : &quot;root&quot;,</span><br><span class="line">      &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="The-non-admin-user"><a href="#The-non-admin-user" class="headerlink" title="The non admin user"></a>The non admin user</h4><p>You will need to create users for each database if you want to login to that database.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mcc</span><br><span class="line"></span><br><span class="line">MongoDB server version: 3.4.2</span><br><span class="line">&gt; use myAppDb</span><br><span class="line"></span><br><span class="line">&gt; db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">   user: &quot;appUser&quot;,</span><br><span class="line">   pwd: &quot;appPass&quot;,</span><br><span class="line">   roles: [ &quot;readWrite&quot;]</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="change-a-user’s-pasword"><a href="#change-a-user’s-pasword" class="headerlink" title="change a user’s pasword"></a>change a user’s pasword</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mcc</span><br><span class="line"></span><br><span class="line">MongoDB server version: 3.4.2</span><br><span class="line">&gt; use admin</span><br><span class="line"></span><br><span class="line">&gt; db.changeUserPassword(&quot;frankg&quot;, &quot;xyz123&quot;)</span><br></pre></td></tr></table></figure><h3 id="Securing-the-server-and-password"><a href="#Securing-the-server-and-password" class="headerlink" title="Securing the server and password"></a>Securing the server and password</h3><p>Here are the commands that I use to manage the database:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias mc=&apos;mongoctl&apos;</span><br><span class="line">alias mcs=&apos;mc start --auth MyServer &apos;</span><br><span class="line"># NOTE: don&apos;t bother trying to use the useless built in rest server!!</span><br><span class="line">alias mcq=&apos;mc stop -u frankg -p $MONGO_PASS MyServer&apos;</span><br><span class="line">alias mcst=&apos;mc status -u frankg -p $MONGO_PASS MyServer&apos;</span><br><span class="line">alias mcc=&apos;mc connect -u frankg -p $MONGO_PASS MyServer&apos;</span><br></pre></td></tr></table></figure><h4 id="securing-the-server"><a href="#securing-the-server" class="headerlink" title="securing the server"></a>securing the server</h4><p>The command used to start the server is:</p><p><code>alias mcs=&#39;mc start --auth MyServer&#39;</code></p><p>The key option for security is <code>--auth</code>.  This puts the database in secure mode requiring usernames and passwords.</p><h4 id="securing-the-password"><a href="#securing-the-password" class="headerlink" title="securing the password"></a>securing the password</h4><p>Notice that I do not use the <code>password</code> in this commands script.  Because that’s easy for a hacker to find. For example see this command:</p><p><code>alias mcq=&#39;mc stop -u frankg -p $MONGO_PASS MyServer&#39;</code></p><p>The password is represented by an environment variable <code>$MONGO_PASS</code></p><p>If a user opens a terminal and tries to use the mongo client with the <code>mcc</code> command it will not work.  In order to make it work you need to create the environment variable in your terminal like so:</p><p><code>export MONGO_PASS=xyz123</code></p><p>Now you can use the <code>mcc</code> command and work with the database.</p><p>To prevent others from access, close that terminal window when you’re done.</p>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>todomvc deep understanding</title>
      <link href="/2017/01/25/20170125-todomvc/"/>
      <url>/2017/01/25/20170125-todomvc/</url>
      
        <content type="html"><![CDATA[<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├── actions</span><br><span class="line">│   └── index.js</span><br><span class="line">├── components</span><br><span class="line">│   ├── Footer.js</span><br><span class="line">│   ├── Header.js</span><br><span class="line">│   ├── MainSection.js</span><br><span class="line">│   ├── TextInput.js</span><br><span class="line">│   └── TodoItem.js</span><br><span class="line">├── constants</span><br><span class="line">│   ├── ActionTypes.js</span><br><span class="line">│   └── TodoFilters.js</span><br><span class="line">├── containers</span><br><span class="line">│   └── App.js</span><br><span class="line">├── index.js</span><br><span class="line">└── reducers</span><br><span class="line">    ├── index.js</span><br><span class="line">    └── todos.js</span><br></pre></td></tr></table></figure><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(reducers)</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125; &gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>containers/App.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const App = (&#123;todos, actions&#125;) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header addTodo=&#123;actions.addTodo&#125; /&gt;</span><br><span class="line">      &lt;MainSection todos=&#123;todos&#125; actions=&#123;actions&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App.propTypes = &#123;</span><br><span class="line">  todos: PropTypes.array.isRequired,</span><br><span class="line">  actions: PropTypes.object.isRequired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mapStateToProps = (state) =&gt; (&#123;</span><br><span class="line">  todos: state.todos</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const mapDispatchToProps = (dispatch) =&gt; (&#123;</span><br><span class="line">  actions: bindActionCreators(todoActions, dispatch)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(App)</span><br></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>constants</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">export const ADD_TODO = &apos;ADD_TODO&apos;</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>actions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">export const addTodo = (text) =&gt; (&#123;type: ADD_TODO, text&#125;)</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>reducers/index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">const rootReducer = combineReducers(&#123;</span><br><span class="line">  todos</span><br><span class="line">&#125;)</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>reducers/todos</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">const initialState = [&#123;...&#125;]</span><br><span class="line"></span><br><span class="line">const todos = (state = initialState, action) =&gt; &#123;</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    [...]</span><br><span class="line">    case DELETE_TODO:</span><br><span class="line">      return state.filter(todo =&gt; todo.id !== action.id)</span><br><span class="line">    [...]</span><br></pre></td></tr></table></figure><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><ul><li>Header imports:<ul><li>TextInput</li></ul></li><li>Header props needed:<ul><li>addTodo: add todo to list</li></ul></li><li>Header methods:<ul><li>handleSave: wraps addTodo to prevent empty todos</li></ul></li><li>Header renders: a header containing a title and TextInput<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;header className=&quot;header&quot;&gt;</span><br><span class="line">    &lt;h1&gt;todos&lt;/h1&gt;</span><br><span class="line">    &lt;TextInput newTodo</span><br><span class="line">      onSave=&#123;this.handleSave&#125;</span><br><span class="line">      placeholder=&quot;What needs to be done?&quot; /&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h3><ul><li>TextInput imports:<ul><li>classnames</li></ul></li><li>TextInput props needed:<ul><li>onSave: func.isRequired</li><li>text: string</li><li>placeholder: string</li><li>editing: bool</li><li>newTodo: bool</li></ul></li><li>TextInput local state:<ul><li>text: this.props.text || ‘’</li></ul></li><li>TextInput methods:<ul><li>handleSubmit: save on enter-key, clear local state when new-todo</li><li>handleChange: update local state</li><li>handleBlur: save when not new-todo</li></ul></li><li>TextInput conditional classes:<ul><li>edit: this.props.editing,</li><li>‘new-todo’: this.props.newTodo</li></ul></li><li>TextInput render: an input tag<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;input className=&#123;</span><br><span class="line">    classnames(&#123;</span><br><span class="line">      edit: this.props.editing,</span><br><span class="line">      &apos;new-todo&apos;: this.props.newTodo</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    placeholder=&#123;this.props.placeholder&#125;</span><br><span class="line">    autoFocus=&quot;true&quot;</span><br><span class="line">    value=&#123;this.state.text&#125;</span><br><span class="line">    onBlur=&#123;this.handleBlur&#125;</span><br><span class="line">    onChange=&#123;this.handleChange&#125;</span><br><span class="line">    onKeyDown=&#123;this.handleSubmit&#125; /&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="MainSection"><a href="#MainSection" class="headerlink" title="MainSection"></a>MainSection</h3><ul><li>MainSection imports:<ul><li>TodoItem</li><li>Footer</li><li>TodoFilters</li></ul></li><li>MainSection props needed:<ul><li>todos: array</li><li>actions: object</li></ul></li><li>MainSection local state:<ul><li>filter: SHOW_ALL</li></ul></li><li><p>MainSection methods:</p><ul><li>handleClearCompleted: wraps clearCompleted (not necessary)</li><li>handleSetFilter: reset filter on local state</li><li><p>renderToggleAll: render toggleAll checkbox in header area via css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (todos.length) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;input className=&quot;toggle-all&quot;</span><br><span class="line">           type=&quot;checkbox&quot;</span><br><span class="line">           checked=&#123;completedCount === todos.length&#125;</span><br><span class="line">           onChange=&#123;actions.completeAll&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>renderFooter: prepare props and render Footer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (todos.length) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Footer</span><br><span class="line">      completedCount=&#123;completedCount&#125;</span><br><span class="line">      activeCount=&#123;activeCount&#125;</span><br><span class="line">      filter=&#123;filter&#125;</span><br><span class="line">      onClearCompleted=&#123;clearCompleted&#125;</span><br><span class="line">      onSetFilter=&#123;this.handleSetFilter&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>MainSection conditional classes:</p><ul><li>none</li></ul></li><li>MainSection render: a section containing toggle-all, todo-list, footer<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;section className=&quot;main&quot;&gt;</span><br><span class="line">    &#123;this.renderToggleAll(completedCount)&#125;</span><br><span class="line">    &lt;ul className=&quot;todo-list&quot;&gt;</span><br><span class="line">      &#123;filteredTodos.map(todo =&gt;</span><br><span class="line">        &lt;TodoItem key=&#123;todo.id&#125; todo=&#123;todo&#125; &#123;...actions&#125; /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;this.renderFooter(completedCount)&#125;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="TodoItem"><a href="#TodoItem" class="headerlink" title="TodoItem"></a>TodoItem</h3><ul><li>TodoItem imports:<ul><li>classnames</li><li>TextInput</li></ul></li><li>TodoItem props needed:<ul><li>todo: object</li><li>completeTodo: func</li><li>editTodo: func</li><li>deleteTodo: func</li></ul></li><li>TodoItem local state:<ul><li>editing: false</li></ul></li><li><p>TodoItem methods:</p><ul><li>handleDoubleClick: set editing to true on local state</li><li>handleSave: when text editTodo else deleteTodo then set editing to false on local state</li><li>getTodoElement: when editing render todo in edit-mode else non-edit-mode<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if (this.state.editing) &#123;</span><br><span class="line">  element = (</span><br><span class="line">    &lt;TodoTextInput text=&#123;todo.text&#125;</span><br><span class="line">                   editing=&#123;this.state.editing&#125;</span><br><span class="line">                   onSave=&#123;(text) =&gt; this.handleSave(todo.id, text)&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  element = (</span><br><span class="line">    &lt;div className=&quot;view&quot;&gt;</span><br><span class="line">      &lt;input className=&quot;toggle&quot;</span><br><span class="line">             type=&quot;checkbox&quot;</span><br><span class="line">             checked=&#123;todo.completed&#125;</span><br><span class="line">             onChange=&#123;() =&gt; completeTodo(todo.id)&#125; /&gt;</span><br><span class="line">      &lt;label onDoubleClick=&#123;this.handleDoubleClick&#125;&gt;</span><br><span class="line">        &#123;todo.text&#125;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;button className=&quot;destroy&quot;</span><br><span class="line">              onClick=&#123;() =&gt; deleteTodo(todo.id)&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>TodoItem conditional classes:</p><ul><li>completed: todo.completed,</li><li>editing: this.state.editing</li></ul></li><li>TodoItem render:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;li className=&#123;classnames(&#123;</span><br><span class="line">    completed: todo.completed,</span><br><span class="line">    editing: this.state.editing</span><br><span class="line">  &#125;)&#125;&gt;</span><br><span class="line">    &#123;element&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h3><ul><li>Footer imports:<ul><li>classnames</li><li>TodoFilters</li></ul></li><li>Footer variables:<ul><li>FILTER_TITLES: object with labels for filter buttons</li></ul></li><li>Footer props needed:<ul><li>completedCount: number</li><li>activeCount: number</li><li>filter: string</li><li>onClearCompleted: func</li><li>onSetFilter: func</li></ul></li><li>Footer local state:<ul><li>none</li></ul></li><li><p>Footer methods:</p><ul><li><p>renderTodoCount: display filter count for 0/1/&gt;1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;span className=&quot;todo-count&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;activeCount || &apos;No&apos;&#125;&lt;/strong&gt; &#123;itemWord&#125; left</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>renderFilterLink: setup filter buttons</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;a className=&#123;classnames(&#123; selected: filter === selectedFilter &#125;)&#125;</span><br><span class="line">     style=&#123;&#123; cursor: &apos;pointer&apos; &#125;&#125;</span><br><span class="line">     onClick=&#123;() =&gt; onSetFilter(filter)&#125;&gt;</span><br><span class="line">    &#123;title&#125;</span><br><span class="line">  &lt;/a&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>renderClearButton: render clear button when completed todos exist</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (completedCount &gt; 0) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;button className=&quot;clear-completed&quot;</span><br><span class="line">            onClick=&#123;onClearCompleted&#125; &gt;</span><br><span class="line">      Clear completed</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Footer conditional classes:</p><ul><li>selected: filter === selectedFilter –––&gt; renderFilterLink</li></ul></li><li>Footer render:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;footer className=&quot;footer&quot;&gt;</span><br><span class="line">    &#123;this.renderTodoCount()&#125;</span><br><span class="line">    &lt;ul className=&quot;filters&quot;&gt;</span><br><span class="line">      &#123;[ SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED ].map(filter =&gt;</span><br><span class="line">        &lt;li key=&#123;filter&#125;&gt;</span><br><span class="line">          &#123;this.renderFilterLink(filter)&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;this.renderClearButton()&#125;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> example </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Coding Tidbits</title>
      <link href="/2016/12/15/20161215-tidbits/"/>
      <url>/2016/12/15/20161215-tidbits/</url>
      
        <content type="html"><![CDATA[<h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><ul><li><code>lerna</code>: a way to manage many repositories in one git repo</li><li><code>commander</code>: utility for making CLI based apps</li><li><code>create-react-app</code>: utility for providing a no-config react dev environment</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> packages </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TDD</title>
      <link href="/2016/12/15/20161215-tdd/"/>
      <url>/2016/12/15/20161215-tdd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://goo.gl/LDzikG" target="_blank" rel="noopener">reference</a></p><h2 id="TDD-Part-1-Getting-Started"><a href="#TDD-Part-1-Getting-Started" class="headerlink" title="TDD Part 1 - Getting Started"></a>TDD Part 1 - Getting Started</h2><ul><li>The mantra: red green, refactor</li></ul><h3 id="App-Structure"><a href="#App-Structure" class="headerlink" title="App Structure"></a>App Structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir myapp</span><br><span class="line">cd myapp</span><br><span class="line"></span><br><span class="line">npm init -y</span><br><span class="line">npm i -S mocha chai</span><br></pre></td></tr></table></figure><p>The requirements</p><ol><li>Send a request to the Flickr API, and retrieve a bunch of photograph data;</li><li>Transform the data into a single array of objects, each object containing just the data we need;</li><li>Convert the array of objects into an HTML list; and</li><li>Add the HTML to the page.</li></ol><p>the code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── package.json</span><br><span class="line">└── src</span><br><span class="line">    ├── flickr-spec.js</span><br><span class="line">    ├── flickr.js</span><br><span class="line">    ├── photos-spec.js</span><br><span class="line">    └── photos.js</span><br></pre></td></tr></table></figure><p>package.json scripts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;mocha ./src/*-spec.js --reporter=nyan&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Things-to-remember"><a href="#Things-to-remember" class="headerlink" title="Things to remember"></a>Things to remember</h3><ul><li>use <code>.to.eql</code> vs. <code>.to.equal</code> for deep checking</li></ul><h3 id="ROUND-1"><a href="#ROUND-1" class="headerlink" title="ROUND 1"></a>ROUND 1</h3><ul><li>assert: flickr file exists</li><li>assert: photoObjToURL returns correct URL</li><li><code>RED</code>: error: photoObjToURL not found</li><li>code: add fn photoObjToURL</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: return simplest result; hardcode results</li><li><code>GREEN</code>: assertions pass</li><li><code>REFACTOR</code>: assert: photoObjToURL with different params returns correct result</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: make photoObjToURL pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: refactor photoObjToURL to use Array.join</li><li><code>GREEN</code></li></ul><h3 id="ROUND-2"><a href="#ROUND-2" class="headerlink" title="ROUND 2"></a>ROUND 2</h3><ul><li>assert: transformPhotoObj transforms photObj to object with title and URL</li><li><code>RED</code>: error: transformPhotoObj not found</li><li>code: add fn transformPhotoObj</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: return simplest result; hardcode results</li><li><code>GREEN</code>: assertions pass</li><li><code>REFACTOR</code>: assert: transformPhotoObj with different params returns correct result</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: make transformPhotoObj pass</li><li><code>GREEN</code></li></ul><h2 id="TDD-Part-2-Working-with-Network-Requests"><a href="#TDD-Part-2-Working-with-Network-Requests" class="headerlink" title="TDD Part 2 - Working with Network Requests"></a>TDD Part 2 - Working with Network Requests</h2><p>Things that make this tricky</p><ul><li>Testing an API call needs access to the network, which I can’t always guarantee;</li><li>Network calls in JavaScript are asynchronous. This means that when we make a network request we interrupt the normal code flow</li><li>The results from the network call change often. This is the whole point of the network call—but it makes it somewhat difficult to test.</li></ul><p>Problems calling the network</p><ul><li>The data coming back from the live Flickr API changes all the time. Unless I’m careful about how I write my tests, they would pass for maybe a minute before new data broke my test.</li><li>Making network calls can be slow, and the slower my tests, the less fun TDD becomes.</li><li>Doing things this way needs an internet connection. I regularly find myself writing code on a bus, or a train, or some other location without (fast) access to the internet.</li></ul><p>Think like a functional programmer. Network calls (fetch()) involve side effects, making my function impure. But, if I can isolate the impure part then I have a pure, testable function. In other words, make fetch() a parameter that I passed into my function.</p><p>In the application code, I would pass fetch() as a parameter. In my test though, I can pass a fake fetch() method that always returns a promise for the same data. Then I can check that my function returns exactly what I expect, without making a network call.</p><h3 id="Dealing-with-asyncrhonous-calls"><a href="#Dealing-with-asyncrhonous-calls" class="headerlink" title="Dealing with asyncrhonous calls"></a>Dealing with asyncrhonous calls</h3><p>Mocha provides a parameter to the <code>it()</code> callback called <code>done</code> that allows us to tell Mocha when the test is complete.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;#fetchFlickrData()&apos;, function() &#123;</span><br><span class="line">    it(&apos;should return a promise for JSON data.&apos;, (done) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      var apiKey      = &apos;...&apos;,</span><br><span class="line">          fakeData    = &#123;...&#125;,</span><br><span class="line">          fakeFetcher = function(url) &#123;</span><br><span class="line">              var expectedURL = &apos;https://api.flickr.com/services/rest/?method=flickr.photos.search&amp;api_key=&apos;</span><br><span class="line">                          + apiKey + &apos;&amp;text=pugs&amp;format=json&amp;nojsoncallback=1&apos;</span><br><span class="line">              expect(url).to.equal(expectedURL)</span><br><span class="line">              return Promise.resolve(fakeData);</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">      FlickrFetcher.fetchFlickrData(apiKey, fakeFetcher)</span><br><span class="line">        .then((actual) =&gt; &#123;</span><br><span class="line">          expect(actual).to.eql(fakeData);</span><br><span class="line">          done();</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>RED</code>: error: FlickrFetcher.fetchFlickrData not found</li></ul><h3 id="Stubs"><a href="#Stubs" class="headerlink" title="Stubs"></a>Stubs</h3><p>Now that I have a failing test, let’s take a moment to talk about what this is doing. The fakeFetcher() function I’ve used to replace <code>fetch</code> is known as a stub. A stub is a piece of code that has the same API and behaviour as the ‘real’ code, but with much reduced functionality. Usually this means returning static data instead of interacting with some external resource.</p><p>Stubs can replace many different types of code besides network calls. Most often we use them for things functional programmers call side effects. Typical stubs might replace things like:</p><ul><li>Queries to a relational database</li><li>Interaction with the file system</li><li>Accepting user input</li><li>Complex computations that take a long time to calculate.</li></ul><p>Stubs don’t always have to replace asynchronous or even slow things. It may simply be a piece of code you haven’t written yet. A stub can replace almost anything.</p><p>Stubs are an important tool for TDD. They help us to keep tests running fast so our workflow doesn’t slow down. More importantly, they allow us to have consistent tests for things that are inherently variable (like network calls).</p><p>Stubs do take a little bit of effort to use well though. For instance, using a stub meant adding an extra parameter to the fetchFlickrData() function. However, if you are using a slightly functional-flavoured style of programming, then you will be thinking about things like side effects and pure functions anyway. I would also argue that making your code testable (whether that’s using stubs or not) is usually worth the effort.</p><h3 id="Back-to-the-code…"><a href="#Back-to-the-code…" class="headerlink" title="Back to the code…."></a>Back to the code….</h3><ul><li><code>RED</code>: error: FlickrFetcher.fetchFlickrData not found</li><li>code: simply hardcoding isn’t so simple so, create fetchFlickrData and make it pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: fetchFlickrData: remove redundant code</li><li><code>REFACTOR</code>: tests: mocha allow you to return a promise is an alternate way to handle asynchronous code</li><li><code>GREEN</code></li><li>assert: fetchPhotos returns correct results</li><li><code>RED</code>: fetchPhotos not found</li><li>code: it’s simple to code it up</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li><li><code>GREEN</code></li></ul><h2 id="TDD-Part-3-Working-with-HTML-and-DOM"><a href="#TDD-Part-3-Working-with-HTML-and-DOM" class="headerlink" title="TDD Part 3 - Working with HTML and DOM"></a>TDD Part 3 - Working with HTML and DOM</h2><h3 id="Working-with-HTML-strings"><a href="#Working-with-HTML-strings" class="headerlink" title="Working with HTML strings"></a>Working with HTML strings</h3><p>So, I now have a module that will fetch a list of photos from Flickr and extract just the data that I want. The next step is to take that data and do something with it—in this case, inject it into a web page. So I’ll create a new module to handle the presentation of the data.</p><p>Straight away, I can write a simple test to check that my module exists.</p><ul><li>assert: PhotoLister exists</li><li><code>GREEN</code></li><li>assert: photoToListItem() takes photoObj and returns listString</li><li><code>RED</code>: photoToListItem not found</li><li>code: return simplest result; hardcode results</li><li><code>GREEN</code></li><li>assert: photoToListItem() with different params returns correct results</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: make photoToListItem pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: photoToListItem: replace concatenations with Array.join</li><li><code>GREEN</code></li><li>assert: photoListToHTML() converts photoObj array to HTML list</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: make photoListToHTML pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: photoListToHTML: replace concatenations with Array.join</li><li><code>GREEN</code></li></ul><h3 id="Working-with-the-DOM"><a href="#Working-with-the-DOM" class="headerlink" title="Working with the DOM"></a>Working with the DOM</h3><p>Now that I’ve got my list ready to go, it would be great if I could check that it gets added to the page. But the catch is, that up ’til now, I’ve been working purely in Node, without a browser. I’ve done this deliberately as:</p><ul><li>Tests run much faster on the command line;</li><li>It encourages me to think about how I can keep my code flexible; and</li><li>Mocha gives me that fun Nyan Cat reporter on the command line.</li></ul><p>Without a browser though, I can’t use jQuery or regular DOM methods to check that everything is working. Fortunately there is a very handy node module called cheerio that will emulate much of the jQuery API for us. This means that I can test my functions that manipulate the DOM without loading up a headless browser or completely changing my testing approach.</p><p>To get started, I need to install cheerio, by running npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio --save-dev</span><br></pre></td></tr></table></figure><ul><li>assert: addPhotosToElement($, selector, list) adds HTML string to element given a selector</li><li><code>RED</code>: addPhotosToElement not found</li><li>code: simple just to code it since it’s a one liner</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li><li><code>GREEN</code></li></ul><h3 id="Putting-it-onto-a-web-page"><a href="#Putting-it-onto-a-web-page" class="headerlink" title="Putting it onto a web page"></a>Putting it onto a web page</h3><p>So far, we have been (deliberately) doing everything in Node, and not in a browser. This is good, but the whole point of this module is to display photos in a browser, not just to make tests pass. So I need to make a few tweaks to the code so that it will run in both environments.</p><p>This is a form of refactoring. Each time I make a change I will re-run my tests to make sure they still pass.</p><p>The first thing I’ll do is wrap a conditional around the module.exports so that the browser won’t throw an error if I just include the code in a web page. I could, of course, use something like Browserify or Webpack to package these up (and if you can, I highly recommend you do), but it’s nice to make them work either way. If I just want to throw the code in something like CodePen, for example, I’d prefer not to do a full Webpack setup:</p><ul><li>code: wrap module.exports to avoid the necessity of webpack or browserify</li><li><code>GREEN</code></li><li>code: index.css to add some style</li><li>code: index.html to include modules and call to FlickrFetcher.fetchPhotos()</li><li>run: open index.html in the browser and watch it work</li><li>links: <a href="">running demo</a>, <a href="">github repo</a></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This is the tip of the ice-berg but it’s a good intro if I do say so myself :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TDD Refined</title>
      <link href="/2016/12/15/20161215-tdd-refined/"/>
      <url>/2016/12/15/20161215-tdd-refined/</url>
      
        <content type="html"><![CDATA[<h1 id="TDD-Part-1-Getting-Started"><a href="#TDD-Part-1-Getting-Started" class="headerlink" title="TDD Part 1 - Getting Started"></a>TDD Part 1 - Getting Started</h1><h2 id="The-Development-Environment"><a href="#The-Development-Environment" class="headerlink" title="The Development Environment"></a>The Development Environment</h2><p>A huge problem that is being corrected lately is configuring your Javascript development environment.  </p><p>I create a git repo called <code>mocha-starter</code> with the following features:</p><ul><li><code>testing</code>:<ul><li>supports mocha/expect syntax</li><li>supports testing coding conventions using the <code>JavaScript Standard Style</code></li></ul></li><li><code>pre-commit hooks</code>:<ul><li>supports blocking commits that do not pass tests which include linting. (override with -n)</li></ul></li></ul><p>So just clone the repo and replace sample app.</p><h2 id="The-Requirements"><a href="#The-Requirements" class="headerlink" title="The Requirements"></a>The Requirements</h2><p>We will create an app that nicely displays images from a Flickr account.</p><table><thead><tr><th style="text-align:left">Function</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">fetchPhotos(apiKey, fetchJSON)</td><td style="text-align:left">pull an array of images from Flickr</td></tr><tr><td style="text-align:left">transformPhotoObj(photoObj)</td><td style="text-align:left">transforms photo object to include only title and url</td></tr><tr><td style="text-align:left">photoListToHTML(photos)</td><td style="text-align:left">convert array of images to HTML string</td></tr><tr><td style="text-align:left">addPhotosToElement($, ‘#root’, photosHTML)</td><td style="text-align:left">inserts HTML string into DOM</td></tr></tbody></table><p>Flickr API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// URL to get photos</span><br><span class="line">  &apos;https://api.flickr.com/services/rest/?&apos;,</span><br><span class="line">  &apos;api_key=&apos;, apiKey,</span><br><span class="line">  &apos;&amp;method=flickr.photos.search&amp;text=pugs&amp;format=json&amp;nojsoncallback=1&apos;</span><br><span class="line"></span><br><span class="line">// URL to get image</span><br><span class="line">  &apos;https://farm&apos;,</span><br><span class="line">  photoObj.farm, &apos;.staticflickr.com/&apos;,</span><br><span class="line">  photoObj.server, &apos;/&apos;,</span><br><span class="line">  photoObj.id, &apos;_&apos;,</span><br><span class="line">  photoObj.secret, &apos;_b.jpg&apos;</span><br></pre></td></tr></table></figure><p>Resources used:</p><ul><li><code>fetch</code>: (included in google chrome) for accessing the Flickr API.</li><li><code>jQuery</code>: to insert into DOM</li><li><code>cheerio</code>: for working with fake DOM</li><li><code>Cuprum</code>: from google fonts.</li></ul><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Fonts</span><br><span class="line">&lt;link href=&apos;https://fonts.googleapis.com/css?family=Cuprum&apos; rel=&apos;stylesheet&apos; type=&apos;text/css&apos;&gt;</span><br><span class="line"></span><br><span class="line">// jQuery</span><br><span class="line">&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.2/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>photos HTML structure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;figure&gt;</span><br><span class="line">      &lt;img src=&quot;$&#123;photo.url&#125;&quot; alt=&quot;&quot;/&gt;</span><br><span class="line">      &lt;figcaption&gt;</span><br><span class="line">        $&#123;photo.title&#125;</span><br><span class="line">      &lt;/figcaption&gt;</span><br><span class="line">    &lt;/figure&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  [...]</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="Coding-Time"><a href="#Coding-Time" class="headerlink" title="Coding Time"></a>Coding Time</h2><blockquote><p>Note: Use <code>npm run dev</code> to start the TDD process.  Restart if you add new files.</p></blockquote><h2 id="photoObjToURL"><a href="#photoObjToURL" class="headerlink" title="photoObjToURL()"></a>photoObjToURL()</h2><ul><li>assert: flickr file exists</li><li><code>RED</code>: error: cannot find flickr.js</li><li>code: create flickr.js</li><li><code>GREEN</code></li><li>assert: photoObjToURL returns correct result</li><li><code>RED</code>: Assertion Error</li><li>code: simplest algorithm; hardcoded result</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: assert: photoObjToURL with different params, returns correct result</li><li><code>RED</code>: Assertion Error</li><li>code: simplest algorithm; make photoObjToURL pass</li><li><code>GREEN</code></li></ul><h2 id="transformPhotoObj"><a href="#transformPhotoObj" class="headerlink" title="transformPhotoObj()"></a>transformPhotoObj()</h2><ul><li>assert: transformPhotoObj returns correct result</li><li><code>RED</code>: Assertion Error</li><li>code: simplest algorithm; hardcoded result</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: assert: transformPhotoObj with different params, returns correct result</li><li><code>RED</code>: Assertion Error</li><li>code: simplest algorithm; make transformPhotoObj pass</li><li><code>GREEN</code></li></ul><h2 id="TDD-Part-2-Working-with-Network-Requests"><a href="#TDD-Part-2-Working-with-Network-Requests" class="headerlink" title="TDD Part 2 - Working with Network Requests"></a>TDD Part 2 - Working with Network Requests</h2><p>Things that make this tricky</p><ul><li>Testing an API call needs access to the network, which I can’t always guarantee;</li><li>Network calls in JavaScript are asynchronous. This means that when we make a network request we interrupt the normal code flow</li><li>The results from the network call change often. This is the whole point of the network call—but it makes it somewhat difficult to test.</li></ul><p>Problems calling the network</p><ul><li>The data coming back from the live Flickr API changes all the time. Unless I’m careful about how I write my tests, they would pass for maybe a minute before new data broke my test.</li><li>Making network calls can be slow, and the slower my tests, the less fun TDD becomes.</li><li>Doing things this way needs an internet connection. I regularly find myself writing code on a bus, or a train, or some other location without (fast) access to the internet.</li></ul><p>Think like a functional programmer. Network calls (fetch()) involve side effects, making my function impure. But, if I can isolate the impure part then I have a pure, testable function. In other words, make fetch() a parameter that I passed into my function.</p><p>In the application code, I would pass fetch() as a parameter. In my test though, I can pass a fake fetch() method that always returns a promise for the same data. Then I can check that my function returns exactly what I expect, without making a network call.</p><h2 id="Dealing-with-asyncrhonous-calls"><a href="#Dealing-with-asyncrhonous-calls" class="headerlink" title="Dealing with asyncrhonous calls"></a>Dealing with asyncrhonous calls</h2><p>Mocha provides a parameter to the <code>it()</code> callback called <code>done</code> that allows us to tell Mocha when the test is complete.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;#someAsyncFn()&apos;, () =&gt; &#123;</span><br><span class="line">  it(&apos;should return a promise for JSON data.&apos;, (done) =&gt; &#123;</span><br><span class="line">    someAsyncFn()</span><br><span class="line">      .then(done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Stubs"><a href="#Stubs" class="headerlink" title="Stubs"></a>Stubs</h2><p>Now that I have a failing test, let’s take a moment to talk about what this is doing. The fakeFetcher() function I’ve used to replace <code>fetch</code> is known as a stub. A stub is a piece of code that has the same API and behaviour as the ‘real’ code, but with much reduced functionality. Usually this means returning static data instead of interacting with some external resource.</p><p>Stubs can replace many different types of code besides network calls. Most often we use them for things functional programmers call side effects. Typical stubs might replace things like:</p><ul><li>Queries to a relational database</li><li>Interaction with the file system</li><li>Accepting user input</li><li>Complex computations that take a long time to calculate.</li></ul><p>Stubs don’t always have to replace asynchronous or even slow things. It may simply be a piece of code you haven’t written yet. A stub can replace almost anything.</p><p>Stubs are an important tool for TDD. They help us to keep tests running fast so our workflow doesn’t slow down. More importantly, they allow us to have consistent tests for things that are inherently variable (like network calls).</p><p>Stubs do take a little bit of effort to use well though. For instance, using a stub meant adding an extra parameter to the fetchFlickrData() function. However, if you are using a slightly functional-flavoured style of programming, then you will be thinking about things like side effects and pure functions anyway. I would also argue that making your code testable (whether that’s using stubs or not) is usually worth the effort.</p><p>Back to the code….</p><h2 id="fetchFlickrData"><a href="#fetchFlickrData" class="headerlink" title="fetchFlickrData()"></a>fetchFlickrData()</h2><ul><li>assert: fetchFlickrData returns correct results</li><li>assert: fetchPhotos returns correct results</li><li><code>RED</code>: error: fetchPhotos not found</li><li>code: simplest algorithm; code proper fetchPhotos</li><li><code>RED</code>: error: fetchFlickrData not found</li><li>code: simplest algorithm; code proper fetchFlickrData</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li></ul><h2 id="TDD-Part-3-Working-with-HTML-and-DOM"><a href="#TDD-Part-3-Working-with-HTML-and-DOM" class="headerlink" title="TDD Part 3 - Working with HTML and DOM"></a>TDD Part 3 - Working with HTML and DOM</h2><h2 id="Working-with-HTML-strings"><a href="#Working-with-HTML-strings" class="headerlink" title="Working with HTML strings"></a>Working with HTML strings</h2><p>So, I now have a module that will fetch a list of photos from Flickr and extract just the data that I want. The next step is to take that data and do something with it—in this case, inject it into a web page. So I’ll create a new module to handle the presentation of the data.</p><p>Straight away, I can write a simple test to check that my module exists.</p><h2 id="PhotoLister-photoToListItem"><a href="#PhotoLister-photoToListItem" class="headerlink" title="PhotoLister.photoToListItem()"></a>PhotoLister.photoToListItem()</h2><ul><li>assert: Photos.js exists</li><li><code>RED</code>: Photos.js not found</li><li>assert: create Photos.js</li><li><code>GREEN</code></li><li>assert: PhotoLister.photoToListItem() takes photoObj and returns listString</li><li><code>RED</code>: PhotoLister.photoToListItem not found</li><li>code: simplest algorithm; hardcode results</li><li><code>GREEN</code></li><li>assert: PhotoLister.photoToListItem() with different params, returns correct results</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: make PhotoLister.photoToListItem pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li><li><code>GREEN</code></li></ul><h2 id="PhotoLister-photoListToHTML"><a href="#PhotoLister-photoListToHTML" class="headerlink" title="PhotoLister.photoListToHTML()"></a>PhotoLister.photoListToHTML()</h2><ul><li>assert: PhotoLister.photoListToHTML() converts photoObj array to HTML list</li><li><code>RED</code>: AssertionError: wrong results</li><li>code: simplest algorithm; make PhotoLister.photoListToHTML pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li><li><code>GREEN</code></li></ul><h2 id="Working-with-the-DOM"><a href="#Working-with-the-DOM" class="headerlink" title="Working with the DOM"></a>Working with the DOM</h2><p>Now that I’ve got my list ready to go, it would be great if I could check that it gets added to the page. But the catch is, that up ’til now, I’ve been working purely in Node, without a browser. I’ve done this deliberately as:</p><ul><li>Tests run much faster on the command line;</li><li>It encourages me to think about how I can keep my code flexible; and</li><li>Mocha gives me that fun Nyan Cat reporter on the command line.</li></ul><p>Without a browser though, I can’t use jQuery or regular DOM methods to check that everything is working. Fortunately there is a very handy node module called cheerio that will emulate much of the jQuery API for us. This means that I can test my functions that manipulate the DOM without loading up a headless browser or completely changing my testing approach.</p><p>To get started, I need to install cheerio, by running npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cheerio --save-dev</span><br></pre></td></tr></table></figure><h2 id="PhotoLister-addPhotosToElement"><a href="#PhotoLister-addPhotosToElement" class="headerlink" title="PhotoLister.addPhotosToElement()"></a>PhotoLister.addPhotosToElement()</h2><ul><li>assert: addPhotosToElement($, selector, list) adds HTML string to element given a selector</li><li><code>RED</code>: addPhotosToElement not found</li><li>code: simplest algorithm; make addPhotosToElement pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li><li><code>GREEN</code></li></ul><h2 id="Putting-it-onto-a-web-page"><a href="#Putting-it-onto-a-web-page" class="headerlink" title="Putting it onto a web page"></a>Putting it onto a web page</h2><p>So far, we have been (deliberately) doing everything in Node, and not in a browser. This is good, but the whole point of this module is to display photos in a browser, not just to make tests pass. So I need to make a few tweaks to the code so that it will run in both environments.</p><p>This is a form of refactoring. Each time I make a change I will re-run my tests to make sure they still pass.</p><p>The first thing I’ll do is wrap a conditional around the module.exports so that the browser won’t throw an error if I just include the code in a web page. I could, of course, use something like Browserify or Webpack to package these up (and if you can, I highly recommend you do), but it’s nice to make them work either way.</p><h2 id="PhotoLister-fetchPhotos"><a href="#PhotoLister-fetchPhotos" class="headerlink" title="PhotoLister.fetchPhotos()"></a>PhotoLister.fetchPhotos()</h2><ul><li>assert: fetchPhotos($, selector, list) adds HTML string to element given a selector</li><li><code>RED</code>: fetchPhotos not found</li><li>code: simplest algorithm; make fetchPhotos pass</li><li><code>GREEN</code></li><li><code>REFACTOR</code>: nothing to do</li><li><code>GREEN</code></li></ul><h2 id="Working-with-the-Browser"><a href="#Working-with-the-Browser" class="headerlink" title="Working with the Browser"></a>Working with the Browser</h2><h2 id="Namespacing"><a href="#Namespacing" class="headerlink" title="Namespacing"></a>Namespacing</h2><p>It is bad form to create more than one global variable as you may be clobbering another piece of code using the same name.  One technique to deal with this is to use a single global object called <code>globals</code>. With that one line <code>globals</code> will represent the global object in both the browser and node.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var globals = (typeof window !== &apos;undefined&apos;) ? window : global</span><br></pre></td></tr></table></figure><p>Of course we can avoid all this by using <code>webpack</code> or <code>browserify</code>, but sometimes that’s too much trouble.</p><h2 id="CSS-Styling"><a href="#CSS-Styling" class="headerlink" title="CSS Styling"></a>CSS Styling</h2><p>Styling CSS is beyond the scope of this post but we can highlight a few techniques used in this app.</p><p>box shadow<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-box-shadow</span>: 0 3<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.25</span>);</span><br><span class="line"><span class="selector-tag">-moz-box-shadow</span>: 0 3<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.25</span>);</span><br><span class="line"><span class="selector-tag">box-shadow</span>: 0 3<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.25</span>);</span><br></pre></td></tr></table></figure></p><p>rotate a div<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-2deg</span>);</span><br><span class="line"><span class="selector-tag">-moz-transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-2deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-tag">-2deg</span>);</span><br></pre></td></tr></table></figure></p><p>rotate the even figures: <code>li:nth-child(even) figure {...}</code><br>rotate the odd figures: <code>li:nth-child(odd) figure {...}</code><br>rotate item divisible by 3: <code>li:nth-child(3n) figure {...}</code><br>rotate item divisible by 5: <code>li:nth-child(5n) figure {...}</code></p><p>Keep in mind that the latest CSS rule overrides the previous rules.</p><h2 id="Initialize-App"><a href="#Initialize-App" class="headerlink" title="Initialize App"></a>Initialize App</h2><p>We initialize with a script:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flickr Kittens<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">'https://fonts.googleapis.com/css?family=Cuprum'</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.2/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//localhost:8080/src/flickr.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//localhost:8080/src/photos.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      app.Flickr.fetchPhotos(<span class="string">'8060d4cdac3ceb86af470aae29af3a56'</span>, app.Flickr.fetchJSON)    </span></span><br><span class="line"><span class="undefined">        .then(app.Photos.photoListToHTML)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function">(<span class="params">photosHTML</span>) =&gt;</span> app.Photos.addPhotosToElement($, <span class="string">'#mydiv'</span>, photosHTML));</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: We could have wired up jQuery with node/npm.</p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Open index.html in the browser and watch it work</p><p>This is the tip of the ice-berg but it’s a good intro if I do say so myself :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker - Volumes and Permissions</title>
      <link href="/2016/12/02/20161202-docker-volumes-and-permissions/"/>
      <url>/2016/12/02/20161202-docker-volumes-and-permissions/</url>
      
        <content type="html"><![CDATA[<p>Working with volume mounts is difficult in certain situations…</p><h3 id="Docker-for-Mac"><a href="#Docker-for-Mac" class="headerlink" title="Docker for Mac"></a>Docker for Mac</h3><p>Although Docker for Mac runs containers as root it will work with volume files as if it were you.</p><p>Hurray nothing to do here.  But continue reading because there some good Docker tips later.</p><h3 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker-Machine"></a>Docker-Machine</h3><p>When using docker containers it’s a bad idea to run your processes as root (some applications even refuse to run as root). Furthermore running as root or any user, it’s still difficult to work wth volume mounts because files will be owned by a different user. That makes working with them or cleaning them up hard and needing to resort to sudo or similar. Which is increasingly annoying in development and CI environments.</p><p><a href="https://disqus.com/home/forums/initeq/" target="_blank" rel="noopener">Denny Bertovic</a> has a great <a href="https://goo.gl/wE7tBb" target="_blank" rel="noopener">post</a> describing a way to create a base image for all your images (which he says you’re probably already doing) which will run your containers with the same UID as you.  Making working with volume mounts a breeze. I’m thinking at work you’ll probably have a shared docker user for this.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p><code>At this time I do not have a working solution for docker-machine.</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>create-react-app</title>
      <link href="/2016/12/01/20161201-create-react-app/"/>
      <url>/2016/12/01/20161201-create-react-app/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:3 withLinks:0 updateOnSave:0 orderedList:0 --><ul><li>Let’s take <code>create-react-app</code> for a spin<ul><li>Updating to new releases</li><li>Folder Structure</li><li>npm scripts</li><li>Linting</li><li>Installing a Dependency</li><li>Importing a Component</li><li>Adding stylesheets</li><li>Post-Processing CSS</li><li>Adding Images and Fonts</li><li>Using the <code>public</code> Folder</li><li>Adding Bootstrap</li><li>Adding Flow</li><li>Adding Custom Environment Variables</li><li>Can I Use Decorators?</li><li>Integrating with a Node Backend</li><li>Proxying API Requests in Development</li><li>Using HTTPS in Development</li><li>Generating Dynamic <code>&lt;meta&gt;</code> Tags on the Server</li><li>Running Tests</li><li>Deployment</li></ul></li></ul><!-- /TOC --><h2 id="Let’s-take-create-react-app-for-a-spin"><a href="#Let’s-take-create-react-app-for-a-spin" class="headerlink" title="Let’s take create-react-app for a spin"></a>Let’s take <code>create-react-app</code> for a spin</h2><h3 id="Updating-to-new-releases"><a href="#Updating-to-new-releases" class="headerlink" title="Updating to new releases"></a>Updating to new releases</h3><p>Create React App is divided into two packages:</p><ul><li><code>create-react-app</code> is a global command-line utility that you use to create new projects.</li><li><code>react-scripts</code> is a development dependency in the generated projects</li></ul><p>You almost never need to update <code>create-react-app</code> itself: it delegates all the setup to <code>react-scripts</code>. To update an existing project to a new version of react-scripts, follow the migration instructions in the <a href="https://goo.gl/1um4jV" target="_blank" rel="noopener">changelog</a>.</p><p>In most cases just up the version of <code>react-scripts</code> and do an npm install.</p><h3 id="Folder-Structure"><a href="#Folder-Structure" class="headerlink" title="Folder Structure"></a>Folder Structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">my-app/</span><br><span class="line">  README.md</span><br><span class="line">  node_modules/</span><br><span class="line">  package.json</span><br><span class="line">  public/</span><br><span class="line">    index.html</span><br><span class="line">    favicon.ico</span><br><span class="line">  src/</span><br><span class="line">    App.css</span><br><span class="line">    App.js</span><br><span class="line">    App.test.js</span><br><span class="line">    index.css</span><br><span class="line">    index.js</span><br><span class="line">    logo.svg</span><br></pre></td></tr></table></figure><p><strong>build requirements</strong></p><ul><li><code>public/index.html</code> is the page template;</li><li><code>src/index.js</code> is the JavaScript entry point.</li></ul><h3 id="npm-scripts"><a href="#npm-scripts" class="headerlink" title="npm scripts"></a>npm scripts</h3><ul><li><code>start</code>: <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></li><li><code>test</code>: interactive testing</li><li><code>run build</code>: preps for production</li><li><code>run eject</code>: move the hidden build tools to the forefront for you to configure</li></ul><h3 id="Linting"><a href="#Linting" class="headerlink" title="Linting"></a>Linting</h3><p>package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="string">"extends"</span>: <span class="string">"react-app"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm packages</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install -g \</span><br><span class="line">eslint-config-react-app@0.3.0 \</span><br><span class="line">eslint@3.8.1 \</span><br><span class="line">babel-eslint@7.0.0 \</span><br><span class="line">eslint-plugin-react@6.4.1 \</span><br><span class="line">eslint-plugin-import@2.0.1 \</span><br><span class="line">eslint-plugin-jsx-a11y@2.2.3 \</span><br><span class="line">eslint-plugin-flowtype@2.21.0</span><br></pre></td></tr></table></figure><blockquote><p>Note: The ESLint team is already working on a solution to this so this may become unnecessary in a couple of months.</p></blockquote><h3 id="Installing-a-Dependency"><a href="#Installing-a-Dependency" class="headerlink" title="Installing a Dependency"></a>Installing a Dependency</h3><p><code>npm i -S mylib</code></p><h3 id="Importing-a-Component"><a href="#Importing-a-Component" class="headerlink" title="Importing a Component"></a>Importing a Component</h3><p>You are encouraged to use ES6 <code>import</code> and <code>export</code> vs. <code>require</code> or <code>module.exports</code></p><h3 id="Adding-stylesheets"><a href="#Adding-stylesheets" class="headerlink" title="Adding stylesheets"></a>Adding stylesheets</h3><p><code>Button.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Button.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Button.css'</span>; <span class="comment">// Tell Webpack that Button.js uses these styles</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// You can use them as regular CSS styles</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"Button"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Post-Processing-CSS"><a href="#Post-Processing-CSS" class="headerlink" title="Post-Processing CSS"></a>Post-Processing CSS</h3><p>This project setup minifies your CSS and adds vendor prefixes to it automatically through <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a> so you don’t need to worry about it.</p><h3 id="Adding-Images-and-Fonts"><a href="#Adding-Images-and-Fonts" class="headerlink" title="Adding Images and Fonts"></a>Adding Images and Fonts</h3><p>With Webpack, using static assets like images and fonts works similarly to CSS.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.png'</span>; <span class="comment">// Tell Webpack this JS file uses this image</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(logo); <span class="comment">// /logo.84287d09.png</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Import result is the URL of your image</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">alt</span>=<span class="string">"Logo"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>This works in CSS too:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./logo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-the-public-Folder"><a href="#Using-the-public-Folder" class="headerlink" title="Using the public Folder"></a>Using the <code>public</code> Folder</h3><p>We encourage you to <code>import</code> assets in JavaScript files as described above.</p><p>However there is an <strong>escape hatch</strong></p><p>If you put a file into the <code>public</code> folder, it will <strong>not</strong> be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the <code>public</code> folder, you need to use a special variable called <code>PUBLIC_URL</code>.</p><p>Inside <code>index.html</code>, you can use it like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Only files inside the <code>public</code> folder will be accessible by <code>%PUBLIC_URL%</code> prefix. If you need to use a file from <code>src</code> or <code>node_modules</code>, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.</p><p>When you run <code>npm run build</code>, Create React App will substitute <code>%PUBLIC_URL%</code> with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.</p><p>In JavaScript code, you can use <code>process.env.PUBLIC_URL</code> for similar purposes:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// Note: this is an escape hatch and should be used sparingly!</span></span><br><span class="line">  <span class="comment">// Normally we recommend using `import` for getting asset URLs</span></span><br><span class="line">  <span class="comment">// as described in “Adding Images and Fonts” above this section.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;process.env.PUBLIC_URL</span> + '/<span class="attr">img</span>/<span class="attr">logo.png</span>'&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Adding-Bootstrap"><a href="#Adding-Bootstrap" class="headerlink" title="Adding Bootstrap"></a>Adding Bootstrap</h3><p>You don’t have to use <a href="https://react-bootstrap.github.io" target="_blank" rel="noopener">React Bootstrap</a> together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:</p><p>Install React Bootstrap and Bootstrap from NPM. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react-bootstrap --save</span><br><span class="line">npm install bootstrap@3 --save</span><br></pre></td></tr></table></figure><p>Import Bootstrap CSS and optionally Bootstrap theme CSS in the <figure class="highlight plain"><figcaption><span>file:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">import &apos;bootstrap/dist/css/bootstrap.css&apos;;</span><br><span class="line">import &apos;bootstrap/dist/css/bootstrap-theme.css&apos;;</span><br></pre></td></tr></table></figure></p><p>Import required React Bootstrap components within <figure class="highlight plain"><figcaption><span>file or your custom component files:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">import &#123; Navbar, Jumbotron, Button &#125; from &apos;react-bootstrap&apos;;</span><br></pre></td></tr></table></figure></p><p>Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example <a href="https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js" target="_blank" rel="noopener"><code>App.js</code></a> redone using React Bootstrap.</p><h3 id="Adding-Flow"><a href="#Adding-Flow" class="headerlink" title="Adding Flow"></a>Adding Flow</h3><p>I don’t recommend it so skipping</p><h3 id="Adding-Custom-Environment-Variables"><a href="#Adding-Custom-Environment-Variables" class="headerlink" title="Adding Custom Environment Variables"></a>Adding Custom Environment Variables</h3><p>Your project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have <code>NODE_ENV</code> defined for you, and any other environment variables starting with <code>REACT_APP_</code>. These environment variables will be defined for you on <code>process.env</code>. For example, having an environment variable named <code>REACT_APP_SECRET_CODE</code> will be exposed in your JS as <code>process.env.REACT_APP_SECRET_CODE</code>, in addition to <code>process.env.NODE_ENV</code>.</p><blockquote><p>Note: Changing any environment variables will require you to restart the development server if it is running.</p></blockquote><p>Having access to the <code>NODE_ENV</code> is useful for performing actions conditionally:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  analytics.disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To defined an env var in the environment can be done using two ways:</p><ul><li>in your shell</li><li>in a <code>.env</code> file.</li></ul><p><strong>Adding Temporary Environment Variables In Your Shell</strong></p><p>Defining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the life of the shell session.</p><p><em>Windows (cmd.exe)</em></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> REACT_APP_SECRET_CODE=abcdef&amp;&amp;npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>(Note: the lack of whitespace is intentional.)</p><p><em>Linux, OS X (Bash)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_SECRET_CODE=abcdef npm start</span><br></pre></td></tr></table></figure><p><strong>Adding Development Environment Variables In <code>.env</code></strong></p><p>To define permanent environment variables, create a file called <code>.env</code> in the root of your project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_SECRET_CODE=abcdef</span><br></pre></td></tr></table></figure><blockquote><p>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need these defined as well. Consult their documentation how to do this. For example, see the documentation for <a href="https://docs.travis-ci.com/user/environment-variables/" target="_blank" rel="noopener">Travis CI</a> or <a href="https://devcenter.heroku.com/articles/config-vars" target="_blank" rel="noopener">Heroku</a>.</p></blockquote><h3 id="Can-I-Use-Decorators"><a href="#Can-I-Use-Decorators" class="headerlink" title="Can I Use Decorators?"></a>Can I Use Decorators?</h3><p>No.</p><p>Create React App will add decorator support when the specification advances to a stable stage.</p><h3 id="Integrating-with-a-Node-Backend"><a href="#Integrating-with-a-Node-Backend" class="headerlink" title="Integrating with a Node Backend"></a>Integrating with a Node Backend</h3><p>Check out <a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/" target="_blank" rel="noopener">this tutorial</a> for instructions on integrating an app with a Node backend running on another port, and using <code>fetch()</code> to access it. You can find the companion GitHub repository <a href="https://github.com/fullstackreact/food-lookup-demo" target="_blank" rel="noopener">here</a>.</p><h3 id="Proxying-API-Requests-in-Development"><a href="#Proxying-API-Requests-in-Development" class="headerlink" title="Proxying API Requests in Development"></a>Proxying API Requests in Development</h3><p>People often serve the front-end React app from the same host and port as their backend implementation.<br><br>For example, a production setup might look like this after the app is deployed:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/             - static server returns index.html with React app</span><br><span class="line">/todos        - static server returns index.html with React app</span><br><span class="line">/api/todos    - server handles any /api/* requests using the backend implementation</span><br></pre></td></tr></table></figure><p>Such setup is <strong>not</strong> required. However, if you <strong>do</strong> have a setup like this, it is convenient to write requests like <code>fetch(&#39;/api/todos&#39;)</code> without worrying about redirecting them to another host or port during development.</p><p>To tell the development server to proxy any unknown requests to your API server in development, add a <code>proxy</code> field to your <code>package.json</code>, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: <span class="string">"http://localhost:4000"</span>,</span><br></pre></td></tr></table></figure><p>This way, when you <code>fetch(&#39;/api/todos&#39;)</code> in development, the development server will recognize that it’s not a static asset, and will proxy your request to <code>http://localhost:4000/api/todos</code> as a fallback. The development server will only attempt to send requests without a <code>text/html</code> accept header to the proxy.</p><p>Conveniently, this avoids <a href="http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations" target="_blank" rel="noopener">CORS issues</a> and error messages like this in development:</p><blockquote><p>Fetch API cannot load <a href="http://localhost:4000/api/todos" target="_blank" rel="noopener">http://localhost:4000/api/todos</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="http://localhost:3000&#39;" target="_blank" rel="noopener">http://localhost:3000&#39;</a> is therefore not allowed access. If an opaque response serves your needs, set the request’s mode to ‘no-cors’ to fetch the resource with CORS disabled.</p></blockquote><p>Keep in mind that <code>proxy</code> only has effect in development (with <code>npm start</code>), and it is up to you to ensure that URLs like <code>/api/todos</code> point to the right thing in production. You don’t have to use the <code>/api</code> prefix. Any unrecognized request without a <code>text/html</code> accept header will be redirected to the specified <code>proxy</code>.</p><p>Currently the <code>proxy</code> option only handles HTTP requests, and it won’t proxy WebSocket connections.<br><br>If the <code>proxy</code> option is <strong>not</strong> flexible enough for you, alternatively you can:</p><ul><li>Enable CORS on your server (<a href="http://enable-cors.org/server_expressjs.html" target="_blank" rel="noopener">here’s how to do it for Express</a>).</li><li>Use <a href="#adding-custom-environment-variables">environment variables</a> to inject the right server host and port into your app.</li></ul><h3 id="Using-HTTPS-in-Development"><a href="#Using-HTTPS-in-Development" class="headerlink" title="Using HTTPS in Development"></a>Using HTTPS in Development</h3><p>You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using <a href="#proxying-api-requests-in-development">the “proxy” feature</a> to proxy requests to an API server when that API server is itself serving HTTPS.</p><p>To do this, set the <code>HTTPS</code> environment variable to <code>true</code>, then start the dev server as usual with <code>npm start</code>:</p><h4 id="Windows-cmd-exe"><a href="#Windows-cmd-exe" class="headerlink" title="Windows (cmd.exe)"></a>Windows (cmd.exe)</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> HTTPS=true&amp;&amp;npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>(Note: the lack of whitespace is intentional.)</p><h4 id="Linux-OS-X-Bash"><a href="#Linux-OS-X-Bash" class="headerlink" title="Linux, OS X (Bash)"></a>Linux, OS X (Bash)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTPS=<span class="literal">true</span> npm start</span><br></pre></td></tr></table></figure><p>Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.</p><h3 id="Generating-Dynamic-lt-meta-gt-Tags-on-the-Server"><a href="#Generating-Dynamic-lt-meta-gt-Tags-on-the-Server" class="headerlink" title="Generating Dynamic &lt;meta&gt; Tags on the Server"></a>Generating Dynamic <code>&lt;meta&gt;</code> Tags on the Server</h3><p>Since Create React App doesn’t support server rendering, you might be wondering how to make <code>&lt;meta&gt;</code> tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"%OG_TITLE%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"%OG_DESCRIPTION%"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then, on the server, regardless of the backend you use, you can read <code>index.html</code> into memory and replace <code>%OG_TITLE%</code>, <code>%OG_DESCRIPTION%</code>, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!</p><h3 id="Running-Tests"><a href="#Running-Tests" class="headerlink" title="Running Tests"></a>Running Tests</h3><p>Create React App uses <a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a> as its test runner. To prepare for this integration, we did a <a href="https://facebook.github.io/jest/blog/2016/09/01/jest-15.html" target="_blank" rel="noopener">major revamp</a> of Jest so if you heard bad things about it years ago, give it another try.</p><p>Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.</p><p>While Jest provides browser globals such as <code>window</code> thanks to <a href="https://github.com/tmpvar/jsdom" target="_blank" rel="noopener">jsdom</a>, they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.</p><p>We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.</p><p><strong>Filename Conventions</strong></p><p>Jest will look for test files with any of the following popular naming conventions:</p><ul><li>Files with <code>.js</code> suffix in <code>__tests__</code> folders.</li><li>Files with <code>.test.js</code> suffix.</li><li>Files with <code>.spec.js</code> suffix.</li></ul><p>The <code>.test.js</code> / <code>.spec.js</code> files (or the <code>__tests__</code> folders) can be located at any depth under the <code>src</code> top level folder.</p><p>We recommend to put the test files (or <code>__tests__</code> folders) next to the code they are testing so that relative imports appear shorter. For example, if <code>App.test.js</code> and <code>App.js</code> are in the same folder, the test just needs to <code>import App from &#39;./App&#39;</code> instead of a long relative path. Colocation also helps find tests more quickly in larger projects.</p><p><strong>Command Line Interface</strong></p><p>When you run <code>npm test</code>, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like <code>npm start</code> recompiles the code.</p><p>The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:</p><p><img src="http://facebook.github.io/jest/img/blog/15-watch.gif" alt="Jest watch mode"></p><p><strong>Version Control Integration</strong></p><p>By default, when you run <code>npm test</code>, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.</p><p>Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press <code>a</code> in the watch mode to force Jest to run all tests.</p><p>Jest will always run all tests on a <a href="#continuous-integration">continuous integration</a> server or if the project is not inside a Git or Mercurial repository.</p><p><strong>Writing Tests</strong></p><p>To create tests, add <code>it()</code> (or <code>test()</code>) blocks with the name of the test and its code. You may optionally wrap them in <code>describe()</code> blocks for logical grouping but this is neither required nor recommended.</p><p>Jest provides a built-in <code>expect()</code> global function for making assertions. A basic test could look like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'./sum'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'sums numbers'</span>, () =&gt; &#123;</span><br><span class="line">  expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(sum(<span class="number">2</span>, <span class="number">2</span>)).toEqual(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>All <code>expect()</code> matchers supported by Jest are <a href="http://facebook.github.io/jest/docs/api.html#expect-value" target="_blank" rel="noopener">extensively documented here</a>.<br><br>You can also use <a href="http://facebook.github.io/jest/docs/api.html#tobecalled" target="_blank" rel="noopener"><code>jest.fn()</code> and <code>expect(fn).toBeCalled()</code></a> to create “spies” or mock functions.</p><h3 id="Testing-Components"><a href="#Testing-Components" class="headerlink" title="Testing Components"></a>Testing Components</h3><p>There is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.</p><p>Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders without crashing'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, div);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>This test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in <code>src/App.test.js</code>.</p><p>When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.</p><p>If you’d like to test components in isolation from the child components they render, we recommend using <a href="http://airbnb.io/enzyme/docs/api/shallow.html" target="_blank" rel="noopener"><code>shallow()</code> rendering API</a> from <a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme</a>. You can write a smoke test with it too:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev enzyme react-addons-test-utils</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders without crashing'</span>, () =&gt; &#123;</span><br><span class="line">  shallow(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>Unlike the previous smoke test using <code>ReactDOM.render()</code>, this test only renders <code>&lt;App&gt;</code> and doesn’t go deeper. For example, even if <code>&lt;App&gt;</code> itself renders a <code>&lt;Button&gt;</code> that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports <a href="http://airbnb.io/enzyme/docs/api/mount.html" target="_blank" rel="noopener">full rendering with <code>mount()</code></a>, and you can also use it for testing state changes and component lifecycle.</p><p>You can read the <a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme documentation</a> for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in <code>expect()</code> and <code>jest.fn()</code> for spies.</p><p>Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders welcome message'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">  const welcome = <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to React<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  // expect(wrapper.contains(welcome)).to.equal(true);</span></span><br><span class="line"><span class="xml">  expect(wrapper.contains(welcome)).toEqual(true);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>All Jest matchers are <a href="http://facebook.github.io/jest/docs/api.html#expect-value" target="_blank" rel="noopener">extensively documented here</a>.<br><br>Nevertheless you can use a third-party assertion library like <a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a> if you want to, as described below.</p><p><strong>Using Third Party Assertion Libraries</strong></p><p>We recommend that you use <code>expect()</code> for assertions and <code>jest.fn()</code> for spies. If you are having issues with them please <a href="https://github.com/facebook/jest/issues/new" target="_blank" rel="noopener">file those against Jest</a>, and we’ll fix them. We intend to keep making them better for React, supporting, for example, <a href="https://github.com/facebook/jest/pull/1566" target="_blank" rel="noopener">pretty-printing React elements as JSX</a>.</p><p>However, if you are used to other libraries, such as <a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a> and <a href="http://sinonjs.org/" target="_blank" rel="noopener">Sinon</a>, or if you have existing code using them that you’d like to port over, you can import them normally like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br></pre></td></tr></table></figure><p>and then use them in your tests like you normally do.</p><p><strong>Initializing Test Environment</strong></p><p>If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a <code>src/setupTests.js</code> to your project. It will be automatically executed before running your tests.</p><p>For example:</p><p><code>src/setupTests.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> localStorageMock = &#123;</span><br><span class="line">  getItem: jest.fn(),</span><br><span class="line">  setItem: jest.fn(),</span><br><span class="line">  clear: jest.fn()</span><br><span class="line">&#125;;</span><br><span class="line">global.localStorage = localStorageMock</span><br></pre></td></tr></table></figure></p><p><strong>Focusing and Excluding Tests</strong></p><p>You can replace <code>it()</code> with <code>xit()</code> to temporarily exclude a test from being executed.<br><br>Similarly, <code>fit()</code> lets you focus on a specific test without running any other tests.</p><p><strong>Coverage Reporting</strong></p><p>Jest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br><br>Run <code>npm test -- --coverage</code> (note extra <code>--</code> in the middle) to include a coverage report like this:</p><p><img src="http://i.imgur.com/5bFhnTS.png" alt="coverage report"></p><p>Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.</p><p><strong>Continuous Integration</strong></p><p>By default <code>npm test</code> runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called <code>CI</code>. Popular CI servers already set it by default but you can do this yourself too:</p><p><strong>On CI servers</strong></p><p>Travis CI</p><ol><li>Following the <a href="https://docs.travis-ci.com/user/getting-started/" target="_blank" rel="noopener">Travis Getting started</a> guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your <a href="https://travis-ci.org/profile" target="_blank" rel="noopener">profile</a> page.</li><li><p>Add a <code>.travis.yml</code> file to your git repository.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 4</span><br><span class="line">  - 6</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line">script:</span><br><span class="line">  - npm test</span><br></pre></td></tr></table></figure></li><li><p>Trigger your first build with a git push.</p></li><li><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="noopener">Customize your Travis CI Build</a> if needed.</li></ol><p><strong>On your own environment</strong></p><p><em>Windows (cmd.exe)</em></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> CI=true&amp;&amp;npm test</span><br></pre></td></tr></table></figure><p>(Note: the lack of whitespace is intentional.)</p><p><em>Linux, OS X (Bash)</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CI=<span class="literal">true</span> npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>This way Jest will run tests once instead of launching the watcher.</p><p>If you find yourself doing this often in development, please <a href="https://github.com/facebookincubator/create-react-app/issues/new" target="_blank" rel="noopener">file an issue</a> to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.</p><p><strong>Disabling jsdom</strong></p><p>By default, the <code>package.json</code> of the generated project looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you know that none of your tests depend on <a href="https://github.com/tmpvar/jsdom" target="_blank" rel="noopener">jsdom</a>, you can safely remove <code>--env=jsdom</code>, and your tests will run faster.<br><br>To help you make up your mind, here is a list of APIs that <strong>need jsdom</strong>:</p><ul><li>Any browser globals like <code>window</code> and <code>document</code></li><li><a href="https://facebook.github.io/react/docs/top-level-api.html#reactdom.render" target="_blank" rel="noopener"><code>ReactDOM.render()</code></a></li><li><a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument" target="_blank" rel="noopener"><code>TestUtils.renderIntoDocument()</code></a> (<a href="https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91" target="_blank" rel="noopener">a shortcut</a> for the above)</li><li><a href="http://airbnb.io/enzyme/docs/api/mount.html" target="_blank" rel="noopener"><code>mount()</code></a> in <a href="http://airbnb.io/enzyme/index.html" target="_blank" rel="noopener">Enzyme</a></li></ul><p>In contrast, <strong>jsdom is not needed</strong> for the following APIs:</p><ul><li><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="noopener"><code>TestUtils.createRenderer()</code></a> (shallow rendering)</li><li><a href="http://airbnb.io/enzyme/docs/api/shallow.html" target="_blank" rel="noopener"><code>shallow()</code></a> in <a href="http://airbnb.io/enzyme/index.html" target="_blank" rel="noopener">Enzyme</a></li></ul><p>Finally, jsdom is also not needed for <a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html" target="_blank" rel="noopener">snapshot testing</a>. Longer term, this is the direction we are interested in exploring, but snapshot testing is <a href="https://github.com/facebookincubator/create-react-app/issues/372" target="_blank" rel="noopener">not fully baked yet</a> so we don’t officially encourage its usage yet.</p><p><strong>Experimental Snapshot Testing</strong></p><p>Snapshot testing is a new feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output.</p><p>This feature is experimental and still <a href="https://github.com/facebookincubator/create-react-app/issues/372" target="_blank" rel="noopener">has major usage issues</a> so we only encourage you to use it if you like experimental technology. We intend to gradually improve it over time and eventually offer it as the default solution for testing React components, but this will take time. <a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html" target="_blank" rel="noopener">Read more about snapshot testing.</a></p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p><strong>Building for Relative Paths</strong></p><p>By default, Create React App produces a build assuming your app is hosted at the server root.<br><br>To override this, specify the <code>homepage</code> in your <code>package.json</code>, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"http://mywebsite.com/relativepath"</span>,</span><br></pre></td></tr></table></figure><p>This will let Create React App correctly infer the root path to use in the generated HTML file.</p><p><strong>GitHub Pages</strong></p><p>Add a <code>homepage</code> field in <code>package.json</code> (<strong>important!</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"http://myusername.github.io/my-app"</span>,</span><br></pre></td></tr></table></figure><p>Create React App uses the <code>homepage</code> field to determine the root URL in the built HTML file.</p><ul><li><code>npm run build</code>, to see a cheat sheet with instructions on how to deploy.</li></ul><p>To publish it at <a href="http://myusername.github.io/my-app" target="_blank" rel="noopener">http://myusername.github.io/my-app</a>:</p><p>install gh-pages:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gh-pages</span><br></pre></td></tr></table></figure></p><p>Add deploy script:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"gh-pages -d build"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execute deploy script:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>Note that GitHub Pages doesn’t support routers that use the HTML5 <code>pushState</code> history API under the hood (for example, React Router using <code>browserHistory</code>). This is because when there is a fresh page load for a url like <code>http://user.github.io/todomvc/todos/42</code>, where <code>/todos/42</code> is a frontend route, the GitHub Pages server returns 404 because it knows nothing of <code>/todos/42</code>. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:</p><ul><li>You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to <code>hashHistory</code> for this effect, but the URL will be longer and more verbose (for example, <code>http://user.github.io/todomvc/#/todos/42?_k=yknaj</code>). <a href="https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories" target="_blank" rel="noopener">Read more</a> about different history implementations in React Router.</li><li>Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your <code>index.html</code> page with a special redirect parameter. You would need to add a <code>404.html</code> file with the redirection code to the <code>build</code> folder before deploying your project, and you’ll need to add code handling the redirect parameter to <code>index.html</code>. You can find a detailed explanation of this technique <a href="https://github.com/rafrex/spa-github-pages" target="_blank" rel="noopener">in this guide</a>.</li></ul><p><strong>Heroku</strong></p><p>Use the <a href="https://github.com/mars/create-react-app-buildpack" target="_blank" rel="noopener">Heroku Buildpack for Create React App</a>.<br><br>You can find instructions in <a href="https://blog.heroku.com/deploying-react-with-zero-configuration" target="_blank" rel="noopener">Deploying React with Zero Configuration</a>.</p><p><strong>Modulus</strong></p><p>See the <a href="http://blog.modulus.io/deploying-react-apps-on-modulus" target="_blank" rel="noopener">Modulus blog post</a> on how to deploy your react app to Modulus.</p><p><strong>Netlify</strong></p><p>manual deploy to Netlify’s CDN:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install netlify-cli</span><br><span class="line">netlify deploy</span><br></pre></td></tr></table></figure><p>Choose <code>build</code> as the path to deploy.</p><p><em>To setup continuous delivery:</em></p><p>With this setup Netlify will build and deploy when you push to git or open a pull request:</p><ol><li><a href="https://app.netlify.com/signup" target="_blank" rel="noopener">Start a new netlify project</a></li><li>Pick your Git hosting service and select your repository</li><li>Click <code>Build your site</code></li></ol><p><em>Support for client-side routing:</em></p><p>To support <code>pushState</code>, make sure to create a <code>public/_redirects</code> file with the following rewrite rules:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*  /index.html  200</span><br></pre></td></tr></table></figure><p>When you build the project, Create React App will place the <code>public</code> folder contents into the build output.</p><p><strong>Now</strong></p><p>See <a href="https://github.com/xkawi/create-react-app-now" target="_blank" rel="noopener">this example</a> for a zero-configuration single-command deployment with <a href="https://zeit.co/now" target="_blank" rel="noopener">now</a>.</p><p><strong>Surge</strong></p><p>Install the Surge CLI if you haven’t already by running <code>npm install -g surge</code>. Run the <code>surge</code> command and log in you or create a new account. You just need to specify the <em>build</em> folder and your custom domain, and you are done.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">           email: email@domain.com</span><br><span class="line">        password: ********</span><br><span class="line">    project path: /path/to/project/build</span><br><span class="line">            size: 7 files, 1.8 MB</span><br><span class="line">          domain: create-react-app.surge.sh</span><br><span class="line">          upload: [====================] 100%, eta: 0.0s</span><br><span class="line">propagate on CDN: [====================] 100%</span><br><span class="line">            plan: Free</span><br><span class="line">           users: email@domain.com</span><br><span class="line">      IP Address: X.X.X.X</span><br><span class="line"></span><br><span class="line"> Success! Project is published and running at create-react-app.surge.sh</span><br></pre></td></tr></table></figure><p>Note that in order to support routers that use HTML5 <code>pushState</code> API, you may want to rename the <code>index.html</code> in your build folder to <code>200.html</code> before deploying to Surge. This <a href="https://surge.sh/help/adding-a-200-page-for-client-side-routing" target="_blank" rel="noopener">ensures that every URL falls back to that file</a>.</p><h2 id="Something-Missing"><a href="#Something-Missing" class="headerlink" title="Something Missing?"></a>Something Missing?</h2><p>If you have ideas for more “How To” recipes that should be on this page, <a href="https://github.com/facebookincubator/create-react-app/issues" target="_blank" rel="noopener">let us know</a> or <a href="https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md" target="_blank" rel="noopener">contribute some!</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> create-react-app </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ReactJS – React Refresher</title>
      <link href="/2016/12/01/20161201-react-refresh/"/>
      <url>/2016/12/01/20161201-react-refresh/</url>
      
        <content type="html"><![CDATA[<p>Egghead has a new ReactJS course – Let’s see what’s new</p><!-- TOC depthFrom:1 depthTo:3 withLinks:0 updateOnSave:0 orderedList:0 --><ul><li>React to Build Web Applications<ul><li>Use create-react-app</li><li>Write a “Hello World” React Component</li><li>Display Output in React with a Component’s render Method</li><li>Set Properties on React Components</li><li>Manage React Component State with setState</li><li>Use React Components as Children for Other Components</li><li>Access Nested Data with Reacts props.children</li><li>Add Custom propType Validation to React Components</li><li>Normalize Events with Reacts Synthetic Event System</li><li>Use React ref to Get a Reference to Specific Components</li><li>Understand the React Component Lifecycle Methods</li><li>Manage React Component State with Lifecycle Methods</li><li>Control React Component Updates When New Props Are Received</li><li>Use map to Create React Components from Arrays of Data</li><li>Compose React Component Behavior with Higher Order Components</li><li>Build a JSX Live Compiler as a React Component</li><li>Understand JSX at a Deeper Level</li><li>Understand React.Children Utilities</li><li>Use React.cloneElement to Extend Functionality of Children Components</li><li>Write More Reusable React Components with Composable APIs</li><li>Debug React Components with Developer Tools in Chrome</li></ul></li></ul><!-- /TOC --><h2 id="React-to-Build-Web-Applications"><a href="#React-to-Build-Web-Applications" class="headerlink" title="React to Build Web Applications"></a>React to Build Web Applications</h2><h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h3><p>create-react-app is a turbo app. That means there are 20 plus features that are supported out of the box without additional config.  Just to highlight a few:</p><ul><li>webpack: dev server, hot reload, production build</li><li>npm scripts: start, test, build</li><li>update to a new release</li><li>import images and fonts</li><li>proxy api requests</li><li>using https in dev</li><li>tests with a choice of lib</li><li>code coverage</li><li>continuous integration</li><li>deploy: github, surge, and more</li></ul><p><strong>It works behind the scenes</strong></p><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"myapp"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"0.7.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^15.4.1"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^15.4.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Write-a-“Hello-World”-React-Component"><a href="#Write-a-“Hello-World”-React-Component" class="headerlink" title="Write a “Hello World” React Component"></a>Write a “Hello World” React Component</h3><p>Ways to create a component:</p><ul><li>old schools es5 react.createComponent</li><li>class based components</li><li>stateless function component</li></ul><p>These will render JSX: A JavaScript syntax extension that looks similar to HTML</p><h3 id="Display-Output-in-React-with-a-Component’s-render-Method"><a href="#Display-Output-in-React-with-a-Component’s-render-Method" class="headerlink" title="Display Output in React with a Component’s render Method"></a>Display Output in React with a Component’s render Method</h3><p>The <code>render</code> method method must return a single DOM node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;small&gt;Small&lt;/small&gt;</span><br><span class="line">      &lt;h1&gt;World&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set-Properties-on-React-Components"><a href="#Set-Properties-on-React-Components" class="headerlink" title="Set Properties on React Components"></a>Set Properties on React Components</h3><p>Pass data into Components using props.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;App data=44 /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;this.props.data&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App.propTypes = &#123;</span><br><span class="line">  txt: React.PropTypes.string.isRequired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App.defaultProps = &#123;</span><br><span class="line">  txt: &apos;I am here...&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Manage-React-Component-State-with-setState"><a href="#Manage-React-Component-State-with-setState" class="headerlink" title="Manage React Component State with setState"></a>Manage React Component State with setState</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      txt: &apos;default state&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = (e) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;txt: e.target.value&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot;</span><br><span class="line">          onChange=&#123;this.update&#125;/&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.txt&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><p><em>Add JSX tab completion:</em></p><ol><li>disabled <code>language-babel</code>  </li><li>enabled <code>react</code></li><li>add emmet tab completion config (<a href="https://goo.gl/2thZT7" target="_blank" rel="noopener">https://goo.gl/2thZT7</a>)</li></ol><h3 id="Use-React-Components-as-Children-for-Other-Components"><a href="#Use-React-Components-as-Children-for-Other-Components" class="headerlink" title="Use React Components as Children for Other Components"></a>Use React Components as Children for Other Components</h3><p>ReactJS uses a hierarchy of components</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">render () &#123;</span><br><span class="line">  return (</span><br><span class="line">      &lt;Widget update=&#123;this.update&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Widget = (props) =&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; onChange=&#123;props.update&#125;/&gt;</span><br></pre></td></tr></table></figure><h3 id="Access-Nested-Data-with-Reacts-props-children"><a href="#Access-Nested-Data-with-Reacts-props-children" class="headerlink" title="Access Nested Data with Reacts props.children"></a>Access Nested Data with Reacts props.children</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    const Button = (props) =&gt; &lt;button&gt;&#123;props.children&#125;&lt;/button&gt;</span><br><span class="line">    const Heart = () =&gt; &lt;span&gt;&amp;hearts;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    return &lt;Button&gt;I &lt;Heart/&gt; React&lt;/Button&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add-Custom-propType-Validation-to-React-Components"><a href="#Add-Custom-propType-Validation-to-React-Components" class="headerlink" title="Add Custom propType Validation to React Components"></a>Add Custom propType Validation to React Components</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return &lt;Title text=&quot;short&quot; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Title = (props) =&gt; &lt;h1&gt;Title: &#123;props.text&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">Title.propTypes = &#123;</span><br><span class="line">  text(props, propName, component) &#123;</span><br><span class="line">    if (!propName in props) &#123;</span><br><span class="line">      return new Error(`missing $&#123;propName&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">    if (props[propName].length &lt; 6) &#123;</span><br><span class="line">      return new Error(`$&#123;propName&#125; must be at least 6 chars.`)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Normalize-Events-with-Reacts-Synthetic-Event-System"><a href="#Normalize-Events-with-Reacts-Synthetic-Event-System" class="headerlink" title="Normalize Events with Reacts Synthetic Event System"></a>Normalize Events with Reacts Synthetic Event System</h3><p>React synthetic events normalizes events across various browsers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      currentEvent: &apos;---&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = (e) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;currentEvent: e.type&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;textarea</span><br><span class="line">          onKeyPress=&#123;this.update&#125;</span><br><span class="line">          onCut=&#123;this.update&#125;</span><br><span class="line">          onCopy=&#123;this.update&#125;</span><br><span class="line">          onPaste=&#123;this.update&#125;</span><br><span class="line">          onFocus=&#123;this.update&#125;</span><br><span class="line">          onBlur=&#123;this.update&#125;</span><br><span class="line">          cols=&quot;30&quot;</span><br><span class="line">          rows=&quot;10&quot; /&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.currentEvent&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Use-React-ref-to-Get-a-Reference-to-Specific-Components"><a href="#Use-React-ref-to-Get-a-Reference-to-Specific-Components" class="headerlink" title="Use React ref to Get a Reference to Specific Components"></a>Use React ref to Get a Reference to Specific Components</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      a: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = (e) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      a: this.refs.a.value,</span><br><span class="line">      b: this.refs.b.value,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          ref=&quot;a&quot;</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          onChange=&#123;this.update&#125;/&gt; &#123;this.state.a&#125;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          ref=&quot;b&quot;</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          onChange=&#123;this.update&#125;/&gt; &#123;this.state.b&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Understand-the-React-Component-Lifecycle-Methods"><a href="#Understand-the-React-Component-Lifecycle-Methods" class="headerlink" title="Understand the React Component Lifecycle Methods"></a>Understand the React Component Lifecycle Methods</h3><ul><li>componentWillMount: once before render</li><li>render: draws to DOM</li><li>componentDidMount: once after render</li></ul><h3 id="Manage-React-Component-State-with-Lifecycle-Methods"><a href="#Manage-React-Component-State-with-Lifecycle-Methods" class="headerlink" title="Manage React Component State with Lifecycle Methods"></a>Manage React Component State with Lifecycle Methods</h3><ul><li>componentWillMount: access to state/props but not DOM</li><li>componentDidMount: access to DOM (use ReactDOM.findDOMNode())</li><li>componentWillUnmount: do cleanup (i.e. clearInterval(this.myInterval))</li></ul><h3 id="Control-React-Component-Updates-When-New-Props-Are-Received"><a href="#Control-React-Component-Updates-When-New-Props-Are-Received" class="headerlink" title="Control React Component Updates When New Props Are Received"></a>Control React Component Updates When New Props Are Received</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;increasing: false&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = (e) =&gt; &#123;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">      &lt;App val=&#123;this.props.val+1&#125; /&gt;,</span><br><span class="line">      document.getElementById(&apos;root&apos;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps (nextProps) &#123;</span><br><span class="line">    this.setState(&#123;increasing: nextProps.val &gt; this.props.val&#125;)</span><br><span class="line">    console.log(&apos;componentWillReceiveProps: &apos;, this.state.increasing)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate (nextProps, nextState) &#123;</span><br><span class="line">    return nextProps.val % 5 === 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    console.log(&apos;increasing: &apos;, this.state.increasing)</span><br><span class="line">    return (</span><br><span class="line">      &lt;button onClick=&#123;this.update&#125;&gt;</span><br><span class="line">        &#123;this.props.val&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">App.defaultProps = &#123;val: 0&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><ul><li>we set App.defaultProps</li><li>onClick re-render with new props</li><li>componentWillReceiveProps sets increasing for all but first click</li><li>shouldComponentUpdate constrains rendering to once every 5 clicks</li></ul><h3 id="Use-map-to-Create-React-Components-from-Arrays-of-Data"><a href="#Use-map-to-Create-React-Components-from-Arrays-of-Data" class="headerlink" title="Use map to Create React Components from Arrays of Data"></a>Use map to Create React Components from Arrays of Data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;items: []&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    fetch(&apos;http://swapi.co/api/people/?format=json&apos;)</span><br><span class="line">      .then(res =&gt; res.json())</span><br><span class="line">      .then((&#123;results: items&#125;) =&gt; this.setState(&#123;items&#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    let items = this.state.items</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;items.map((item, i) =&gt;</span><br><span class="line">          &lt;h4 key=&#123;i&#125;&gt;&#123;item.name&#125;&lt;/h4&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Compose-React-Component-Behavior-with-Higher-Order-Components"><a href="#Compose-React-Component-Behavior-with-Higher-Order-Components" class="headerlink" title="Compose React Component Behavior with Higher Order Components"></a>Compose React Component Behavior with Higher Order Components</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">const HOC = (InnerComponent) =&gt; class HOC extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123;count: this.state.count + 1&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    console.log(&apos;will mount&apos;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return &lt;InnerComponent</span><br><span class="line">      &#123;...this.props&#125;</span><br><span class="line">      &#123;...this.state&#125;</span><br><span class="line">      update=&#123;this.update&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button&gt;button&lt;/Button&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;LabelHOC&gt;label&lt;/LabelHOC&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Button = HOC((props) =&gt;</span><br><span class="line">  &lt;button</span><br><span class="line">    onClick=&#123;props.update&#125;&gt;</span><br><span class="line">    &#123;props.children&#125; - &#123;props.count&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">class Label extends React.Component &#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    console.log(&apos;label will mount&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return &lt;label</span><br><span class="line">      onMouseMove=&#123;this.props.update&#125;&gt;</span><br><span class="line">      &#123;this.props.children&#125; - &#123;this.props.count&#125;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const LabelHOC = HOC(Label)</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><ul><li>App component is rendering 2 HOCs (higher order components)</li><li>The HOC function takes a component param and returns a new component</li><li>The HOC function is providing <code>count state</code> and an <code>update method</code></li><li>The HOC function is passing props from the inner component, state and update from itself</li><li>The Button component uses the <code>props param</code></li><li>The LabelHOC component uses <code>this.props</code></li></ul><h3 id="Build-a-JSX-Live-Compiler-as-a-React-Component"><a href="#Build-a-JSX-Live-Compiler-as-a-React-Component" class="headerlink" title="Build a JSX Live Compiler as a React Component"></a>Build a JSX Live Compiler as a React Component</h3><p>index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.19.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      input: &apos;/* add jsx */&apos;,</span><br><span class="line">      output: &apos;&apos;,</span><br><span class="line">      err: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = (e) =&gt; &#123;</span><br><span class="line">    let code = e.target.value</span><br><span class="line">    try &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        output: window.Babel</span><br><span class="line">          .transform(code, &#123; presets: [&apos;es2015&apos;, &apos;react&apos;] &#125;)</span><br><span class="line">          .code,</span><br><span class="line">        err: &apos;&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    catch (err) &#123;</span><br><span class="line">      this.setState(&#123;err: err.message&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;header&gt;&#123;this.state.err&#125;&lt;/header&gt;</span><br><span class="line">        &lt;div className=&quot;container&quot;&gt;</span><br><span class="line">          &lt;textarea onChange=&#123;this.update&#125;</span><br><span class="line">            defaultValue=&#123;this.state.input&#125;/&gt;</span><br><span class="line">          &lt;pre&gt;</span><br><span class="line">            &#123;this.state.output&#125;</span><br><span class="line">          &lt;/pre&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><h3 id="Understand-JSX-at-a-Deeper-Level"><a href="#Understand-JSX-at-a-Deeper-Level" class="headerlink" title="Understand JSX at a Deeper Level"></a>Understand JSX at a Deeper Level</h3><ul><li>components and tags compile to different results</li><li>self close both normal and custom components</li><li>remember to return one node</li><li>props won’t render unless data-myprop or my-prop (dash in name)</li><li>comments in jsx suffix of the transpiled code <code>{/* this is a comment */}</code></li><li>use ternary: {i&gt;1 ? ‘many’ : ‘one’}</li><li>use short-circuit: {i&gt;1 &amp;&amp; ‘many’ }</li></ul><p>Styles</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const myStyle = &#123;</span><br><span class="line">  backgroundColor: &apos;#F00&apos;,</span><br><span class="line">  height: 10 // don&apos;t need px</span><br><span class="line">&#125;</span><br><span class="line">return &lt;div style=&#123;myStyle&#125; /&gt;</span><br></pre></td></tr></table></figure><h3 id="Understand-React-Children-Utilities"><a href="#Understand-React-Children-Utilities" class="headerlink" title="Understand React.Children Utilities"></a>Understand React.Children Utilities</h3><p><strong>iterate over children of components</strong></p><ul><li><p><code>React.Children.map(this.props.children, (items, i) =&gt; {})</code> // handles one item</p></li><li><p><code>React.Children.toArray(this.props.children)</code> // return array even if one child</p></li><li><p><code>React.Children.forEach(this.props.children, fn)</code></p></li><li><p><code>React.Children.only(this.props.children, fn)</code> // throws when more than one</p></li></ul><h3 id="Use-React-cloneElement-to-Extend-Functionality-of-Children-Components"><a href="#Use-React-cloneElement-to-Extend-Functionality-of-Children-Components" class="headerlink" title="Use React.cloneElement to Extend Functionality of Children Components"></a>Use React.cloneElement to Extend Functionality of Children Components</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Buttons&gt;</span><br><span class="line">          &lt;button value=&quot;A&quot;&gt;A&lt;/button&gt;</span><br><span class="line">          &lt;button value=&quot;B&quot;&gt;B&lt;/button&gt;</span><br><span class="line">          &lt;button value=&quot;C&quot;&gt;C&lt;/button&gt;</span><br><span class="line">        &lt;/Buttons&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Buttons extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;selected: &apos;None&apos;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  selectedItem (selected) &#123;</span><br><span class="line">    this.setState(&#123;selected&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    let fn = (child) =&gt;</span><br><span class="line">      React.cloneElement(child, &#123;</span><br><span class="line">        onClick: this.selectedItem.bind(this, child.props.value)</span><br><span class="line">      &#125;)</span><br><span class="line">    let items = React.Children.map(this.props.children, fn)</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;You have selected: &#123;this.state.selected&#125;&lt;/h2&gt;</span><br><span class="line">        &#123;items&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><ul><li>common pattern for things like tab interface or grouped buttons</li><li>when mapping over children it does not provide the child component only a descriptor.  Use <code>React.cloneElement(child, propertyObj)</code> to get to the components</li><li>here we apply an <code>onClick</code> property to each button</li></ul><h3 id="Write-More-Reusable-React-Components-with-Composable-APIs"><a href="#Write-More-Reusable-React-Components-with-Composable-APIs" class="headerlink" title="Write More Reusable React Components with Composable APIs"></a>Write More Reusable React Components with Composable APIs</h3><ul><li>ideally your components should be reusable as well as composable</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    super()</span><br><span class="line">    this.state = &#123;red: 0&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update = (e) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      red: ReactDOM.findDOMNode(this.refs.red.refs.inp).value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;NumInput</span><br><span class="line">          ref=&quot;red&quot;</span><br><span class="line">          min=&#123;0&#125;</span><br><span class="line">          max=&#123;255&#125;</span><br><span class="line">          step=&#123;1&#125;</span><br><span class="line">          val=&#123;+this.state.red&#125;</span><br><span class="line">          label=&quot;Red&quot;</span><br><span class="line">          update=&#123;this.update&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class NumInput extends React.Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    let label = this.props.label !== &apos;&apos; ?</span><br><span class="line">      &lt;label&gt;&#123;this.props.label&#125; - &#123;this.props.val&#125;&lt;/label&gt; : &apos;&apos;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          ref=&quot;inp&quot;</span><br><span class="line">          type=&#123;this.props.type&#125;</span><br><span class="line">          min=&#123;this.props.min&#125;</span><br><span class="line">          max=&#123;this.props.max&#125;</span><br><span class="line">          step=&#123;this.props.step&#125;</span><br><span class="line">          defaultValue=&#123;this.props.val&#125;</span><br><span class="line">          onChange=&#123;this.props.update&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &#123;label&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NumInput.propTypes = &#123;</span><br><span class="line">  min: React.PropTypes.number,</span><br><span class="line">  max: React.PropTypes.number,</span><br><span class="line">  step: React.PropTypes.number,</span><br><span class="line">  val: React.PropTypes.number,</span><br><span class="line">  label: React.PropTypes.string,</span><br><span class="line">  update: React.PropTypes.func.isRequired,</span><br><span class="line">  type: React.PropTypes.oneOf([&apos;number&apos;, &apos;range&apos;]),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NumInput.defaultProps = &#123;</span><br><span class="line">  min: 0,</span><br><span class="line">  max: 0,</span><br><span class="line">  step: 1,</span><br><span class="line">  val: 0,</span><br><span class="line">  label: &apos;&apos;,</span><br><span class="line">  type: &apos;range&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App</span><br></pre></td></tr></table></figure><ul><li>NumInput defaults to a slider but can be configured to be a number</li></ul><h3 id="Debug-React-Components-with-Developer-Tools-in-Chrome"><a href="#Debug-React-Components-with-Developer-Tools-in-Chrome" class="headerlink" title="Debug React Components with Developer Tools in Chrome"></a>Debug React Components with Developer Tools in Chrome</h3><p><strong>The benefits of the react chrome extension</strong></p><ul><li>See a cleaner DOM</li><li>See the props</li><li>See the state</li><li>See the event listeners</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> create-react-app </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gitlab Setup</title>
      <link href="/2016/11/19/20161119-gitlab-setup/"/>
      <url>/2016/11/19/20161119-gitlab-setup/</url>
      
        <content type="html"><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>There are 2 flavors</p><ul><li>Community Edition</li><li>Enterprise Edition</li></ul><p>Omnibus is a way to package different services and tools required to run GitLab, so that most of developers can install it without laborious configuration</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources:"></a>Resources:</h2><ul><li><a href="https://goo.gl/8KCB00" target="_blank" rel="noopener">Omnibus GitLab documentation</a></li><li><a href="https://goo.gl/tuOdyy" target="_blank" rel="noopener">Community Edition Repo</a></li><li><a href="https://goo.gl/siAOxa" target="_blank" rel="noopener">Getting help with Gitlab</a></li><li><a href="https://docs.gitlab.com/ce/api/README.html" target="_blank" rel="noopener">Gitlab API docs</a></li></ul><h2 id="Install-and-Configure-Gitlab"><a href="#Install-and-Configure-Gitlab" class="headerlink" title="Install and Configure Gitlab"></a>Install and Configure Gitlab</h2><ul><li><a href="https://goo.gl/QcA8iM" target="_blank" rel="noopener">Set up the GitLab in Docker container</a></li></ul><ol><li>create docker host (gitlab)</li><li>switch control to docker host</li><li>run gitlab image (downloads and configures in one step)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --hostname gitlab.debugtime.com \</span><br><span class="line">  --restart always \</span><br><span class="line">  --publish 80:80 --publish 2289:22 \</span><br><span class="line">  --volume /opt/docker/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /opt/docker/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /opt/docker/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  --env GITLAB_OMNIBUS_CONFIG=&quot;external_url &apos;http://gitlab.debugtime.com/&apos;; gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2289&quot; \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h4 id="Setup-web-access"><a href="#Setup-web-access" class="headerlink" title="Setup web access"></a>Setup web access</h4><ol><li>get the gitlab docker host IP</li><li>configure an nginx reverse proxy: <code>gitlab.debugtime.com</code> –&gt; <code>&lt;gitlab_docker_host_ip&gt;:80</code></li></ol><h4 id="Setup-ssh-access"><a href="#Setup-ssh-access" class="headerlink" title="Setup ssh access"></a>Setup ssh access</h4><p>1) configure gitlab to route ssh traffic from <code>gitlab:2289</code> to <code>container:22</code></p><p>We can map web traffic like so <code>-p 80:80</code> which routes <code>container:80</code> to <code>gitlab:80</code>.  Since <code>gitlab:22</code> is already being used to allow login into the gitlab host, we cannot use that port.  So instead we will map <code>container:22</code> to <code>gitlab:2289</code> with the docker run option <code>--publish 2289:22</code></p><p>2) set Omnibus configuration so gitlab provides commands that account for port 2289.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--env GITLAB_OMNIBUS_CONFIG=&quot;external_url &apos;http://gitlab.debugtime.com/&apos;; gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2289&quot; \</span><br></pre></td></tr></table></figure><p>3) setup ssh tunnel between <code>gitlab.debugtime.com:2289</code> and <code>gitlab:2289</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine ssh gitlab -fN -L 0.0.0.0:2289:localhost:2289</span><br></pre></td></tr></table></figure><h2 id="Test-Gitlab"><a href="#Test-Gitlab" class="headerlink" title="Test Gitlab"></a>Test Gitlab</h2><h4 id="Verify-Gitlab’s-web-app-functionality"><a href="#Verify-Gitlab’s-web-app-functionality" class="headerlink" title="Verify Gitlab’s web app functionality"></a>Verify Gitlab’s web app functionality</h4><ul><li><code>open http://gitlab.debugtime.com</code></li></ul><h4 id="Verify-Gitlab’s-push-pull-functionality"><a href="#Verify-Gitlab’s-push-pull-functionality" class="headerlink" title="Verify Gitlab’s push/pull functionality"></a>Verify Gitlab’s push/pull functionality</h4><ol><li><p>test pull functionality:<br><code>git clone ssh://git@gitlab.debugtime.com:2289/dearfrankg/myproject.git</code></p></li><li><p>commit change to master branch</p></li><li><p>test push functionality:<br><code>git push -u origin master</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Retrospective</title>
      <link href="/2016/11/19/20161119-docker-retrospective/"/>
      <url>/2016/11/19/20161119-docker-retrospective/</url>
      
        <content type="html"><![CDATA[<p>Time to evaluate my docker training</p><h2 id="Training-Curriculum"><a href="#Training-Curriculum" class="headerlink" title="Training Curriculum"></a>Training Curriculum</h2><h4 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started:"></a>Getting Started:</h4><p>Use docker CLI to:</p><ul><li><code>images</code>: list, run, tag and build images</li><li><code>containers</code>: list-running, list-all, start, stop, restart</li><li><code>docker hub</code>: create account, find, pull and push images</li></ul><h4 id="Learn-By-Example"><a href="#Learn-By-Example" class="headerlink" title="Learn By Example:"></a>Learn By Example:</h4><p>Use docker CLI to:</p><p>run apps</p><ul><li><code>containers</code>: run ephemeral, interactive and daemonized containers</li><li><code>containers</code>: show logs, start, stop, restart and remove containers</li></ul><p>work with containers</p><ul><li><code>docker</code>: show client/server versions, use docker help</li><li><code>containers</code>: start, stop, restart and remove containers</li><li><code>containers</code>: assign name</li><li><code>containers</code>: get ports, logs, processes</li><li><code>containers</code>: inspect, inspect range</li></ul><p>Updating and committing an image</p><p><code>Goal: clone nginx image and edit it to show new html page</code></p><ul><li><code>images</code>: search, list, pull, tag</li><li><code>images</code>: run interactively to edit image</li><li><code>images</code>: use ctrl-p, ctrl-q to leave without the exit command</li><li><code>images</code>: get containerId</li><li><code>images</code>: commit to exiting or new image</li><li><code>images</code>: get imageId and compare imageIds</li></ul><p>Building an image from a Dockerfile</p><ul><li><code>build image</code>: create project folder</li><li><code>build image</code>: create Dockerfile by entering Dockerfile commands</li><li><code>build image</code>: build image</li><li><code>build image</code>: tag image</li><li><code>build image</code>: show image digests</li><li><code>build image</code>: push to docker hub</li><li><code>build image</code>: remove local image</li></ul><p>network containers</p><ul><li><code>network containers</code>: list networks, create network, remove network</li><li><code>network containers</code>: add container to network, disconnect container from network</li><li><code>inspect network</code>: inspect network</li><li><code>inspect container</code>: inspect container, inspect container range</li></ul><p>data volumes</p><ul><li><code>data volume</code>: add anonymous volume, locate volume</li><li><code>data volume</code>: mount host directory as volume, mount shared-storage as volume</li><li><code>data volume</code>: mount host file as volume</li><li><code>data volume</code>: create volume, using <code>:z or :Z</code> to relabel volumes</li></ul><p>data volume containers</p><ul><li><code>data volume containers</code>: create a data volume container</li><li><code>data volume containers</code>: mount the data volume container in another container</li><li><code>data volume containers</code>: find and remove dangling volumes</li></ul><p>backup data volumes</p><ul><li><code>backup data volumes</code>: backup, restore or migrate data volumes</li></ul><p>remove anonymous volumes</p><ul><li><code>remove anonymous volumes</code>: locate and remove anonymous volumes</li></ul><p>store images on Docker Hub</p><ul><li><code>Docker Hub</code>: login, search, pull, push</li><li><code>Docker Hub</code>: private repos, teams, automated builds, web-hooks</li><li><code>Docker Hub</code>: setup automated builds</li></ul><h2 id="Training-Curriculum-Summary"><a href="#Training-Curriculum-Summary" class="headerlink" title="Training Curriculum Summary"></a>Training Curriculum Summary</h2><p><code>Getting Started</code>:</p><ul><li>a taste of images, containers and docker hub</li></ul><p><code>Learn By Example</code>:</p><ul><li>running apps</li><li>working with containers</li><li>building and updating images</li><li>networking containers</li><li>inspecting networks and containers</li><li>working with volumes and volume containers</li><li>working with docker hub</li></ul><h2 id="Summing-up-Docker"><a href="#Summing-up-Docker" class="headerlink" title="Summing up Docker"></a>Summing up Docker</h2><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><h4 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker-machine"></a>docker-machine</h4><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><h4 id="docker-swarms"><a href="#docker-swarms" class="headerlink" title="docker swarms"></a>docker swarms</h4><h2 id="gitlab-experience"><a href="#gitlab-experience" class="headerlink" title="gitlab experience"></a>gitlab experience</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dk run -it gitlab bash</span><br><span class="line">cd /var/opt/gitlab</span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 7 git          git          4096 Dec  2 10:05 ./</span><br><span class="line">drwxr-xr-x 3 root         root         4096 Nov 22 19:48 ../</span><br><span class="line">-rw-r--r-- 1 git          git           220 Aug 31  2015 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git          git          3771 Aug 31  2015 .bashrc</span><br><span class="line">-rw-r--r-- 1 git          git           655 Jun 24 15:44 .profile</span><br><span class="line">drwxr-xr-x 2 mattermost   mattermost   4096 Nov 22 19:48 mattermost/</span><br><span class="line">drwxr-xr-x 2 gitlab-www   gitlab-www   4096 Nov 22 19:48 nginx/</span><br><span class="line">drwxr-xr-x 2 gitlab-psql  gitlab-psql  4096 Nov 22 19:48 postgresql/</span><br><span class="line">drwxr-xr-x 2 gitlab-redis gitlab-redis 4096 Nov 22 19:48 redis/</span><br><span class="line">drwxr-xr-x 2 registry     registry     4096 Nov 22 19:48 registry/</span><br></pre></td></tr></table></figure><p>launchGitlab<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dkset gitlab</span><br><span class="line">docker run --detach \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --hostname gitlab.debugtime.com \</span><br><span class="line">  --restart always \</span><br><span class="line">  --publish 80:80 --publish 2289:22 \</span><br><span class="line">  --volume /opt/docker/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /opt/docker/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume /opt/docker/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  --env GITLAB_OMNIBUS_CONFIG=&quot;external_url &apos;http://gitlab.debugtime.com/&apos;; gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 2289&quot; \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br><span class="line"></span><br><span class="line"># tunnel laptop:2289 to container:2289</span><br><span class="line">docker-machine ssh gitlab -fN -L 0.0.0.0:2289:localhost:2289</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_id&gt; bash</span><br><span class="line">cd /var/opt/gitlab</span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 13 root         root        300 Dec  2 10:16 ./</span><br><span class="line">drwxr-xr-x  3 root         root       4096 Dec  2 01:03 ../</span><br><span class="line">-rw-r--r--  1 git          git         297 Dec  2 10:16 .gitconfig</span><br><span class="line">drwx------  2 git          git          60 Dec  2 10:16 .ssh/</span><br><span class="line">drwx------  2 git          root         40 Dec  2 10:16 backups/</span><br><span class="line">drwx------  3 git          root         60 Dec  2 10:16 git-data/</span><br><span class="line">drwxr-xr-x  3 git          root         60 Dec  2 10:16 gitlab-ci/</span><br><span class="line">drwxr-xr-x  9 git          root        240 Dec  2 10:16 gitlab-rails/</span><br><span class="line">drwx------  2 git          root         60 Dec  2 10:16 gitlab-shell/</span><br><span class="line">drwxr-x---  2 git          gitlab-www   80 Dec  2 10:16 gitlab-workhorse/</span><br><span class="line">drwx------  3 root         root         80 Dec  2 10:16 logrotate/</span><br><span class="line">drwxr-x---  9 root         gitlab-www  220 Dec  2 10:17 nginx/</span><br><span class="line">drwxr-xr-x  3 gitlab-psql  root        120 Dec  2 10:16 postgresql/</span><br><span class="line">drwxr-x---  2 gitlab-redis git          80 Dec  2 10:16 redis/</span><br><span class="line">-rw-r--r--  1 root         root         40 Dec  2 10:16 trusted-certs-directory-hash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – nginx-proxy</title>
      <link href="/2016/11/18/20161118-nginx-proxy/"/>
      <url>/2016/11/18/20161118-nginx-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Automatic-nginx-config-for-containers-using-an-env-var"><a href="#Automatic-nginx-config-for-containers-using-an-env-var" class="headerlink" title="Automatic nginx config for containers using an env var"></a>Automatic nginx config for containers using an env var</h2><ul><li><a href="https://hub.docker.com/r/jwilder/nginx-proxy/" target="_blank" rel="noopener">nginx-proxy</a></li></ul><h3 id="Configure-Domain-and-Subdomains"><a href="#Configure-Domain-and-Subdomains" class="headerlink" title="Configure Domain and Subdomains"></a>Configure Domain and Subdomains</h3><blockquote><p>You will require a registered domain name to do this</p></blockquote><ul><li>Configure DNS to point domain and subdomains to home router</li><li>Configure router to setup virtual server pointing to my laptop</li></ul><h3 id="Enable-docker-through-the-firewall"><a href="#Enable-docker-through-the-firewall" class="headerlink" title="Enable docker through the firewall"></a>Enable docker through the firewall</h3><blockquote><p>NOTE<br>I cannot get docker to popup <code>allow incoming connections</code></p></blockquote><p>Because of the firewall problem we have to use nginx to proxy to nginx-proxy</p><h4 id="usr-local-etc-nginx-servers-nginx-proxy-conf"><a href="#usr-local-etc-nginx-servers-nginx-proxy-conf" class="headerlink" title="/usr/local/etc/nginx/servers/nginx-proxy.conf"></a>/usr/local/etc/nginx/servers/nginx-proxy.conf</h4><pre><code>server {  # server_name localhost *.debugtime.com debugtime.com;  listen 80;  listen [::]:80;  set $upstream 127.0.0.1:8080;  location / {    proxy_pass_header Authorization;    proxy_pass http://$upstream;    proxy_set_header Host $host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_http_version 1.1;    proxy_set_header Connection &quot;&quot;;    proxy_buffering off;    client_max_body_size 0;    proxy_read_timeout 36000s;    proxy_redirect off;  }}</code></pre><h4 id="Start-nginx"><a href="#Start-nginx" class="headerlink" title="Start nginx"></a>Start nginx</h4><pre><code>sudo brew services start nginx</code></pre><h3 id="Start-nginx-proxy"><a href="#Start-nginx-proxy" class="headerlink" title="Start nginx-proxy"></a>Start nginx-proxy</h3><pre><code>docker run -d -p 8080:80 --name nginx-proxy \  -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy</code></pre><h3 id="Test-your-domain-when-the-service-is-down"><a href="#Test-your-domain-when-the-service-is-down" class="headerlink" title="Test your domain when the service is down"></a>Test your domain when the service is down</h3><pre><code>curl -I debugtime.com    HTTP/1.1 503 Service Temporarily Unavailable    [...]</code></pre><h3 id="Start-your-services"><a href="#Start-your-services" class="headerlink" title="Start your services"></a>Start your services</h3><p>The containers being proxied must expose the port to be proxied, either by using the EXPOSE directive in their Dockerfile or by using the –expose flag to docker run or docker create.</p><p>You will need:</p><ul><li>set the env var: <code>-e VIRTUAL_HOST=www.mydomain.com,mydomain.com</code></li><li>expose the port: <code>--expose &lt;service port&gt;</code></li></ul><blockquote><p>NOTE<br>You might be wondering what’s the difference between using <code>-p</code> and <code>--expose</code><br><code>--expose &lt;service_port&gt;</code> is for inter-container communications<br><code>-p &lt;host_port&gt;:&lt;container_port&gt;</code> is for opening access to the world</p></blockquote><h4 id="start-service-and-assign-to-www-debugtime-com-and-debugtime-com"><a href="#start-service-and-assign-to-www-debugtime-com-and-debugtime-com" class="headerlink" title="start service and assign to www.debugtime.com and debugtime.com"></a>start service and assign to <a href="http://www.debugtime.com" target="_blank" rel="noopener">www.debugtime.com</a> and debugtime.com</h4><pre><code>docker run -d \  -e VIRTUAL_HOST=www.debugtime.com,debugtime.com \  --name debugtime.com \  nginx</code></pre><blockquote><p>nginx exposes port 80 and 443<br>you can see that with <code>docker inspect nginx</code></p></blockquote><h4 id="start-service-and-assign-to-foo-debugtime-com"><a href="#start-service-and-assign-to-foo-debugtime-com" class="headerlink" title="start service and assign to foo.debugtime.com"></a>start service and assign to foo.debugtime.com</h4><pre><code>docker run -d \  -e VIRTUAL_HOST=foo.debugtime.com \  --name foo.debugtime.com \  nginx</code></pre><h3 id="Test-nginx-proxy-with-services-to-proxy-to"><a href="#Test-nginx-proxy-with-services-to-proxy-to" class="headerlink" title="Test nginx-proxy with services to proxy to"></a>Test nginx-proxy with services to proxy to</h3><pre><code>curl -I debugtime.com    HTTP/1.1 200 OK    [...]curl -I www.debugtime.com    HTTP/1.1 200 OK    [...]curl -I foo.debugtime.com    HTTP/1.1 200 OK    [...]</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – My Docker Infrastructure</title>
      <link href="/2016/11/18/20161118-my-docker-farm/"/>
      <url>/2016/11/18/20161118-my-docker-farm/</url>
      
        <content type="html"><![CDATA[<p>I’m going to tell you how I get my Docker Infrastructure up and running.</p><h2 id="Firing-up-the-monster"><a href="#Firing-up-the-monster" class="headerlink" title="Firing up the monster"></a>Firing up the monster</h2><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><ul><li>docker tools (docker, docker-machine, docker-machine-driver-xhyve)</li><li>bash scripts</li><li>rancher</li><li>nginx</li><li>nginx-proxy</li></ul><h4 id="The-firewall"><a href="#The-firewall" class="headerlink" title="The firewall"></a>The firewall</h4><p>Docker does not configure the firewall to accept incoming conections.  As a result we have to use nginx as a reverse-proxy to get past the firewall.</p><p>That means when we call <code>mydomain.com</code> my DNS server and router are configured to go to my laptop.  When they reach my laptop on port 80</p><p>This is the route that you will take to get to my services.</p><ol><li>DNS and router -&gt; laptop</li><li>laptop firewall -&gt; port 80 to nginx</li><li>nginx -&gt; nginx-proxy</li><li>nginx-proxy auto-configures itself by scanning containers to see which domain they are configured for.</li><li>service containers set an env var to identify the domain they handle</li></ol><p>My services are mapped to the following domains:</p><pre><code>debugtime.com         -&gt; nginx -&gt; nginx-proxy -&gt; reactioncommercerancher.debugtime.com -&gt; nginx -&gt; nginx-proxy -&gt; rancherblog.debugtime.com    -&gt; nginx -&gt; nginx-proxy -&gt; hexo</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Manage a Swarm Part 2</title>
      <link href="/2016/11/18/20161118-docker-manage-a-swarm-part2/"/>
      <url>/2016/11/18/20161118-docker-manage-a-swarm-part2/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 --><ul><li>Get started with swarm mode<ul><li>Setup for the tutorial</li><li>Create a swarm</li><li>Add nodes to the swarm</li><li>Deploy a service</li><li>Inspect a service</li><li>Scale a service</li><li>Delete the service</li><li>Apply rolling updates</li><li>Drain the node</li></ul></li></ul><!-- /TOC --><h1 id="Get-started-with-swarm-mode"><a href="#Get-started-with-swarm-mode" class="headerlink" title="Get started with swarm mode"></a>Get started with swarm mode</h1><p>The tutorial guides you through the following activities:</p><ul><li>initializing a cluster of Docker Engines in swarm mode</li><li>adding nodes to the swarm</li><li>deploying application services to the swarm</li><li>managing the swarm once you have everything running</li></ul><h2 id="Setup-for-the-tutorial"><a href="#Setup-for-the-tutorial" class="headerlink" title="Setup for the tutorial"></a>Setup for the tutorial</h2><p>To run this tutorial, you need the following:</p><ul><li>three networked host machines</li><li>Docker Engine 1.12 or later installed</li><li>the IP address of the manager machine</li><li>open ports between the hosts</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// setup 3 networked host machines (dkCreateHost is my bash function)</span><br><span class="line"></span><br><span class="line">  dkCreateHost manager1 ; dkCreateHost worker1 ; dkCreateHost worker2</span><br><span class="line"></span><br><span class="line">    [...]</span><br><span class="line"></span><br><span class="line">// see new machines</span><br><span class="line"></span><br><span class="line">  docker-machine ls</span><br><span class="line"></span><br><span class="line">// get the IP address of the manager machine</span><br><span class="line"></span><br><span class="line">  docker-machine ip manager1</span><br><span class="line"></span><br><span class="line">    192.168.64.24</span><br><span class="line"></span><br><span class="line">// Open ports between the hosts</span><br><span class="line"></span><br><span class="line">  TCP port 2377 for cluster management communications</span><br><span class="line">  TCP and UDP port 7946 for communication among nodes</span><br><span class="line">  TCP and UDP port 4789 for overlay network traffic</span><br><span class="line"></span><br><span class="line">    ASSUMING THEY ARE OPEN BY DEFAULT</span><br></pre></td></tr></table></figure><h2 id="Create-a-swarm"><a href="#Create-a-swarm" class="headerlink" title="Create a swarm"></a>Create a swarm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager node</span><br><span class="line"></span><br><span class="line">  bash docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// create new swarm</span><br><span class="line"></span><br><span class="line">  docker swarm init                                   // IF DOCKER_FOR_MAC</span><br><span class="line">  docker swarm init --advertise-addr &lt;MANAGER-IP&gt;     // IF NOT DOCKER_FOR_MAC</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Swarm initialized: current node (b6o6chvidibsnbbqp1ximau36) is now a manager.</span><br><span class="line"></span><br><span class="line">      To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">          docker swarm join \</span><br><span class="line">          --token SWMTKN-1-32428f9y2gf98blwa7ko930v3w484ffkbuzwr0rebrrfelwl75-832m3a1hd1pq54kocro2p87xj \</span><br><span class="line">          192.168.64.24:2377</span><br><span class="line"></span><br><span class="line">      To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br><span class="line"></span><br><span class="line">// view swarm state</span><br><span class="line"></span><br><span class="line">  docker info</span><br><span class="line"></span><br><span class="line">      Containers: 0</span><br><span class="line">      Running: 0</span><br><span class="line">      Paused: 0</span><br><span class="line">      Stopped: 0</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// view node info</span><br><span class="line"></span><br><span class="line">  docker node ls</span><br><span class="line"></span><br><span class="line">      ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line">      b6o6chvidibsnbbqp1ximau36 *  manager1  Ready   Active        Leader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      - The * next to the node id indicates that you’re currently connected on this node.</span><br><span class="line">      - Docker Engine swarm mode automatically names the node for the machine host name.</span><br><span class="line">      The tutorial covers other columns in later steps.</span><br></pre></td></tr></table></figure><h2 id="Add-nodes-to-the-swarm"><a href="#Add-nodes-to-the-swarm" class="headerlink" title="Add nodes to the swarm"></a>Add nodes to the swarm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// add worker1 and worker2 to the swarm</span><br><span class="line"></span><br><span class="line">  # ssh into worker1</span><br><span class="line">  docker-machine ssh worker1</span><br><span class="line"></span><br><span class="line">  # add node to swarm</span><br><span class="line"></span><br><span class="line">      docker swarm join \</span><br><span class="line">      --token SWMTKN-1-32428f9y2gf98blwa7ko930v3w484ffkbuzwr0rebrrfelwl75-832m3a1hd1pq54kocro2p87xj \</span><br><span class="line">      192.168.64.24:2377</span><br><span class="line"></span><br><span class="line">  # repeat steps for worker2</span><br><span class="line"></span><br><span class="line">// see swarm nodes</span><br><span class="line"></span><br><span class="line">  # ssh into manager1</span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">  # list nodes</span><br><span class="line">  docker node ls</span><br><span class="line"></span><br><span class="line">      ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line">      5hfb7vaclplat92apq1ugc40v    worker1   Ready   Active</span><br><span class="line">      b6o6chvidibsnbbqp1ximau36 *  manager1  Ready   Active        Leader</span><br><span class="line">      bx5oreu7adss9zt14it1cv30p    worker2   Ready   Active</span><br></pre></td></tr></table></figure><h2 id="Deploy-a-service"><a href="#Deploy-a-service" class="headerlink" title="Deploy a service"></a>Deploy a service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager1</span><br><span class="line"></span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// create a service</span><br><span class="line"></span><br><span class="line">  docker service create --replicas 1 --name hello alpine ping docker.com</span><br><span class="line"></span><br><span class="line">// list services</span><br><span class="line"></span><br><span class="line">  docker service ls</span><br><span class="line"></span><br><span class="line">      ID            NAME   REPLICAS  IMAGE   COMMAND</span><br><span class="line">      0cd3kt96c1ta  hello  1/1       alpine  ping docker.com</span><br></pre></td></tr></table></figure><h2 id="Inspect-a-service"><a href="#Inspect-a-service" class="headerlink" title="Inspect a service"></a>Inspect a service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager1</span><br><span class="line"></span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// inspect service</span><br><span class="line"></span><br><span class="line">  docker service inspect --pretty hello</span><br><span class="line"></span><br><span class="line">      ID:0cd3kt96c1takhb4kzzu3hfds</span><br><span class="line">      Name:hello</span><br><span class="line">      Mode:Replicated</span><br><span class="line">       Replicas:1</span><br><span class="line">      Placement:</span><br><span class="line">      UpdateConfig:</span><br><span class="line">       Parallelism:1</span><br><span class="line">       On failure:pause</span><br><span class="line">      ContainerSpec:</span><br><span class="line">       Image:alpine</span><br><span class="line">       Args:ping docker.com</span><br><span class="line">      Resources:</span><br><span class="line"></span><br><span class="line">// inspect service in json format</span><br><span class="line"></span><br><span class="line">  docker service inspect hello</span><br><span class="line"></span><br><span class="line">      [</span><br><span class="line">          &#123;</span><br><span class="line">              &quot;ID&quot;: &quot;0cd3kt96c1takhb4kzzu3hfds&quot;,</span><br><span class="line">              &quot;Version&quot;: &#123;</span><br><span class="line">                  &quot;Index&quot;: 22</span><br><span class="line">              &#125;,</span><br><span class="line">              &quot;CreatedAt&quot;: &quot;2016-11-18T01:13:24.443476961Z&quot;,</span><br><span class="line">              &quot;UpdatedAt&quot;: &quot;2016-11-18T01:13:24.443476961Z&quot;,</span><br><span class="line">              &quot;Spec&quot;: &#123;</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// see service nodes</span><br><span class="line"></span><br><span class="line">  docker service ps hello</span><br><span class="line"></span><br><span class="line">      ID                         NAME     IMAGE   NODE      DESIRED STATE  CURRENT STATE          ERROR</span><br><span class="line">      deo5pa5lstobae1dgilpqrqnz  hello.1  alpine  manager1  Running        Running 6 minutes ago</span><br><span class="line"></span><br><span class="line">// check the node for container details</span><br><span class="line"></span><br><span class="line">  docker ps</span><br><span class="line"></span><br><span class="line">      CONTAINER ID  ... STATUS              PORTS               NAMES</span><br><span class="line">      2d4ee26d618b  ... 18 minutes ago      Up 18 minutes       hello.1.deo5pa5lstobae1dgilpqrqnz</span><br></pre></td></tr></table></figure><h2 id="Scale-a-service"><a href="#Scale-a-service" class="headerlink" title="Scale a service"></a>Scale a service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager1</span><br><span class="line"></span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// scale the service</span><br><span class="line"></span><br><span class="line">  docker service scale hello=5</span><br><span class="line"></span><br><span class="line">      hello scaled to 5</span><br><span class="line"></span><br><span class="line">// see task list</span><br><span class="line"></span><br><span class="line">  docker service ps hello</span><br><span class="line"></span><br><span class="line">      ID                         NAME     IMAGE   NODE      DESIRED STATE  CURRENT STATE           ERROR</span><br><span class="line">      deo5pa5lstobae1dgilpqrqnz  hello.1  alpine  manager1  Running        Running 25 minutes ago</span><br><span class="line">      6nieysy0h1go6v5yrtbyrt53k  hello.2  alpine  worker2   Running        Running 29 seconds ago</span><br><span class="line">      bvl03me8ru6d3zm8j32iluyw9  hello.3  alpine  worker1   Running        Running 29 seconds ago</span><br><span class="line">      cpjon94jxxthliuomhuiei8e7  hello.4  alpine  worker1   Running        Running 29 seconds ago</span><br><span class="line">      3ybrznl0v1vst19wtau3fq25x  hello.5  alpine  manager1  Running        Running 32 seconds ago</span><br><span class="line"></span><br><span class="line">// see node container info</span><br><span class="line"></span><br><span class="line">  docker ps</span><br><span class="line"></span><br><span class="line">      CONTAINER ID   ... STATUS              PORTS               NAMES</span><br><span class="line">      724323616e6c   ... Up 4 minutes                            hello.5.3ybrznl0v1vst19wtau3fq25x</span><br><span class="line">      2d4ee26d618b   ... Up 29 minutes                           hello.1.deo5pa5lstobae1dgilpqrqnz</span><br></pre></td></tr></table></figure><h2 id="Delete-the-service"><a href="#Delete-the-service" class="headerlink" title="Delete the service"></a>Delete the service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager1</span><br><span class="line"></span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// remove service</span><br><span class="line"></span><br><span class="line">  docker service rm hello</span><br><span class="line"></span><br><span class="line">      hello</span><br><span class="line"></span><br><span class="line">// verify service removal</span><br><span class="line"></span><br><span class="line">  docker inspect hello</span><br><span class="line"></span><br><span class="line">      []</span><br><span class="line">      Error: no such service: hello</span><br></pre></td></tr></table></figure><h2 id="Apply-rolling-updates"><a href="#Apply-rolling-updates" class="headerlink" title="Apply rolling updates"></a>Apply rolling updates</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager1</span><br><span class="line"></span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// deploy Redis 3.0.6 to the swarm with a 10 second update delay</span><br><span class="line"></span><br><span class="line">  docker service create \</span><br><span class="line">    --replicas 3 \</span><br><span class="line">    --name redis \</span><br><span class="line">    --update-delay 10s \</span><br><span class="line">    redis:3.0.6</span><br><span class="line"></span><br><span class="line">      104tlme67z7kewccmznvm39du</span><br><span class="line"></span><br><span class="line">  # --update-delay format is 1h10m30s –– 1 hour 10 minutes and 30 seconds</span><br><span class="line"></span><br><span class="line">// inspect the redis service</span><br><span class="line"></span><br><span class="line">  docker service inspect --pretty redis</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      Image:redis:3.0.6</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// update the container image for redis</span><br><span class="line"></span><br><span class="line">  docker service update --image redis:3.0.7 redis</span><br><span class="line"></span><br><span class="line">      redis</span><br><span class="line"></span><br><span class="line">// inspect the redis service</span><br><span class="line"></span><br><span class="line">  docker service inspect --pretty redis</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      Image:redis:3.0.7</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">  # shows if your update paused due to failure</span><br><span class="line"></span><br><span class="line">// restart paused service if necessary</span><br><span class="line"></span><br><span class="line">  docker service update redis</span><br><span class="line"></span><br><span class="line">      # To avoid repeating certain update failures you may need to pass flags to docker</span><br><span class="line"></span><br><span class="line">// monitor rolling updates</span><br><span class="line"></span><br><span class="line">  docker service ps redis</span><br><span class="line"></span><br><span class="line">      ID                         NAME         IMAGE        NODE      DESIRED STATE  CURRENT STATE           ERROR</span><br><span class="line">      bk1ujjcsnkp8gavbv9kb4e2p5  redis.1      redis:3.0.7  worker2   Running        Running 5 minutes ago</span><br><span class="line">      89xfgslzwdl46169dy75a87vt   \_ redis.1  redis:3.0.6  worker2   Shutdown       Shutdown 5 minutes ago</span><br><span class="line">      2me0n3awwrrvx3hyp1bhlcjyj  redis.2      redis:3.0.7  manager1  Running        Running 5 minutes ago</span><br><span class="line">      ekf32w4ncj2pycofoiio4kxa6   \_ redis.2  redis:3.0.6  worker1   Shutdown       Shutdown 5 minutes ago</span><br><span class="line">      7f41okqfq11fmrhu2u3dajsk1  redis.3      redis:3.0.7  manager1  Running        Running 6 minutes ago</span><br><span class="line">      0i0jbv3brq4yugbcodubhdk6d   \_ redis.3  redis:3.0.6  manager1  Shutdown       Shutdown 6 minutes ago</span><br></pre></td></tr></table></figure><h2 id="Drain-the-node"><a href="#Drain-the-node" class="headerlink" title="Drain the node"></a>Drain the node</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">// ssh into manager1</span><br><span class="line"></span><br><span class="line">  docker-machine ssh manager1</span><br><span class="line"></span><br><span class="line">// verify all nodes are available</span><br><span class="line"></span><br><span class="line">  docker node ls</span><br><span class="line"></span><br><span class="line">      ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line">      5hfb7vaclplat92apq1ugc40v    worker1   Ready   Active</span><br><span class="line">      b6o6chvidibsnbbqp1ximau36 *  manager1  Ready   Active        Leader</span><br><span class="line">      bx5oreu7adss9zt14it1cv30p    worker2   Ready   Active</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// run redis service if not already running</span><br><span class="line"></span><br><span class="line">  docker service create --replicas 3 --name redis --update-delay 10s redis:3.0.6</span><br><span class="line"></span><br><span class="line">      104tlme67z7k</span><br><span class="line"></span><br><span class="line">// see task assignment</span><br><span class="line"></span><br><span class="line">  docker service ps redis</span><br><span class="line"></span><br><span class="line">      ID                         NAME         IMAGE        NODE      DESIRED STATE  CURRENT STATE            ERROR</span><br><span class="line">      bk1ujjcsnkp8gavbv9kb4e2p5  redis.1      redis:3.0.7  worker2   Running        Running 28 minutes ago</span><br><span class="line">      89xfgslzwdl46169dy75a87vt   \_ redis.1  redis:3.0.6  worker2   Shutdown       Shutdown 28 minutes ago</span><br><span class="line">      2me0n3awwrrvx3hyp1bhlcjyj  redis.2      redis:3.0.7  manager1  Running        Running 28 minutes ago</span><br><span class="line">      ekf32w4ncj2pycofoiio4kxa6   \_ redis.2  redis:3.0.6  worker1   Shutdown       Shutdown 28 minutes ago</span><br><span class="line">      7f41okqfq11fmrhu2u3dajsk1  redis.3      redis:3.0.7  manager1  Running        Running 28 minutes ago</span><br><span class="line">      0i0jbv3brq4yugbcodubhdk6d   \_ redis.3  redis:3.0.6  manager1  Shutdown       Shutdown 29 minutes ago</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// drain worker1 node</span><br><span class="line"></span><br><span class="line">  docker node update --availability drain worker1</span><br><span class="line"></span><br><span class="line">      worker1</span><br><span class="line"></span><br><span class="line">// check node availability</span><br><span class="line"></span><br><span class="line">  docker node inspect --pretty worker1</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      Status:</span><br><span class="line">       State:Ready</span><br><span class="line">       Availability:Drain</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// see updated task assignment</span><br><span class="line"></span><br><span class="line">  docker service ps redis</span><br><span class="line"></span><br><span class="line">      ID                         NAME         IMAGE        NODE      DESIRED STATE  CURRENT STATE         ERROR</span><br><span class="line">      bk1ujjcsnkp8gavbv9kb4e2p5  redis.1      redis:3.0.7  worker2   Running        Running 2 hours ago</span><br><span class="line">      89xfgslzwdl46169dy75a87vt   \_ redis.1  redis:3.0.6  worker2   Shutdown       Shutdown 2 hours ago</span><br><span class="line">      2me0n3awwrrvx3hyp1bhlcjyj  redis.2      redis:3.0.7  manager1  Running        Running 2 hours ago</span><br><span class="line">      ekf32w4ncj2pycofoiio4kxa6   \_ redis.2  redis:3.0.6  worker1   Shutdown       Shutdown 2 hours ago</span><br><span class="line">      7f41okqfq11fmrhu2u3dajsk1  redis.3      redis:3.0.7  manager1  Running        Running 2 hours ago</span><br><span class="line">      0i0jbv3brq4yugbcodubhdk6d   \_ redis.3  redis:3.0.6  manager1  Shutdown       Shutdown 2 hours ago</span><br><span class="line"></span><br><span class="line">// return node to active use</span><br><span class="line"></span><br><span class="line">  docker node update --availability active worker1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// check node availability</span><br><span class="line"></span><br><span class="line">  docker node inspect --pretty worker1</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      Status:</span><br><span class="line">       State:Ready</span><br><span class="line">       Availability:Active</span><br><span class="line">      [...]</span><br></pre></td></tr></table></figure><h2 id="Use-swarm-mode-routing-mesh"><a href="#Use-swarm-mode-routing-mesh" class="headerlink" title="Use swarm mode routing mesh"></a>Use swarm mode routing mesh</h2><p>In order to use the ingress network in the swarm, you need to have the following ports open between the swarm nodes before you enable swarm mode:</p><ul><li>Port 7946 TCP/UDP for container network discovery.</li><li>Port 4789 UDP for the container ingress network.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">// start a serice with published port</span><br><span class="line"></span><br><span class="line">  docker service create \</span><br><span class="line">    --name my-web \</span><br><span class="line">    --publish 5000:80 \</span><br><span class="line">    --replicas 2 \</span><br><span class="line">    nginx</span><br><span class="line"></span><br><span class="line">  # publish port 5000 for the service</span><br><span class="line">  # all nodes listen on port 5000 and route to active containers</span><br><span class="line"></span><br><span class="line">      85h6grnafwiawihekoy4ql20q</span><br><span class="line"></span><br><span class="line">// view the service’s published port</span><br><span class="line"></span><br><span class="line">  docker service inspect --pretty  my-web</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      Ports:</span><br><span class="line">       Protocol = tcp</span><br><span class="line">       TargetPort = 80</span><br><span class="line">       PublishedPort = 5000</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// remove service and verify removal</span><br><span class="line"></span><br><span class="line">  docker service rm my-web ; docker inspect my-web</span><br><span class="line"></span><br><span class="line">      my-web</span><br><span class="line">      []</span><br><span class="line">      Error: No such image, container or task: my-web</span><br><span class="line"></span><br><span class="line">// start a service without published port</span><br><span class="line"></span><br><span class="line">  docker service create \</span><br><span class="line">    --name my-web \</span><br><span class="line">    --replicas 2 \</span><br><span class="line">    nginx</span><br><span class="line"></span><br><span class="line">      eg082ga5qvvijwi526ubrwx44</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// verify the service has no published port</span><br><span class="line"></span><br><span class="line">  docker service inspect --pretty  my-web</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      &lt;no Ports section&gt;</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// publish a port for an existing service</span><br><span class="line"></span><br><span class="line">  docker service update \</span><br><span class="line">    --publish-add 5000:80 \</span><br><span class="line">    my-web</span><br><span class="line"></span><br><span class="line">// view the service’s published port</span><br><span class="line"></span><br><span class="line">  docker service inspect --pretty  my-web</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      Ports:</span><br><span class="line">       Protocol = tcp</span><br><span class="line">       TargetPort = 80</span><br><span class="line">       PublishedPort = 5000</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// test the service</span><br><span class="line"></span><br><span class="line">  curl localhost:5000</span><br><span class="line"></span><br><span class="line">    [...]</span><br><span class="line">    &lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">    [...]</span><br></pre></td></tr></table></figure><h2 id="Configure-an-external-load-balancer"><a href="#Configure-an-external-load-balancer" class="headerlink" title="Configure an external load balancer"></a>Configure an external load balancer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// to be done</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Manage a Swarm Part 1</title>
      <link href="/2016/11/17/20161117-docker-manage-a-swarm-part1/"/>
      <url>/2016/11/17/20161117-docker-manage-a-swarm-part1/</url>
      
        <content type="html"><![CDATA[<h2 id="Swarm-Mode-Overview"><a href="#Swarm-Mode-Overview" class="headerlink" title="Swarm Mode Overview"></a>Swarm Mode Overview</h2><ul><li><p><code>Cluster management integrated with Docker Engine</code>: Use the Docker Engine CLI to create a swarm of Docker Engines where you can deploy application services. You don’t need additional orchestration software to create or manage a swarm.</p></li><li><p><code>Decentralized design</code>: Instead of handling differentiation between node roles at deployment time, the Docker Engine handles any specialization at runtime. You can deploy both kinds of nodes, managers and workers, using the Docker Engine. This means you can build an entire swarm from a single disk image.</p></li><li><p><code>Declarative service model</code>: Docker Engine uses a declarative approach to let you define the desired state of the various services in your application stack. For example, you might describe an application comprised of a web front end service with message queueing services and a database backend.</p></li><li><p><code>Scaling</code>: For each service, you can declare the number of tasks you want to run. When you scale up or down, the swarm manager automatically adapts by adding or removing tasks to maintain the desired state.</p></li><li><p><code>Desired state reconciliation</code>: The swarm manager node constantly monitors the cluster state and reconciles any differences between the actual state your expressed desired state. For example, if you set up a service to run 10 replicas of a container, and a worker machine hosting two of those replicas crashes, the manager will create two new replicas to replace the replicas that crashed. The swarm manager assigns the new replicas to workers that are running and available.</p></li><li><p><code>Multi-host networking</code>: You can specify an overlay network for your services. The swarm manager automatically assigns addresses to the containers on the overlay network when it initializes or updates the application.</p></li><li><p><code>Service discovery</code>: Swarm manager nodes assign each service in the swarm a unique DNS name and load balances running containers. You can query every container running in the swarm through a DNS server embedded in the swarm.</p></li><li><p><code>Load balancing</code>: You can expose the ports for services to an external load balancer. Internally, the swarm lets you specify how to distribute service containers between nodes.</p></li><li><p><code>Secure by default</code>: Each node in the swarm enforces TLS mutual authentication and encryption to secure communications between itself and all other nodes. You have the option to use self-signed root certificates or certificates from a custom root CA.</p></li><li><p><code>Rolling updates</code>: At rollout time you can apply service updates to nodes incrementally. The swarm manager lets you control the delay between service deployment to different sets of nodes. If anything goes wrong, you can roll-back a task to a previous version of the service.</p></li></ul><h2 id="Swarm-Mode-Key-Concepts"><a href="#Swarm-Mode-Key-Concepts" class="headerlink" title="Swarm Mode Key Concepts"></a>Swarm Mode Key Concepts</h2><p>This topic introduces some of the concepts unique to the cluster management and orchestration features of Docker Engine 1.12.</p><h3 id="Swarm"><a href="#Swarm" class="headerlink" title="Swarm"></a>Swarm</h3><p>The cluster management and orchestration features embedded in the Docker Engine are built using <code>SwarmKit</code>. Engines participating in a cluster are running in <code>swarm mode</code>. You enable swarm mode for the Engine by either initializing a swarm or joining an existing swarm.</p><p>A <code>swarm</code> is a cluster of Docker Engines where you deploy services. The Docker Engine CLI includes the commands for swarm management, such as adding and removing nodes. The CLI also includes the commands you need to deploy services to the swarm and manage service orchestration.</p><p>When you run Docker Engine outside of swarm mode, you execute container commands. When you run the Engine in swarm mode, you orchestrate services.</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>A <code>node</code> is an instance of the Docker Engine participating in the swarm.</p><p>To deploy your application to a swarm, you submit a service definition to a <code>manager node</code>. The manager node dispatches units of work called <code>tasks</code> to worker nodes.</p><p>Manager nodes also perform the orchestration and cluster management functions required to maintain the desired state of the swarm. Manager nodes elect a single leader to conduct orchestration tasks.</p><p><code>Worker nodes</code> receive and execute tasks dispatched from manager nodes. By default manager nodes are also worker nodes, but you can configure managers to be manager-only nodes. The agent notifies the manager node of the current state of its assigned tasks so the manager can maintain the desired state.</p><h3 id="Services-and-tasks"><a href="#Services-and-tasks" class="headerlink" title="Services and tasks"></a>Services and tasks</h3><p>A <code>service</code> is the definition of the tasks to execute on the worker nodes. It is the central structure of the swarm system and the primary root of user interaction with the swarm.</p><p>When you create a service, you specify which container image to use and which commands to execute inside running containers.</p><p>In the <code>replicated services</code> model, the swarm manager distributes a specific number of replica tasks among the nodes based upon the scale you set in the desired state.</p><p>For <code>global services</code>, the swarm runs one task for the service on every available node in the cluster.</p><p>A <code>task</code> carries a Docker container and the commands to run inside the container. It is the atomic scheduling unit of swarm. Manager nodes assign tasks to worker nodes according to the number of replicas set in the service scale. Once a task is assigned to a node, it cannot move to another node. It can only run on the assigned node or fail.</p><h3 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h3><p>The swarm manager uses <code>ingress load balancing</code> to expose the services you want to make available externally to the swarm. The swarm manager can automatically assign the service a <code>PublishedPort</code> or you can configure a PublishedPort for the service. You can specify any unused port. If you do not specify a port, the swarm manager assigns the service a port in the 30000-32767 range.</p><p>External components, such as cloud load balancers, can access the service on the PublishedPort of any node in the cluster whether or not the node is currently running the task for the service. All nodes in the swarm route ingress connections to a running task instance.</p><p>Swarm mode has an internal DNS component that automatically assigns each service in the swarm a DNS entry. The swarm manager uses <code>internal load balancing</code> to distribute requests among services within the cluster based upon the DNS name of the service.</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Docker Compose Part 2</title>
      <link href="/2016/11/16/20161116-docker-compose-part2/"/>
      <url>/2016/11/16/20161116-docker-compose-part2/</url>
      
        <content type="html"><![CDATA[<h2 id="Get-started-with-Docker-Compose"><a href="#Get-started-with-Docker-Compose" class="headerlink" title="Get started with Docker Compose"></a>Get started with Docker Compose</h2><h3 id="Setup-python-app"><a href="#Setup-python-app" class="headerlink" title="Setup python app"></a>Setup python app</h3><ul><li>create project directory</li><li>create app.py python script</li><li>create requirements.txt file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// create project directory</span><br><span class="line"></span><br><span class="line">  mkdir compose-test</span><br><span class="line">  cd compose-test</span><br><span class="line"></span><br><span class="line">// create app.py python script</span><br><span class="line"></span><br><span class="line">    from flask import Flask</span><br><span class="line">    from redis import Redis</span><br><span class="line"></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    redis = Redis(host=&apos;redis&apos;, port=6379)</span><br><span class="line"></span><br><span class="line">    @app.route(&apos;/&apos;)</span><br><span class="line">    def hello():</span><br><span class="line">        redis.incr(&apos;hits&apos;)</span><br><span class="line">        return &apos;Hello World! I have been seen %s times.&apos; % redis.get(&apos;hits&apos;)</span><br><span class="line"></span><br><span class="line">    if __name__ == &quot;__main__&quot;:</span><br><span class="line">        app.run(host=&quot;0.0.0.0&quot;, debug=True)</span><br><span class="line"></span><br><span class="line">// create requirements.txt file</span><br><span class="line"></span><br><span class="line">    flask</span><br><span class="line">    redis</span><br></pre></td></tr></table></figure><h3 id="Create-docker-image"><a href="#Create-docker-image" class="headerlink" title="Create docker image"></a>Create docker image</h3><ul><li>create Dockerfile</li><li>build the image</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// create Dockerfile</span><br><span class="line"></span><br><span class="line">    FROM python:2.7</span><br><span class="line">    ADD . /code</span><br><span class="line">    WORKDIR /code</span><br><span class="line">    RUN pip install -r requirements.txt</span><br><span class="line">    CMD python app.py</span><br><span class="line"></span><br><span class="line">// build the image</span><br><span class="line"></span><br><span class="line">    docker build -t web .</span><br></pre></td></tr></table></figure><h3 id="Define-services"><a href="#Define-services" class="headerlink" title="Define services"></a>Define services</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// create docker-compose.yml</span><br><span class="line"></span><br><span class="line">    version: &apos;2&apos;</span><br><span class="line">    services:</span><br><span class="line">      web:</span><br><span class="line">        build: .</span><br><span class="line">        ports:</span><br><span class="line">         - &quot;5000:5000&quot;</span><br><span class="line">        volumes:</span><br><span class="line">         - .:/code</span><br><span class="line">        depends_on:</span><br><span class="line">         - redis</span><br><span class="line">      redis:</span><br><span class="line">        image: redis</span><br></pre></td></tr></table></figure><h3 id="Build-and-run-your-app-with-Compose"><a href="#Build-and-run-your-app-with-Compose" class="headerlink" title="Build and run your app with Compose"></a>Build and run your app with Compose</h3><ul><li>start your app</li><li>open app in browser</li><li>refresh the page</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// start your app</span><br><span class="line"></span><br><span class="line">  docker-compose up</span><br><span class="line"></span><br><span class="line">      Pulling image redis...</span><br><span class="line">      Building web...</span><br><span class="line">      Starting composetest_redis_1...</span><br><span class="line">      Starting composetest_web_1...</span><br><span class="line">      redis_1 | [8] 02 Jan 18:43:35.576 # Server started, Redis version 2.8.3</span><br><span class="line">      web_1   |  * Running on http://0.0.0.0:5000/</span><br><span class="line">      web_1   |  * Restarting with stat</span><br><span class="line"></span><br><span class="line">// open app in browser</span><br><span class="line"></span><br><span class="line">  open http://0.0.0.0:5000/</span><br><span class="line"></span><br><span class="line">// refresh the page</span><br><span class="line"></span><br><span class="line">  watch the counter increment</span><br></pre></td></tr></table></figure><h3 id="Experiment-with-some-other-commands"><a href="#Experiment-with-some-other-commands" class="headerlink" title="Experiment with some other commands"></a>Experiment with some other commands</h3><ul><li>run app in the background</li><li>run commands on service containers</li><li>stop your app</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// run app in the background</span><br><span class="line"></span><br><span class="line">  docker-compose up -d</span><br><span class="line"></span><br><span class="line">      // running containers</span><br><span class="line">      composetest_web_1</span><br><span class="line">      composetest_redis_1</span><br><span class="line"></span><br><span class="line">// run commands on images</span><br><span class="line"></span><br><span class="line">  docker-compose run web env</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// run commands on service containers</span><br><span class="line"></span><br><span class="line">  docker exec composetest_web_1 env</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// stop your app</span><br><span class="line"></span><br><span class="line">  docker-compose stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Docker Compose Part 1</title>
      <link href="/2016/11/16/20161116-docker-compose-part1/"/>
      <url>/2016/11/16/20161116-docker-compose-part1/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a Compose file to configure your application’s services. Then, using a single command, you create and start all the services from your configuration.</p><p>Using Compose is basically a three-step process.</p><ol><li>Define your app’s environment with a Dockerfile so it can be reproduced anywhere.</li><li>Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.</li><li>Lastly, run docker-compose up and Compose will start and run your entire app.</li></ol><p>A docker-compose.yml looks like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">    - &quot;5000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">    - .:/code</span><br><span class="line">    - logvolume01:/var/log</span><br><span class="line">    links:</span><br><span class="line">    - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">volumes:</span><br><span class="line">  logvolume01: &#123;&#125;</span><br></pre></td></tr></table></figure><p>Compose has commands for managing the whole lifecycle of your application:</p><ul><li>Start, stop and rebuild services</li><li>View the status of running services</li><li>Stream the log output of running services</li><li>Run a one-off command on a service</li></ul><h3 id="The-features-of-Compose-that-make-it-effective-are"><a href="#The-features-of-Compose-that-make-it-effective-are" class="headerlink" title="The features of Compose that make it effective are:"></a>The features of Compose that make it effective are:</h3><h4 id="Multiple-isolated-environments-on-a-single-host"><a href="#Multiple-isolated-environments-on-a-single-host" class="headerlink" title="Multiple isolated environments on a single host"></a>Multiple isolated environments on a single host</h4><p>Compose uses a project name to isolate environments from each other. The default project name is the basename of the project directory. You can set a custom project name by using the -p command line option or the COMPOSE_PROJECT_NAME environment variable.</p><h4 id="Preserve-volume-data-when-containers-are-created"><a href="#Preserve-volume-data-when-containers-are-created" class="headerlink" title="Preserve volume data when containers are created"></a>Preserve volume data when containers are created</h4><p>Compose preserves all volumes used by your services. When docker-compose up runs, if it finds any containers from previous runs, it copies the volumes from the old container to the new container. This process ensures that any data you’ve created in volumes isn’t lost.</p><h4 id="Only-recreate-containers-that-have-changed"><a href="#Only-recreate-containers-that-have-changed" class="headerlink" title="Only recreate containers that have changed"></a>Only recreate containers that have changed</h4><p>Compose caches the configuration used to create a container. When you restart a service that has not changed, Compose re-uses the existing containers. Re-using containers means that you can make changes to your environment very quickly.</p><h4 id="Variables-and-moving-a-composition-between-environments"><a href="#Variables-and-moving-a-composition-between-environments" class="headerlink" title="Variables and moving a composition between environments"></a>Variables and moving a composition between environments</h4><p>Compose supports variables in the Compose file. You can use these variables to customize your composition for different environments, or different users. See Variable substitution for more details.</p><p>You can extend a Compose file using the extends field or by creating multiple Compose files. See extends for more details.</p><h3 id="Common-Use-Cases"><a href="#Common-Use-Cases" class="headerlink" title="Common Use Cases"></a>Common Use Cases</h3><ul><li><code>Developer environments</code>: simplify getting started</li><li><code>Automated testing environments</code>: create and destroy environments with a single command</li><li><code>Single host deployments</code>: You can use Compose to deploy to a remote Docker Engine or Docker Swarm Cluster.</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>It comes with Docker For Mac</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Object Labels</title>
      <link href="/2016/11/16/20161116-docker-object-labels/"/>
      <url>/2016/11/16/20161116-docker-object-labels/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Object-Labels"><a href="#Docker-Object-Labels" class="headerlink" title="Docker Object Labels"></a>Docker Object Labels</h1><!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 --><ul><li>Docker Object Labels<ul><li>Images and containers</li><li>Local Docker daemons</li><li>Volumes</li><li>Networks</li><li>Swarm nodes</li><li>Swarm services</li></ul></li></ul><!-- /TOC --><h2 id="Images-and-containers"><a href="#Images-and-containers" class="headerlink" title="Images and containers"></a>Images and containers</h2><ul><li>Adding labels to images</li><li>Overriding a container’s labels at runtime</li><li>Inspecting labels on images or containers</li><li>Filtering images by label</li><li>Filtering containers by label</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//  Adding labels to images</span><br><span class="line"></span><br><span class="line">  dockerfile:</span><br><span class="line"></span><br><span class="line">    LABEL &quot;com.example.vendor&quot;=&quot;ACME Incorporated&quot;</span><br><span class="line">    LABEL com.example.label-with-value=&quot;foo&quot;</span><br><span class="line">    LABEL version=&quot;1.0&quot;</span><br><span class="line">    LABEL description=&quot;This text illustrates \</span><br><span class="line">    that label-values can span multiple lines.&quot;</span><br><span class="line"></span><br><span class="line">//  Overriding a container’s labels at runtime</span><br><span class="line"></span><br><span class="line">  docker run --label value</span><br><span class="line">  docker run -l value</span><br><span class="line"></span><br><span class="line">//  Inspecting labels on images or containers</span><br><span class="line"></span><br><span class="line">  docker inspect container|image</span><br><span class="line"></span><br><span class="line">//  Filtering images by label</span><br><span class="line"></span><br><span class="line">  docker inspect --format=&apos;&#123;&#123;json .Config.Labels&#125;&#125;&apos; image</span><br><span class="line">  docker inspect --format=&apos;&#123;&#123;json .Config.Labels&#125;&#125;&apos; centos | grep &apos;&quot;license&quot;:&quot;GPLv2&quot;&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//  Filtering containers by label</span><br><span class="line"></span><br><span class="line">  docker ps --filter label=value</span><br><span class="line">  docker ps -f label=value</span><br></pre></td></tr></table></figure><h2 id="Local-Docker-daemons"><a href="#Local-Docker-daemons" class="headerlink" title="Local Docker daemons"></a>Local Docker daemons</h2><ul><li>Adding labels to a Docker daemon at runtime</li><li>Inspecting a Docker daemon’s labels</li></ul><h2 id="Volumes"><a href="#Volumes" class="headerlink" title="Volumes"></a>Volumes</h2><ul><li>Adding labels to volumes</li><li>Inspecting a volume’s labels</li><li>Filtering volumes by label</li></ul><h2 id="Networks"><a href="#Networks" class="headerlink" title="Networks"></a>Networks</h2><ul><li>Adding labels to a network</li><li>Inspecting a network’s labels</li><li>Filtering networks by label</li></ul><h2 id="Swarm-nodes"><a href="#Swarm-nodes" class="headerlink" title="Swarm nodes"></a>Swarm nodes</h2><ul><li>Adding or updating a swarm node’s labels</li><li>Inspecting a swarm node’s labels</li><li>Filtering swarm nodes by label</li></ul><h2 id="Swarm-services"><a href="#Swarm-services" class="headerlink" title="Swarm services"></a>Swarm services</h2><ul><li>Adding labels when creating a swarm service</li><li>Updating a swarm service’s labels</li><li>Inspecting a swarm service’s labels</li><li>Filtering swarm services by label</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Learn By Example</title>
      <link href="/2016/11/15/20161115-docker-learn-by-example/"/>
      <url>/2016/11/15/20161115-docker-learn-by-example/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-––-Learn-By-Example"><a href="#Docker-––-Learn-By-Example" class="headerlink" title="Docker –– Learn By Example"></a>Docker –– Learn By Example</h1><p><a href="https://goo.gl/F5ZTQS" target="_blank" rel="noopener">source material</a></p><!-- TOC depthFrom:1 depthTo:3 withLinks:0 updateOnSave:1 orderedList:0 --><ul><li>Docker –– Learn By Example<ul><li>run apps in a container (interactive, daemonized)</li><li>working with containers</li><li>Create your own images<ul><li>Updating and committing an image</li><li>Building an image from a Dockerfile</li></ul></li><li>network containers</li><li>manage data in containers</li><li>store images on Docker Hub</li></ul></li></ul><!-- /TOC --><h2 id="run-apps-in-a-container-interactive-daemonized"><a href="#run-apps-in-a-container-interactive-daemonized" class="headerlink" title="run apps in a container (interactive, daemonized)"></a>run apps in a container (interactive, daemonized)</h2><ul><li>run “hello frankg”</li><li>run interactive shell</li><li>run daemonized app</li><li>show logs</li><li>stop container</li><li>remove container</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// run &quot;hello frankg&quot; in a container</span><br><span class="line">docker run ubuntu /bin/echo &quot;hello frankg&quot;</span><br><span class="line">  hello frankg</span><br><span class="line"></span><br><span class="line">// run an interactive container</span><br><span class="line">docker -it ubuntu bash</span><br><span class="line">  docker run -it ubuntu bash</span><br><span class="line">  root@304485fae978:/# exit</span><br><span class="line"></span><br><span class="line">// run daemonized &quot;hello frankg&quot;</span><br><span class="line">docker run -d ubuntu /bin/sh -c  &quot;while true; do echo hello frankg; sleep 2; done&quot;</span><br><span class="line"></span><br><span class="line">// show container logs</span><br><span class="line">docker logs -f 939fc7a0ebf7070</span><br><span class="line">hello frankg</span><br><span class="line">hello frankg</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">// stop container</span><br><span class="line">docker stop 939fc7a0ebf7070</span><br><span class="line"></span><br><span class="line">// remove container</span><br><span class="line">docker rm 939fc7a0ebf7070</span><br></pre></td></tr></table></figure><h2 id="working-with-containers"><a href="#working-with-containers" class="headerlink" title="working with containers"></a>working with containers</h2><ul><li>show docker client/server versions</li><li>use docker help</li><li>run nginx with name web</li><li>get ports</li><li>get logs</li><li>get processes</li><li>inspect container</li><li>inspect range in container</li><li>stop container</li><li>restart container</li><li>remove container</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// use docker client</span><br><span class="line">docker version</span><br><span class="line">  Client:</span><br><span class="line">   Version:      1.12.1</span><br><span class="line">   [...]</span><br><span class="line">  Server:</span><br><span class="line">   Version:      1.12.1</span><br><span class="line">   [...]</span><br><span class="line"></span><br><span class="line">// use docker help</span><br><span class="line">docker --help</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">// run a web app</span><br><span class="line">docker run -d -P --name web nginx</span><br><span class="line"></span><br><span class="line">// get container ports</span><br><span class="line">docker port web</span><br><span class="line">  443/tcp -&gt; 0.0.0.0:32776</span><br><span class="line">  80/tcp -&gt; 0.0.0.0:32777</span><br><span class="line"></span><br><span class="line">// tail logs</span><br><span class="line">docker logs -f web</span><br><span class="line"></span><br><span class="line">// get container processes</span><br><span class="line">docker top web</span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">// inspect container</span><br><span class="line">docker inspect web</span><br><span class="line">  [...json...]</span><br><span class="line"></span><br><span class="line">// inspect range</span><br><span class="line">docker inspect -f &apos;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&apos; web</span><br><span class="line">  172.17.0.3</span><br><span class="line"></span><br><span class="line">// stop container</span><br><span class="line">docker stop web</span><br><span class="line"></span><br><span class="line">// restart container</span><br><span class="line">docker restart web</span><br><span class="line"></span><br><span class="line">// remove container</span><br><span class="line">docker rm web</span><br></pre></td></tr></table></figure><h2 id="Create-your-own-images"><a href="#Create-your-own-images" class="headerlink" title="Create your own images"></a>Create your own images</h2><h3 id="Updating-and-committing-an-image"><a href="#Updating-and-committing-an-image" class="headerlink" title="Updating and committing an image"></a>Updating and committing an image</h3><p>Goal: clone nginx image and edit it to show new html page</p><ul><li>list images on host</li><li>find image</li><li>get new nginx image</li><li>tag nginx image to clone it</li><li>run bash interactively</li><li>edit html page and exit</li><li>collect container id</li><li>collect nginx cmd</li><li>commit to new image</li><li>note new image id</li><li>test new image to see change</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// list images on host</span><br><span class="line">docker images</span><br><span class="line">  [...]</span><br><span class="line"></span><br><span class="line">// find image</span><br><span class="line">docker search nginx</span><br><span class="line"></span><br><span class="line">// get a new image</span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// tag image to clone it and preserve the original</span><br><span class="line"></span><br><span class="line">    docker tag nginx frankg/nginx:v2</span><br><span class="line"></span><br><span class="line">// open terminal to container:</span><br><span class="line"></span><br><span class="line">    docker run -it frankg/nginx:v2 bash</span><br><span class="line"></span><br><span class="line">// edit index.html file and exit</span><br><span class="line"></span><br><span class="line">    sed -i -e &apos;s/using nginx\./using nginx!!!/&apos; /usr/share/nginx/html/index.html</span><br><span class="line">    exit</span><br><span class="line"></span><br><span class="line">// note the container id</span><br><span class="line"></span><br><span class="line">    docker ps -a</span><br><span class="line">      CONTAINER_ID  ...</span><br><span class="line">      c56ba35f9441  ...</span><br><span class="line"></span><br><span class="line">// note the command used for nginx</span><br><span class="line"></span><br><span class="line">      docker inspect nginx</span><br><span class="line">        [...]</span><br><span class="line">        &quot;Cmd&quot;: [</span><br><span class="line">            &quot;nginx&quot;,</span><br><span class="line">            &quot;-g&quot;,</span><br><span class="line">            &quot;daemon off;&quot;</span><br><span class="line">        ],</span><br><span class="line">        [...]</span><br><span class="line"></span><br><span class="line">// commit to new image</span><br><span class="line"></span><br><span class="line">    docker commit \</span><br><span class="line">    --change=&apos;CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]&apos; \</span><br><span class="line">    -m &quot;change splash page&quot; \</span><br><span class="line">    -a &quot;Frank Gutierrez&quot; \</span><br><span class="line">    c56ba35f9441 frankg/nginx:v2</span><br><span class="line"></span><br><span class="line">// note new image has a different IMAGE_ID</span><br><span class="line"></span><br><span class="line">    docker images</span><br><span class="line">      REPO              IMAGE_ID</span><br><span class="line">      frankg/nginx:v2   9c29fe606e58</span><br><span class="line">      nginx:latest      05a60462f8ba</span><br><span class="line"></span><br><span class="line">// test new image</span><br><span class="line"></span><br><span class="line">    docker run -d --name web -p 5000:80 frankg/nginx:v2</span><br><span class="line">    curl localhost:5000</span><br><span class="line">      &lt;p&gt;&lt;em&gt;Thank you for using nginx!!!&lt;/em&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="Building-an-image-from-a-Dockerfile"><a href="#Building-an-image-from-a-Dockerfile" class="headerlink" title="Building an image from a Dockerfile"></a>Building an image from a Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// goto project directory</span><br><span class="line"></span><br><span class="line">    mkdir sinatra</span><br><span class="line">    cd sinatra</span><br><span class="line"></span><br><span class="line">// create Dockerfile</span><br><span class="line"></span><br><span class="line">    # This is a comment</span><br><span class="line">    FROM ubuntu:14.04</span><br><span class="line">    MAINTAINER Kate Smith &lt;ksmith@example.com&gt;</span><br><span class="line">    RUN apt-get update &amp;&amp; apt-get install -y ruby ruby-dev</span><br><span class="line">    RUN gem install sinatra</span><br><span class="line"></span><br><span class="line">// build image</span><br><span class="line"></span><br><span class="line">    docker build -t frankg/sinatra:v2 .</span><br><span class="line"></span><br><span class="line">// create tags</span><br><span class="line"></span><br><span class="line">    docker tag 80ace061969c frankg/sinatra:devel</span><br><span class="line">    docker tag 80ace061969c frankg/sinatra:latest</span><br><span class="line"></span><br><span class="line">// show digests</span><br><span class="line"></span><br><span class="line">    docker images --digests</span><br><span class="line">        DIGEST</span><br><span class="line">        &lt;none&gt;   // you see &lt;none&gt; because of a docker bug - to be fixed</span><br><span class="line">        sha256:dac37bad0c870a81605abf3f652ebd713fd4c4e33448362ae61f34369ac81412</span><br><span class="line"></span><br><span class="line">// push to docker hub</span><br><span class="line"></span><br><span class="line">    docker push frankg/sinatra</span><br><span class="line"></span><br><span class="line">// remove image</span><br><span class="line"></span><br><span class="line">    docker rmi -f frankg/sinatra</span><br></pre></td></tr></table></figure><h2 id="network-containers"><a href="#network-containers" class="headerlink" title="network containers"></a>network containers</h2><ul><li>list networks</li><li>launch container on default network</li><li>inspect default bridge network</li><li>inspect container’s networks section</li><li>inspect container’s IPAddress section</li><li>stop and remove container</li><li>create your own bridge network</li><li>add container to your network</li><li>inspect container’s networks section</li><li>inspect container’s IPAddress section</li><li>disconnect container from your network</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">// list networks</span><br><span class="line"></span><br><span class="line">    docker network ls</span><br><span class="line"></span><br><span class="line">      NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">      6dc32a4596cb        bridge              bridge              local</span><br><span class="line">      cf9fd2482051        host                host                local</span><br><span class="line">      847fc736b59b        none                null                local</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// launch a container on the default network</span><br><span class="line"></span><br><span class="line">    docker run -d --name web nginx</span><br><span class="line"></span><br><span class="line">// inspect default bridge network</span><br><span class="line"></span><br><span class="line">    docker network inspect bridge</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      &quot;Containers&quot;: &#123;</span><br><span class="line">        [...]</span><br><span class="line">        &quot;e979b69c6ac4c177628582c84a796507cd716f3fd2eed825d06051fb43bc3865&quot;: &#123;</span><br><span class="line">            &quot;Name&quot;: &quot;web&quot;,</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// inspect networks section</span><br><span class="line"></span><br><span class="line">    docker inspect --format=&apos;&#123;&#123;json .NetworkSettings.Networks&#125;&#125;&apos; web</span><br><span class="line"></span><br><span class="line">      [...]</span><br><span class="line">      &quot;Containers&quot;: &#123;</span><br><span class="line">        [...]</span><br><span class="line">        &quot;e979b69c6ac4c177628582c84a796507cd716f3fd2eed825d06051fb43bc3865&quot;: &#123;</span><br><span class="line">            &quot;Name&quot;: &quot;web&quot;,</span><br><span class="line">      [...]</span><br><span class="line"></span><br><span class="line">// inspect IPAddress section</span><br><span class="line"></span><br><span class="line">    docker inspect --format=&apos;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&apos; web</span><br><span class="line"></span><br><span class="line">      172.17.0.3</span><br><span class="line"></span><br><span class="line">// stop and remove container</span><br><span class="line"></span><br><span class="line">    docker stop web ; docker rm web</span><br><span class="line"></span><br><span class="line">// create your own bridge network</span><br><span class="line"></span><br><span class="line">    docker network create -d bridge my-bridge-network</span><br><span class="line"></span><br><span class="line">// add containers to your network</span><br><span class="line"></span><br><span class="line">    docker run -d -p 5000:80 --network=my-bridge-network --name=web nginx</span><br><span class="line"></span><br><span class="line">// inspect networks section</span><br><span class="line"></span><br><span class="line">    docker inspect --format=&apos;&#123;&#123;json .NetworkSettings.Networks&#125;&#125;&apos;  web</span><br><span class="line"></span><br><span class="line">      &#123;&quot;my-bridge-network&quot;:...</span><br><span class="line"></span><br><span class="line">// inspect IPAddress section</span><br><span class="line"></span><br><span class="line">    docker inspect --format=&apos;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&apos; web</span><br><span class="line"></span><br><span class="line">      172.18.0.2</span><br><span class="line"></span><br><span class="line">// disconnect container from network</span><br><span class="line"></span><br><span class="line">    docker network disconnect my-bridge-network web</span><br></pre></td></tr></table></figure><h2 id="manage-data-in-containers"><a href="#manage-data-in-containers" class="headerlink" title="manage data in containers"></a>manage data in containers</h2><p>Learn how you can manage data inside and between your Docker containers.</p><p>You’re going to look at the two primary ways you can manage data with Docker Engine.</p><ul><li>Data volumes</li><li>Data volume containers</li></ul><h3 id="Data-volumes"><a href="#Data-volumes" class="headerlink" title="Data volumes"></a>Data volumes</h3><p>A data volume is a specially-designated directory within one or more containers that bypasses the Union File System.</p><blockquote><p>Note: The host directory is, by its nature, host-dependent. For this reason, you can’t mount a host directory from Dockerfile because built images should be portable. A host directory wouldn’t be available on all potential hosts.</p></blockquote><ul><li>add a data volume</li><li>locate a volume</li><li>mount a host directory as a data volume</li><li>mount a shared-storage volume as a data volume</li><li>create a volume</li><li>volume labels</li><li>mount a host file as a data volume</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// add a data volume</span><br><span class="line"></span><br><span class="line">  docker run -d --name web -v /webapp nginx</span><br><span class="line"></span><br><span class="line">// locate a volume</span><br><span class="line"></span><br><span class="line">  docker inspect web</span><br><span class="line"></span><br><span class="line">    [...]</span><br><span class="line">    &quot;Mounts&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Name&quot;: &quot;fac362...80535&quot;,</span><br><span class="line">            &quot;Source&quot;: &quot;/var/lib/docker/volumes/fac362...80535/_data&quot;,</span><br><span class="line">            &quot;Destination&quot;: &quot;/webapp&quot;,</span><br><span class="line">            &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">            &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;RW&quot;: true,</span><br><span class="line">            &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    [...]</span><br><span class="line"></span><br><span class="line">// mount a host directory as a data volume</span><br><span class="line"></span><br><span class="line">  docker run -d --name web -v /src/webapp:/webapp nginx</span><br><span class="line"></span><br><span class="line">// mount a shared-storage volume as a data volume</span><br><span class="line"></span><br><span class="line">  docker run -d --name web --volume-driver=nfs -v my-volume:/webapp nginx</span><br><span class="line"></span><br><span class="line">// create a volume</span><br><span class="line"></span><br><span class="line">  docker volume create -d nfs -o size=20GB my-volume</span><br><span class="line"></span><br><span class="line">// volume labels</span><br><span class="line"></span><br><span class="line">  To change a label in the container context, you can add either of two</span><br><span class="line">  suffixes :z or :Z to the volume mount. These suffixes tell Docker to relabel</span><br><span class="line">  file objects on the shared volumes. The z option tells Docker that two</span><br><span class="line">  containers share the volume content. As a result, Docker labels the content</span><br><span class="line">  with a shared content label. Shared volume labels allow all containers to</span><br><span class="line">  read/write content. The Z option tells Docker to label the content with a</span><br><span class="line">  private unshared label. Only the current container can use a private volume.</span><br><span class="line"></span><br><span class="line">// mount a host file as a data volume</span><br><span class="line"></span><br><span class="line">  docker run --rm -it -v ~/.bash_history:/root/.bash_history ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h3 id="Data-volume-containers"><a href="#Data-volume-containers" class="headerlink" title="Data volume containers"></a>Data volume containers</h3><p>If you have some persistent data that you want to share between containers, or want to use from non-persistent containers, it’s best to create a named Data Volume Container, and then to mount the data from it.</p><ul><li>create a data volume container</li><li>mount the data volume in another container</li><li>mount the data volume in another container again</li><li>find and remove dangling volumes</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// create a data volume container</span><br><span class="line"></span><br><span class="line">  docker create -v /dbdata --name dbstore training/postgres /bin/true</span><br><span class="line"></span><br><span class="line">    # shares /dbdata from the container named dbstore</span><br><span class="line"></span><br><span class="line">// mount the data volume in another container</span><br><span class="line"></span><br><span class="line">  docker run -d --volumes-from dbstore --name db1 training/postgres</span><br><span class="line"></span><br><span class="line">// mount the data volume in another container again</span><br><span class="line"></span><br><span class="line">  docker run -d --volumes-from dbstore --name db2 training/postgres</span><br><span class="line"></span><br><span class="line">// find and remove dangling volumes</span><br><span class="line"></span><br><span class="line">  docker volume ls -f dangling=true</span><br><span class="line"></span><br><span class="line">  docker volume rm &lt;volume name&gt;</span><br><span class="line"></span><br><span class="line">  Note: Docker will not warn you when removing a container without providing</span><br><span class="line">  the -v option to delete its volumes. If you remove containers without</span><br><span class="line">  using the -v option, you may end up with “dangling” volumes; volumes that</span><br><span class="line">  are no longer referenced by a container.</span><br></pre></td></tr></table></figure><h3 id="Backup-restore-or-migrate-data-volumes"><a href="#Backup-restore-or-migrate-data-volumes" class="headerlink" title="Backup, restore, or migrate data volumes"></a>Backup, restore, or migrate data volumes</h3><ul><li>backup data volume</li><li>restore or migrate</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// backup data volume</span><br><span class="line"></span><br><span class="line">  docker run --rm \</span><br><span class="line">    --volumes-from dbstore -v $(pwd):/backup \</span><br><span class="line">    ubuntu tar cvf /backup/backup.tar /dbdata</span><br><span class="line"></span><br><span class="line">// restore or migrate</span><br><span class="line"></span><br><span class="line">  # step1: create new container</span><br><span class="line"></span><br><span class="line">    docker run -v /dbdata --name dbstore2 ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">  # step2: restore data</span><br><span class="line"></span><br><span class="line">    docker run --rm \</span><br><span class="line">    --volumes-from dbstore2 -v $(pwd):/backup \</span><br><span class="line">    ubuntu bash -c &quot;cd /dbdata &amp;&amp; tar xvf /backup/backup.tar --strip 1&quot;</span><br></pre></td></tr></table></figure><h3 id="Removing-anonymous-volumes"><a href="#Removing-anonymous-volumes" class="headerlink" title="Removing anonymous volumes"></a>Removing anonymous volumes</h3><ul><li>remove anonymous volumes</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// remove anonymous volume</span><br><span class="line"></span><br><span class="line">  docker run --rm -v /foo -v awesome:/bar busybox top</span><br><span class="line"></span><br><span class="line">    When the container is deleted, the --rm option instructs the Docker</span><br><span class="line">    Engine daemon to clean up anonymous volumes, and remove the container.</span><br><span class="line"></span><br><span class="line">    This command creates an anonymous /foo volume. When the container is</span><br><span class="line">    removed, the Docker Engine removes the /foo volume but not the awesome</span><br><span class="line">    volume.</span><br></pre></td></tr></table></figure><h3 id="Important-tips-on-using-shared-volumes"><a href="#Important-tips-on-using-shared-volumes" class="headerlink" title="Important tips on using shared volumes"></a>Important tips on using shared volumes</h3><p>Multiple containers can also share one or more data volumes. However, multiple containers writing to a single shared volume can cause data corruption. Make sure your applications are designed to write to shared data stores.</p><p>Data volumes are directly accessible from the Docker host. This means you can read and write to them with normal Linux tools. In most cases you should not do this as it can cause data corruption if your containers and applications are unaware of your direct access.</p><h2 id="store-images-on-Docker-Hub"><a href="#store-images-on-Docker-Hub" class="headerlink" title="store images on Docker Hub"></a>store images on Docker Hub</h2><p>Docker itself provides access to Docker Hub services via the docker search, pull, login, and push commands.</p><p>Anyone can pull public images from the Docker Hub registry, but if you would like to share your own images, then you must register first.</p><ul><li>login to docker hub</li><li>search for images</li><li>pull image</li><li>pushing a repository to Docker Hub</li><li>features of Docker Hub</li><li>setup automated build</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// register at docker hub</span><br><span class="line"></span><br><span class="line">  https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">// login to docker hub</span><br><span class="line"></span><br><span class="line">  docker login</span><br><span class="line"></span><br><span class="line">    # credentials stored at: $HOME/.docker/config.json</span><br><span class="line"></span><br><span class="line">// search for images</span><br><span class="line"></span><br><span class="line">  docker search centos</span><br><span class="line"></span><br><span class="line">    NAME                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">    centos                          The official build of CentOS.                   2829      [OK]</span><br><span class="line">    [...]</span><br><span class="line"></span><br><span class="line">// pull image</span><br><span class="line"></span><br><span class="line">  docker pull centos</span><br><span class="line"></span><br><span class="line">  docker pull centos:centos5</span><br><span class="line"></span><br><span class="line">// pushing a repository to Docker Hub</span><br><span class="line"></span><br><span class="line">  docker push yourname/newimage</span><br><span class="line"></span><br><span class="line">// features of Docker Hub</span><br><span class="line"></span><br><span class="line">  - Private repositories: private repositories</span><br><span class="line">  - Organizations and teams: Docker Hub lets you create organizations</span><br><span class="line">  - Automated Builds: automate the building and updating of images from GitHub or Bitbucket.  Trigger builds via a URL on Docker Hub.</span><br><span class="line">  - Webhooks: trigger an event when an image or updated image is pushed to the repository</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// setup automated build</span><br><span class="line"></span><br><span class="line">1. Create a Docker Hub account and login.</span><br><span class="line">2. Link your GitHub or Bitbucket account on the “Linked Accounts &amp; Services” page.</span><br><span class="line">3. Select “Create Automated Build” from the “Create” dropdown menu</span><br><span class="line">4. Pick a GitHub or Bitbucket project that has a Dockerfile that you want to build.</span><br><span class="line">5. Pick the branch you want to build (the default is the master branch).</span><br><span class="line">6. Give the Automated Build a name.</span><br><span class="line">7. Assign an optional Docker tag to the Build.</span><br><span class="line">8. Specify where the Dockerfile is located. The default is /.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker – Getting Started</title>
      <link href="/2016/11/05/20161105-docker-getting-started/"/>
      <url>/2016/11/05/20161105-docker-getting-started/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-––-Getting-Started"><a href="#Docker-––-Getting-Started" class="headerlink" title="Docker –– Getting Started"></a>Docker –– Getting Started</h1><!-- TOC depthFrom:1 depthTo:2 withLinks:0 updateOnSave:1 orderedList:0 --><ul><li>Docker –– Getting Started<ul><li>run hello-world from image</li><li>see images and containers</li><li>find and run whalesay image</li><li>build your own image</li><li>create a docker-hub account</li><li>tag, push and pull your image</li></ul></li></ul><!-- /TOC --><h2 id="run-hello-world-from-image"><a href="#run-hello-world-from-image" class="headerlink" title="run hello-world from image"></a>run hello-world from image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br></pre></td></tr></table></figure><h2 id="see-images-and-containers"><a href="#see-images-and-containers" class="headerlink" title="see images and containers"></a>see images and containers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// see images</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">// see containers</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h2 id="find-and-run-whalesay-image"><a href="#find-and-run-whalesay-image" class="headerlink" title="find and run whalesay image"></a>find and run whalesay image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker run docker/whalesay cowsay boo</span><br><span class="line">Unable to find image &apos;docker/whalesay:latest&apos; locally</span><br><span class="line">latest: Pulling from docker/whalesay</span><br><span class="line"></span><br><span class="line">e190868d63f8: Already exists</span><br><span class="line">909cd34c6fd7: Already exists</span><br><span class="line">0b9bfabab7c1: Already exists</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">00bf65475aba: Pull complete</span><br><span class="line">c57b6bcc83e3: Pull complete</span><br><span class="line">8978f6879e2f: Pull complete</span><br><span class="line">8eed3712d2cf: Pull complete</span><br><span class="line">Digest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b</span><br><span class="line">Status: Downloaded newer image for docker/whalesay:latest</span><br><span class="line"> _____</span><br><span class="line">&lt; boo &gt;</span><br><span class="line"> -----</span><br><span class="line">    \</span><br><span class="line">     \</span><br><span class="line">      \</span><br><span class="line">                    ##        .</span><br><span class="line">              ## ## ##       ==</span><br><span class="line">           ## ## ## ##      ===</span><br><span class="line">       /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===</span><br><span class="line">  ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~</span><br><span class="line">       \______ o          __/</span><br><span class="line">        \    \        __/</span><br><span class="line">          \____\______/</span><br></pre></td></tr></table></figure><h2 id="build-your-own-image"><a href="#build-your-own-image" class="headerlink" title="build your own image"></a>build your own image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// create Dockerfile</span><br><span class="line">  FROM docker/whalesay:latest</span><br><span class="line">  RUN apt-get -y update &amp;&amp; apt-get install -y fortunes</span><br><span class="line">  CMD /usr/games/fortune -a | cowsay</span><br><span class="line"></span><br><span class="line">// build image</span><br><span class="line">docker build -t docker-whale .</span><br><span class="line">  Sending build context to Docker daemon 2.048 kB</span><br><span class="line">  [...]</span><br><span class="line">  Successfully built 21d2171cd112</span><br><span class="line"></span><br><span class="line">// see image</span><br><span class="line">docker images</span><br><span class="line">  REPOSITORY                            TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">  docker-whale                          latest              21d2171cd112        About a minute ago   275 MB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// run image</span><br><span class="line">docker run docker-whale</span><br><span class="line"></span><br><span class="line">   ________________________________</span><br><span class="line">  / &quot;Indecision is the basis of    \</span><br><span class="line">  | flexibility&quot;                   |</span><br><span class="line">  |                                |</span><br><span class="line">  | -- button at a Science Fiction |</span><br><span class="line">  \ convention.                    /</span><br><span class="line">   --------------------------------</span><br><span class="line">      \</span><br><span class="line">       \</span><br><span class="line">        \</span><br><span class="line">                      ##        .</span><br><span class="line">                ## ## ##       ==</span><br><span class="line">             ## ## ## ##      ===</span><br><span class="line">         /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===</span><br><span class="line">    ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~</span><br><span class="line">         \______ o          __/</span><br><span class="line">          \    \        __/</span><br><span class="line">            \____\______/</span><br></pre></td></tr></table></figure><h2 id="create-a-docker-hub-account"><a href="#create-a-docker-hub-account" class="headerlink" title="create a docker-hub account"></a>create a docker-hub account</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// docker hub account</span><br><span class="line">frankg/frankg</span><br></pre></td></tr></table></figure><h2 id="tag-push-and-pull-your-image"><a href="#tag-push-and-pull-your-image" class="headerlink" title="tag, push and pull your image"></a>tag, push and pull your image</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// list image</span><br><span class="line">docker images</span><br><span class="line">  REPOSITORY</span><br><span class="line">  docker-whale</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// tag image</span><br><span class="line">tag 21d2171cd112 frankg/docker-whale:latest</span><br><span class="line">  REPOSITORY</span><br><span class="line">  frankg/docker-whale</span><br><span class="line"></span><br><span class="line">// list image</span><br><span class="line">docker images</span><br><span class="line">    REPOSITORY</span><br><span class="line">    frankg/docker-whale</span><br><span class="line"></span><br><span class="line">// push image</span><br><span class="line">docker push frankg/docker-whale</span><br><span class="line"></span><br><span class="line">// remove image</span><br><span class="line">docker rmi -f frankg/docker-whale</span><br><span class="line"></span><br><span class="line">// pull and run image</span><br><span class="line">docker run frankg/docker-whale</span><br><span class="line"></span><br><span class="line">  Unable to find image &apos;frankg/docker-whale:latest&apos;</span><br><span class="line">  [...]</span><br><span class="line">   ________________________________________</span><br><span class="line">  / In the future, you&apos;re going to get     \</span><br><span class="line">  | computers as prizes in breakfast       |</span><br><span class="line">  | cereals. You&apos;ll throw them out because |</span><br><span class="line">  | your house will be littered with them. |</span><br><span class="line">  |                                        |</span><br><span class="line">  \ -- Robert Lucky                        /</span><br><span class="line">   ----------------------------------------</span><br><span class="line">      \</span><br><span class="line">       \</span><br><span class="line">        \</span><br><span class="line">                      ##        .</span><br><span class="line">                ## ## ##       ==</span><br><span class="line">             ## ## ## ##      ===</span><br><span class="line">         /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===</span><br><span class="line">    ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~</span><br><span class="line">         \______ o          __/</span><br><span class="line">          \    \        __/</span><br><span class="line">            \____\______/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Building Node apps with Loopback</title>
      <link href="/2016/09/07/20160910-loopback/"/>
      <url>/2016/09/07/20160910-loopback/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-LoopBack-Framework"><a href="#What-is-LoopBack-Framework" class="headerlink" title="What is LoopBack Framework"></a>What is LoopBack Framework</h2><p>LoopBack is an open source framework from IBM that enables you to quickly compose scalable APIs.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>Open Source and based on Express</li><li>Security (xss, csrf, etc.)</li><li>Connectivity with ORM (mongo, mysql, other-api’s etc)</li><li>REST (Auto-Generate APIs from Data Models)</li><li>Authentication (password and social login)</li><li>Authorization (fine grained ACLs)</li><li>Swagger (web interface for your API)</li></ul><h2 id="Loopback-Documentation-and-Example-Apps"><a href="#Loopback-Documentation-and-Example-Apps" class="headerlink" title="Loopback Documentation and Example Apps"></a>Loopback Documentation and Example Apps</h2><ul><li><a href="https://goo.gl/gUGku6" target="_blank" rel="noopener">Documentation</a></li><li><a href="https://goo.gl/5DtGev" target="_blank" rel="noopener">Example Apps</a></li></ul><table><thead><tr><th style="text-align:left">name</th><th style="text-align:left">descriptions</th></tr></thead><tbody><tr><td style="text-align:left">loopback-getting-started</td><td style="text-align:left">Review app part1</td></tr><tr><td style="text-align:left">loopback-getting-started-intermediate</td><td style="text-align:left">Review app part2</td></tr><tr><td style="text-align:left">loopback-example-database</td><td style="text-align:left">Database related features</td></tr><tr><td style="text-align:left">loopback-example-relations</td><td style="text-align:left">Model relations and filtering via REST</td></tr><tr><td style="text-align:left">loopback-example-app-logic</td><td style="text-align:left">How to add your own logic to a LoopBack app</td></tr><tr><td style="text-align:left">loopback-example-access-control</td><td style="text-align:left">Controlling access to your API endpoints</td></tr></tbody></table><h2 id="App-Building-Processes"><a href="#App-Building-Processes" class="headerlink" title="App Building Processes"></a>App Building Processes</h2><h3 id="loopback-getting-started"><a href="#loopback-getting-started" class="headerlink" title="loopback-getting-started"></a>loopback-getting-started</h3><ul><li>Create a simple API</li><li>Connect your API to a data source</li><li>Extend your API <code>(not covered here)</code></li><li>Add a static web page <code>(not covered here)</code></li><li>Add a custom Express route <code>(not covered here)</code></li><li>Use API Explorer</li></ul><p>See the complete process <a href="https://goo.gl/aDII6X" target="_blank" rel="noopener">here</a></p><pre><code>// loopback-getting-started abbreviated process      // install loopback      npm install -g strongloop      // generate app      slc loopback CoffeeShops      // goto project directory      cd CoffeeShops      // add data source (mongoDB)      slc loopback:datasource      // generate model (CoffeeShop)      slc loopback:model      // create sample data (for CoffeeShop -- see https://goo.gl/2aB4lE)          Create boot script to populate CoffeeShop data      // start the app      node .      // test api explorer      open localhost:3000/explorer      // create, read, update, delete, etc.      // test database      mongodb-client                    // confirm database and data</code></pre><h3 id="loopback-getting-started-intermediate"><a href="#loopback-getting-started-intermediate" class="headerlink" title="loopback-getting-started-intermediate"></a>loopback-getting-started-intermediate</h3><p>Continuing from the previous app we will add:</p><ul><li>Relations between models.</li><li>Remote hooks.</li><li>Using access control lists to protect REST endpoints.</li><li>User registration and authentication</li><li>Using the AngularJS SDK</li></ul><p>See the complete process <a href="https://goo.gl/Ut4QNK" target="_blank" rel="noopener">here</a></p><pre><code>// loopback-getting-started-intermediate abbreviated process      // goto project directory      cd CoffeeShops      // generate multiple models (for Review and Reviewer)      slc loopback:model      // create sample data (for Review and Reviewer -- see https://goo.gl/nVlZ6z)          Update boot script to populate Review and Reviewer data      // define multiple relations      slc loopback:relation          A coffee shop has many reviews; No through model and no foreign key.          A coffee shop has many reviewers; No through model and no foreign key.          A review belongs to a coffee shop; No foreign key.          A review belongs to a reviewer; foreign key is publisherId.          A reviewer has many reviews; foreign key is publisherId.      // define multiple access controls      slc loopback:acl          Deny everyone all endpoints.          Allow everyone to read reviews.          Allow authenticated users to write a review.          Allow the author of a review (its &quot;owner&quot;) to make any changes to it.      // create a remote hook (see https://goo.gl/PR0YJN)          Populate date and publisher before creating a review      // start process manager      slc pm</code></pre><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><table><thead><tr><th style="text-align:left">Command</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">slc loopback</td><td style="text-align:left">Application generator</td></tr><tr><td style="text-align:left">slc loopback:datasource</td><td style="text-align:left">Data source generator</td></tr><tr><td style="text-align:left">slc loopback:model</td><td style="text-align:left">Model generator</td></tr><tr><td style="text-align:left">slc loopback:property</td><td style="text-align:left">Property generator</td></tr><tr><td style="text-align:left">slc loopback:acl</td><td style="text-align:left">ACL generator</td></tr><tr><td style="text-align:left">slc loopback:relation</td><td style="text-align:left">Relation generator</td></tr><tr><td style="text-align:left">slc loopback:remote-method</td><td style="text-align:left">Remote method generator</td></tr><tr><td style="text-align:left">slc loopback:middleware</td><td style="text-align:left">Middleware generator</td></tr><tr><td style="text-align:left">slc loopback:boot-script</td><td style="text-align:left">Boot script generator</td></tr><tr><td style="text-align:left">slc loopback:export-api-def</td><td style="text-align:left">API definition generator</td></tr><tr><td style="text-align:left">slc loopback:swagger</td><td style="text-align:left">Swagger generator</td></tr></tbody></table><blockquote><p>The slc command has many additional sub-commands not specific to LoopBack for building, deploying, and managing Node applications. See Operating Node applications for more information and Command-line reference for the command reference.</p></blockquote><h2 id="NOTES"><a href="#NOTES" class="headerlink" title="NOTES"></a>NOTES</h2><h3 id="StrongLoop-Arc"><a href="#StrongLoop-Arc" class="headerlink" title="StrongLoop Arc"></a>StrongLoop Arc</h3><p>StrongLoop Arc is a graphical tool for building, deploying, and monitoring LoopBack applications.</p><blockquote><p>StrongLoop Arc is being deprecated and replaced watch for more info.</p></blockquote><h3 id="Environment-Specific-Configuration"><a href="#Environment-Specific-Configuration" class="headerlink" title="Environment Specific Configuration"></a>Environment Specific Configuration</h3><p>See <a href="https://goo.gl/9mE5Kt" target="_blank" rel="noopener">Environment Specific Configuration</a> for:</p><ul><li>configuration files</li><li>Application-wide configuration</li><li>Turning off stack traces</li><li>Disabling API Explorer</li><li>Customizing REST error handling</li><li>Exclude stack traces from HTTP responses</li><li>Data source configuration</li><li>Getting values from environment variables</li></ul><h3 id="Versioning-your-API"><a href="#Versioning-your-API" class="headerlink" title="Versioning your API"></a>Versioning your API</h3><p>You can easily add versioning to your REST API routes, based on the application “major” version in package.json.  See <a href="https://goo.gl/LSI8GG" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Free HTTPS</title>
      <link href="/2016/09/06/20160906-lets-encrypt/"/>
      <url>/2016/09/06/20160906-lets-encrypt/</url>
      
        <content type="html"><![CDATA[<p>Until recently you had to pay a stack of money to get a certificate that allowed you to use HTTPS on your server. That has changed due to the lets-encrypt project which let’s you generate certificates that are good for 6 months and can be renewed automatically.</p><p>Here is what we’ll cover in this post:</p><ul><li>procuring a domain name</li><li>install/configure nginx test site</li><li>generate certificates</li><li>reconfigure test site</li><li>configure for the internet</li></ul><h2 id="Procuring-a-domain-name"><a href="#Procuring-a-domain-name" class="headerlink" title="Procuring a domain name"></a>Procuring a domain name</h2><p>I used GoDaddy if it’s your first domain name it will cost less than \$4 otherwise it will cost less than \$13.</p><p>I purchased <code>debugtime.com</code></p><h2 id="Install-Configure-Nginx-test-site"><a href="#Install-Configure-Nginx-test-site" class="headerlink" title="Install/Configure Nginx test site"></a>Install/Configure Nginx test site</h2><p>Install Nginx</p><pre><code>brew doctor                     // check brewbrew update                     // update brewbrew install nginx              // install nginxbrew services start nginx       // configure boot on startup</code></pre><p>Prepare Site directory/files</p><pre><code>mkdir /var/www/hellocd /var/www/hellosudo echo &apos;hello&apos; &gt; index.html</code></pre><p>add file <code>/usr/local/etc/nginx/servers/hello.conf</code></p><pre><code>server {  listen 80;  listen [::]:80;  root /var/www/hello;  index index.html;  server_name debugtime.com;  location / {    try_files $uri $uri/ =404;  }}</code></pre><p>test nginx:</p><pre><code>brew services restart nginx     // restart nginxcurl localhost                  // outputs hello</code></pre><h2 id="Generate-certificates"><a href="#Generate-certificates" class="headerlink" title="Generate certificates"></a>Generate certificates</h2><p>generate certificates</p><pre><code>// clone certbotgit clone https://github.com/certbot/certbot.git// run certbot-autocd cd certbotsudo ./certbot-auto certonly --webroot -w /var/www/hello -d debugtime.com --debug// watch for cert directory/etc/letsencrypt/live/debugtime.com/</code></pre><h2 id="Reconfigure-test-site"><a href="#Reconfigure-test-site" class="headerlink" title="Reconfigure test site"></a>Reconfigure test site</h2><p>replace file: <code>/usr/local/etc/nginx/servers/hello.conf</code></p><pre><code>server {  listen 443;  listen [::]:443;  root /var/www/hello;  index index.html;  server_name debugtime.com;  location / {    try_files $uri $uri/ =404;  }  ssl on;  ssl_session_cache shared:SSL:50m;  ssl_certificate         /etc/letsencrypt/live/debugtime.com/fullchain.pem;  ssl_certificate_key     /etc/letsencrypt/live/debugtime.com/privkey.pem;  ssl_client_certificate  /etc/letsencrypt/live/debugtime.com/fullchain.pem;  ssl_session_timeout 5m;}server {  # Redirect www to non-www  listen 443;  listen [::]:443;  server_name www.debugtime.com;  return https://debugtime.com$request_uri;}server {  # Redirect all calls to HTTP (port 80) to HTTPS  listen 80;  listen [::]:80;  server_name www.debugtime.com debugtime.com;  return https://debugtime.com$request_uri;}</code></pre><p>restart nginx</p><pre><code>// restart nginx// sudo required because it&apos;s port 80sudo brew services restart nginx</code></pre><p>test localhost</p><pre><code>curl -iL localhostHTTP/1.1 302 Moved TemporarilyServer: nginx/1.10.1Date: Tue, 06 Sep 2016 19:15:04 GMTContent-Type: text/htmlContent-Length: 161Connection: keep-aliveLocation: https://debugtime.com/HTTP/1.1 200 OKServer: nginx/1.10.1Date: Tue, 06 Sep 2016 19:15:05 GMTContent-Type: text/htmlContent-Length: 6Last-Modified: Tue, 06 Sep 2016 19:09:58 GMTConnection: keep-aliveETag: &quot;57cf1486-6&quot;Accept-Ranges: byteshello</code></pre><h2 id="Configure-for-the-internet"><a href="#Configure-for-the-internet" class="headerlink" title="Configure for the internet"></a>Configure for the internet</h2><p>configure domain</p><pre><code>// point domain to your home&apos;s IP address75.51.152.192</code></pre><p>configure router</p><pre><code>// configure virtual server// allow port 80 and 443 to go to your server80 &amp; 443 =&gt; 192.168.2.5</code></pre><p>test server</p><pre><code>// test with curl// should change http to https// should drop www prefixcurl -iL localhostcurl -iL http://www.debugtime.comcurl -iL http://debugtime.comcurl -iL https://www.debugtime.com// test in browser should show lock with https</code></pre><p><img src="/images/free-https/browser.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Using Oauth2</title>
      <link href="/2016/08/18/20160828-Using-Oauth2/"/>
      <url>/2016/08/18/20160828-Using-Oauth2/</url>
      
        <content type="html"><![CDATA[<h2 id="Auth-Examples"><a href="#Auth-Examples" class="headerlink" title="Auth Examples"></a>Auth Examples</h2><ol><li><p><a href="https://goo.gl/lm5PfF" target="_blank" rel="noopener">Login with password/social for react-native</a> (Auth0)</p></li><li><p><a href="https://goo.gl/XVqf72" target="_blank" rel="noopener">Login with password/social for react</a> (Auth0)</p></li><li><p><a href="https://goo.gl/lm5PfF" target="_blank" rel="noopener">Login with password for react, you manage accounts</a> (Auth0)</p></li><li><p><a href="https://goo.gl/MuUE0w" target="_blank" rel="noopener">Secure and authenticate users to your API</a> (Stormpath)</p></li></ol><h2 id="Mobile-Client"><a href="#Mobile-Client" class="headerlink" title="Mobile Client"></a>Mobile Client</h2><pre><code>// BUILD APPreact-native init cartcd cartnpm inpm install --save react-native-lockreact-native link react-native-lock// START SERVERreact-native start// START APPreact-native run-ios</code></pre><h2 id="Web-Client"><a href="#Web-Client" class="headerlink" title="Web Client"></a>Web Client</h2><pre><code>// START DEVELOPMENTnpm start// START PRODUCTIONnpm run buildhttp-server -p 3000 dist</code></pre><h2 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h2><pre><code>// START SERVER IN DEV MODEnodemon server// START SERVER IN PRODUCTIONnode server// TEST SERVERcurl localhost:8080/hello/dude&quot;hello dude&quot;// TEST PROTECTED ROUTEexport TOKEN=55curl localhost:8080/protected   --header &quot;authorization: Bearer $TOKEN&quot;{&quot;code&quot;:&quot;InvalidCredentials&quot;,&quot;message&quot;:&quot;&quot;}// TEST PROTECTED ROUTEexport TOKEN=&quot;eyJ0eXAiOiJKV1...&quot;curl localhost:8080/protected   --header &quot;authorization: Bearer $TOKEN&quot;&quot;the secret is: apple pie&quot;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> authorization </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Frisby&#39;s Mostly Adequate Guide to Functional Programming - Part 2</title>
      <link href="/2016/08/10/20160831-guide-to-FP-part2/"/>
      <url>/2016/08/10/20160831-guide-to-FP-part2/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:3 withLinks:1 updateOnSave:1 orderedList:0 --><ul><li><a href="#introduction">Introduction</a></li><li><a href="#functors">Functors</a><ul><li><a href="#the-mighty-container">The Mighty Container</a></li><li><a href="#your-first-functor">Your First Functor</a></li><li><a href="#schr%C3%B6dingers-maybe">Schrödinger’s Maybe</a></li><li><a href="#maintaining-our-pointfree-style">maintaining our pointfree style</a></li><li><a href="#use-cases">Use Cases</a></li><li><a href="#releasing-the-value">Releasing the value</a></li><li><a href="#pure-error-handling">Pure Error Handling</a></li><li><a href="#lifting">Lifting</a></li><li><a href="#side-effects">side-effects</a></li><li><a href="#asynchronous-tasks">Asynchronous Tasks</a></li></ul></li></ul><!-- /TOC --><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is Part 2 of a series on Functional Programming. See <a href="">Part 1</a></p><h2 id="Functors"><a href="#Functors" class="headerlink" title="Functors"></a>Functors</h2><p>To handle <code>control flow</code>, <code>error handling</code>, <code>asynchronous actions</code>, <code>state</code> and <code>effects</code>, we will discover the foundation upon which all of these helpful abstractions are built.</p><h3 id="The-Mighty-Container"><a href="#The-Mighty-Container" class="headerlink" title="The Mighty Container"></a>The Mighty Container</h3><ul><li>Container is an object with one property.</li><li>The <code>__value</code> cannot be one specific type.</li><li>Once data goes into the Container it stays there.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Container = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.__value = x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Container.of = <span class="function"><span class="params">x</span> =&gt;</span> <span class="keyword">new</span> Container(x);</span><br><span class="line"></span><br><span class="line">Container.of(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//=&gt; Container(3)</span></span><br></pre></td></tr></table></figure><h3 id="Your-First-Functor"><a href="#Your-First-Functor" class="headerlink" title="Your First Functor"></a>Your First Functor</h3><ul><li>We run functions on the data using a <code>map</code> method.</li></ul><blockquote><p>A Functor is a type that implements map and obeys some laws</p></blockquote><p>What we gain from asking our container to apply functions for us is, <code>abstraction of function application</code>. When we map a function, we ask the container type to run it for us.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (a -&gt; b) -&gt; Container a -&gt; Container b</span></span><br><span class="line">Container.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Container.of(f(<span class="keyword">this</span>.__value));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Container.of(<span class="string">"flamethrowers"</span>).map(<span class="function"><span class="params">s</span> =&gt;</span> s.toUpperCase());</span><br><span class="line"><span class="comment">//=&gt; Container("FLAMETHROWERS")</span></span><br></pre></td></tr></table></figure><p>Functors come from category theory and we’ll look at the maths in detail toward the end of the chapter.</p><h3 id="Schrodinger’s-Maybe"><a href="#Schrodinger’s-Maybe" class="headerlink" title="Schrödinger’s Maybe"></a>Schrödinger’s Maybe</h3><p>The <code>Maybe</code> functor checks to see if it has a value before calling the supplied function. This has the effect of side stepping those pesky nulls as we map (Note that this implementation is simplified for teaching).</p><figure class="highlight js"><figcaption><span>define and apply Maybe</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Maybe = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">this</span>.__value = x &#125;</span><br><span class="line"></span><br><span class="line">Maybe.of = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) =&gt; <span class="title">new</span> <span class="title">Maybe</span>(<span class="params">x</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Maybe</span>.<span class="title">prototype</span>.<span class="title">isNothing</span> = <span class="title">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.__value === <span class="literal">null</span> || <span class="keyword">this</span>.__value === <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Maybe.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.isNothing() ? Maybe.of(<span class="literal">null</span>) : Maybe.of(f(<span class="keyword">this</span>.__value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Maybe.of(&#123; <span class="attr">name</span>: <span class="string">'Boris'</span> &#125;).map(_.prop(<span class="string">'age'</span>)).map(add(<span class="number">10</span>))</span><br><span class="line"><span class="comment">//=&gt; Maybe(null)</span></span><br><span class="line"></span><br><span class="line">Maybe.of(&#123; <span class="attr">name</span>: <span class="string">'Dinah'</span>, <span class="attr">age</span>: <span class="number">14</span>, &#125;).map(_.prop(<span class="string">'age'</span>)).map(add(<span class="number">10</span>))</span><br><span class="line"><span class="comment">//=&gt; Maybe(24)</span></span><br></pre></td></tr></table></figure><h3 id="maintaining-our-pointfree-style"><a href="#maintaining-our-pointfree-style" class="headerlink" title="maintaining our pointfree style"></a>maintaining our pointfree style</h3><p>This dot syntax is perfectly fine and functional, but we’d like to maintain our pointfree style. This <code>map</code> function is fully equipped to delegate to whatever functor it receives:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</span></span><br><span class="line"><span class="keyword">var</span> map = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, any_functor_at_all</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> any_functor_at_all.map(f);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This way we can carry on with composition per usual and map will work as expected. This is the case with <code>ramda</code>‘s map as well. We’ll use dot notation when it’s instructive and the pointfree version when it’s convenient. I’ve introduced extra notation into our type signature. In the signature, the <code>Functor f =&gt;</code> tells us that <code>f</code> must be a Functor.</p><h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><p><code>Maybe</code> can be used in functions that might otherwise fail to return a result.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  safeHead :: [a] -&gt; Maybe(a)</span></span><br><span class="line"><span class="keyword">var</span> safeHead = <span class="function"><span class="params">xs</span> =&gt;</span> Maybe.of(xs[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> streetName = compose(</span><br><span class="line">  map(_.prop(<span class="string">"street"</span>)),</span><br><span class="line">  safeHead,</span><br><span class="line">  _.prop(<span class="string">"addresses"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">streetName(&#123; <span class="attr">addresses</span>: [] &#125;);</span><br><span class="line"><span class="comment">// Maybe(null)</span></span><br><span class="line"></span><br><span class="line">streetName(&#123;</span><br><span class="line">  addresses: [</span><br><span class="line">    &#123;</span><br><span class="line">      street: <span class="string">"Shady Ln."</span>,</span><br><span class="line">      number: <span class="number">4201</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Maybe("Shady Ln.")</span></span><br></pre></td></tr></table></figure><p><code>Maybe</code> can be used to explicitly signal failure.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  withdraw :: Number -&gt; Account -&gt; Maybe(Account)</span></span><br><span class="line"><span class="keyword">const</span> withdraw = curry(<span class="function">(<span class="params">amount, account</span>) =&gt;</span></span><br><span class="line">   account.balance &gt;= amount</span><br><span class="line">    ? Maybe.of(&#123; <span class="attr">balance</span>: account.balance - amount &#125;)</span><br><span class="line">    : Maybe.of(<span class="literal">null</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  finishTransaction :: Account -&gt; String</span></span><br><span class="line"><span class="keyword">const</span> finishTransaction = compose(remainingBalance, updateLedger)</span><br><span class="line"><span class="comment">// &lt;- these composed functions are hypothetical, not implemented here...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  getTwenty :: Account -&gt; Maybe(String)</span></span><br><span class="line"><span class="keyword">const</span> getTwenty = compose(map(finishTransaction), withdraw(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">getTwenty(&#123; <span class="attr">balance</span>: <span class="number">200.00</span> &#125;)</span><br><span class="line"><span class="comment">// Maybe("Your balance is $180.00")</span></span><br><span class="line"></span><br><span class="line">getTwenty(&#123; <span class="attr">balance</span>: <span class="number">10.00</span> &#125;)</span><br><span class="line"><span class="comment">// Maybe(null)</span></span><br></pre></td></tr></table></figure><p>It is important to note: if the <code>withdraw</code> fails, then <code>map</code> will sever the rest of our computation since it doesn’t ever run the mapped functions, namely <code>finishTransaction</code>. This is precisely the intended behavior as we’d prefer not to update our ledger or show a new balance if we hadn’t successfully withdrawn funds.</p><h3 id="Releasing-the-value"><a href="#Releasing-the-value" class="headerlink" title="Releasing the value"></a>Releasing the value</h3><p>One thing people often miss is that there will always be an end of the line some effecting function that sends JSON along, or prints to the screen, or alters our filesystem, or what have you. We cannot deliver the output with <code>return</code>, we must run some function or another to send it out into the world.</p><p>Our application’s job is to retrieve, transform, and carry that data along until it’s time to say goodbye and the function which does so may be mapped, thus the value needn’t leave the warm womb of its container. Indeed, a common error is to try to remove the value from our <code>Maybe</code> one way or another as if the possible value inside will suddenly materialize and all will be forgiven. We must understand it may be a branch of code where our value is not around to live up to its destiny. Our code, much like Schrödinger’s cat, is in two states at once and should maintain that fact until the final function. This gives our code a linear flow despite the logical branching.</p><p>There is a little helper called <code>maybe</code> that will return a custom value and continue on.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  maybe :: b -&gt; (a -&gt; b) -&gt; Maybe a -&gt; b</span></span><br><span class="line"><span class="keyword">var</span> maybe = curry(<span class="function"><span class="keyword">function</span>(<span class="params">x, f, m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> m.isNothing() ? x : f(m.__value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  getTwenty :: Account -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> getTwenty = compose(maybe(<span class="string">"You're broke!"</span>, finishTransaction, withdraw(<span class="number">20</span>)));</span><br><span class="line"></span><br><span class="line">getTwenty(&#123; <span class="attr">balance</span>: <span class="number">200.0</span> &#125;);</span><br><span class="line"><span class="comment">// "Your balance is $180.00"</span></span><br><span class="line"></span><br><span class="line">getTwenty(&#123; <span class="attr">balance</span>: <span class="number">10.0</span> &#125;);</span><br><span class="line"><span class="comment">// "You're broke!"</span></span><br></pre></td></tr></table></figure><p>With <code>maybe</code>, we are witnessing the equivalent of an <code>if/else</code> statement whereas with <code>map</code>, the imperative analog would be: <code>if (x !== null) { return f(x) }</code>.</p><p>When pushed to deal with null checks all the time most people can’t help, but feel it’s a tad laborious. However, with time, it will become second nature and you’ll likely appreciate the safety.</p><p>I’d be remiss if I didn’t mention that the “real” implementation will split <code>Maybe</code> into two types: one for <code>something</code> and the other for <code>nothing</code>. This allows us to obey parametricity in map so values like null and undefined can still be mapped over and the universal qualification of the value in a functor will be respected. You’ll often see types like <code>Some(x) / None</code> or <code>Just(x) / Nothing</code> instead of a <code>Maybe</code> that does a null check on its value.</p><h3 id="Pure-Error-Handling"><a href="#Pure-Error-Handling" class="headerlink" title="Pure Error Handling"></a>Pure Error Handling</h3><p>It may come as a shock, but <code>throw/catch</code> is not very pure. With our new friend <code>Either</code>, we can respond with a polite message.</p><p><code>Left</code> and <code>Right</code> are two subclasses of an abstract type we call <code>Either</code>. I’ve skipped the ceremony of creating the <code>Either</code> superclass as we won’t ever use it, but it’s good to be aware. Let’s see how they act:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Left = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">this</span>.__value = x &#125;</span><br><span class="line"></span><br><span class="line">Left.of = <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="keyword">new</span> Left(x)</span><br><span class="line"></span><br><span class="line">Left.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Right = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">this</span>.__value = x &#125;</span><br><span class="line"></span><br><span class="line">Right.of = <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="keyword">new</span> Right(x)</span><br><span class="line"></span><br><span class="line">Right.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Right.of(f(<span class="keyword">this</span>.__value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Right.of(<span class="string">'rain'</span>).map(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="string">'b'</span> + str)</span><br><span class="line"><span class="comment">// Right('brain')</span></span><br><span class="line"></span><br><span class="line">Left.of(<span class="string">'rain'</span>).map(<span class="function">(<span class="params">str</span>) =&gt;</span> <span class="string">'b'</span> + str</span><br><span class="line"><span class="comment">// Left('rain')</span></span><br><span class="line"></span><br><span class="line">Right.of(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  port: <span class="number">80</span>,</span><br><span class="line">&#125;).map(_.prop(<span class="string">'host'</span>))</span><br><span class="line"><span class="comment">// Right('localhost')</span></span><br><span class="line"></span><br><span class="line">Left.of(<span class="string">'rolls eyes...'</span>).map(_.prop(<span class="string">'host'</span>))</span><br><span class="line"><span class="comment">// Left('rolls eyes...')</span></span><br></pre></td></tr></table></figure><p>Let’s use <code>Left</code> to find out more about a failure.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moment = <span class="built_in">require</span>(<span class="string">"moment"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  getAge :: Date -&gt; User -&gt; Either(String, Number)</span></span><br><span class="line"><span class="keyword">var</span> getAge = curry(<span class="function"><span class="keyword">function</span>(<span class="params">now, user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> birthdate = moment(user.birthdate, <span class="string">"YYYY-MM-DD"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!birthdate.isValid()) <span class="keyword">return</span> Left.of(<span class="string">"Birth date could not be parsed"</span>);</span><br><span class="line">  <span class="keyword">return</span> Right.of(now.diff(birthdate, <span class="string">"years"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">getAge(moment(), &#123; <span class="attr">birthdate</span>: <span class="string">"2005-12-12"</span> &#125;);</span><br><span class="line"><span class="comment">// Right(9)</span></span><br><span class="line"></span><br><span class="line">getAge(moment(), &#123; <span class="attr">birthdate</span>: <span class="string">"20010704"</span> &#125;);</span><br><span class="line"><span class="comment">// Left('Birth date could not be parsed')</span></span><br></pre></td></tr></table></figure><p>Something to notice is that we return <code>Either(String, Number)</code>, which holds a String as its Left value and a Number as its Right. This type signature is a bit informal as we haven’t taken the time to define an actual Either superclass, however, we learn a lot from the type. It informs us that we’re either getting an error message or the age back.</p><p>In this example, we are logically branching our control flow depending on the validity of the birth date, yet it reads as one linear motion from right to left rather than climbing through the curly braces of a conditional statement.</p><blockquote><p>FYI In some browsers you have to use <code>console.log.bind(console)</code> to use it first class</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  fortune :: Number -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> fortune = compose(</span><br><span class="line">  concat(<span class="string">"If you survive, you will be "</span>),</span><br><span class="line">  add(<span class="number">1</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  zoltar :: User -&gt; Either(String, _)</span></span><br><span class="line"><span class="keyword">var</span> zoltar = compose(</span><br><span class="line">  map(<span class="built_in">console</span>.log),</span><br><span class="line">  map(fortune),</span><br><span class="line">  getAge(moment())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">zoltar(&#123; <span class="attr">birthdate</span>: <span class="string">"2005-12-12"</span> &#125;);</span><br><span class="line"><span class="comment">// 'If you survive, you will be 10'</span></span><br><span class="line"><span class="comment">// Right(undefined)</span></span><br><span class="line"></span><br><span class="line">zoltar(&#123; <span class="attr">birthdate</span>: <span class="string">"balloons!"</span> &#125;);</span><br><span class="line"><span class="comment">// Left('Birth date could not be parsed')</span></span><br></pre></td></tr></table></figure><h3 id="Lifting"><a href="#Lifting" class="headerlink" title="Lifting"></a>Lifting</h3><p>At the time of calling, a function can be surrounded by map, which transforms it from a <code>non-functory</code> function to a <code>functory</code> one, in informal terms. We call this process lifting. Functions tend to be better off working with normal data types rather than container types, then lifted into the right container as deemed necessary. This leads to simpler, more reusable functions that can be altered to work with any functor on demand.</p><blockquote><p><code>Lifting</code> transforms a non-functory function to a functory one by surrounding it with map</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MAP</span></span><br><span class="line"><span class="comment">// map :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</span></span><br><span class="line"><span class="comment">// var map = curry(function(f, any_functor_at_all) &#123;</span></span><br><span class="line"><span class="comment">//   return any_functor_at_all.map(f)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  zoltar :: User -&gt; Either(String, _)</span></span><br><span class="line"><span class="keyword">var</span> zoltar = compose(</span><br><span class="line">  map(<span class="built_in">console</span>.log),</span><br><span class="line">  map(fortune),</span><br><span class="line">  getAge(moment())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>getAge(moment())</code> will return an <code>Either</code> resulting in a <code>Left</code> or <code>Right</code></li><li>onError: map(fortune) doesn’t process fortune function</li><li>onSuccess: map(fortune) does process fortune function</li><li>onError: map(console.log) does not print</li><li>onSuccess: map(console.log) prints <code>If you survive, you will be 10</code></li></ul><p><code>Either</code> is great for casual errors like validation as well as more serious, stop the show errors like missing files or broken sockets. Try replacing some of the <code>Maybe</code> examples with <code>Either</code> to give better feedback.</p><p>There are many things <code>Either</code> can be, but as a functor, it is used for its error handling.</p><p>Just like with <code>Maybe</code>, we have little <code>either</code>, which behaves similarly, but takes two functions instead of one and a static value. Each function should return the same type:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c</span></span><br><span class="line"><span class="keyword">var</span> either = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, g, e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (e.constructor) &#123;</span><br><span class="line">    <span class="keyword">case</span> Left:</span><br><span class="line">      <span class="keyword">return</span> f(e.__value);</span><br><span class="line">    <span class="keyword">case</span> Right:</span><br><span class="line">      <span class="keyword">return</span> g(e.__value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  zoltar :: User -&gt; _</span></span><br><span class="line"><span class="keyword">var</span> zoltar = compose(</span><br><span class="line">  <span class="built_in">console</span>.log,</span><br><span class="line">  either(id, fortune),</span><br><span class="line">  getAge(moment())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">zoltar(&#123; <span class="attr">birthdate</span>: <span class="string">"2005-12-12"</span> &#125;);</span><br><span class="line"><span class="comment">// "If you survive, you will be 10"</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">zoltar(&#123; <span class="attr">birthdate</span>: <span class="string">"balloons!"</span> &#125;);</span><br><span class="line"><span class="comment">// "Birth date could not be parsed"</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>Finally, a use for that mysterious <code>id</code> function. It simply parrots back the value in the <code>Left</code> to pass the error message to console.log. We’ve made our fortune telling app more robust by enforcing error handling from within getAge.</p><h3 id="side-effects"><a href="#side-effects" class="headerlink" title="side-effects"></a>side-effects</h3><p>In our chapter about purity we saw a peculiar example of a pure function. This function contained a side-effect, but we dubbed it pure by wrapping its action in another function. Here’s another example of this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  getFromStorage :: String -&gt; (_ -&gt; String)</span></span><br><span class="line"><span class="keyword">var</span> getFromStorage = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> localStorage[key];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Had we not surrounded its guts in another function, getFromStorage would vary its output depending on external circumstance. With the sturdy wrapper in place, we will always get the same output per input: a function that, when called, will retrieve a particular item from localStorage. And just like that (maybe throw in a few Hail Mary’s) we’ve cleared our conscience and all is forgiven.</p><p>Except, this isn’t particularly useful now is it. Like a collectible action figure in its original packaging, we can’t actually play with it. If only there were a way to reach inside of the container and get at its contents… Enter <code>IO</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IO = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.__value = f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">IO.of = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">IO.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(</span><br><span class="line">    _.compose(</span><br><span class="line">      f,</span><br><span class="line">      <span class="keyword">this</span>.__value</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>IO</code> differs from the previous functors in that the <code>__value</code> is always a function. We don’t think of its <code>__value</code> as a function, however - that is an implementation detail and we best ignore it. What is happening is exactly what we saw with the <code>getFromStorage</code> example: <code>IO</code> delays the impure action by capturing it in a function wrapper. As such, we think of <code>IO</code> as containing the return value of the wrapped action and not the wrapper itself. This is apparent in the of function: we have an <code>IO(x)</code>, the <code>IO(function(){ return x })</code> is just necessary to avoid evaluation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  io_window :: IO Window</span></span><br><span class="line"><span class="keyword">var</span> io_window = <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io_window.map(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> win.innerWidth;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// IO(1430)</span></span><br><span class="line"></span><br><span class="line">io_window</span><br><span class="line">  .map(_.prop(<span class="string">"location"</span>))</span><br><span class="line">  .map(_.prop(<span class="string">"href"</span>))</span><br><span class="line">  .map(_.split(<span class="string">"/"</span>));</span><br><span class="line"><span class="comment">// IO(["http:", "", "localhost:8000", "blog", "posts"])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  $ :: String -&gt; IO [DOM]</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelectorAll(selector);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#myDiv"</span>)</span><br><span class="line">  .map(head)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span>(<span class="params">div</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> div.innerHTML;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// IO('I am some inner html')</span></span><br></pre></td></tr></table></figure><p>Here, <code>io_window</code> is an actual <code>IO</code> that we can <code>map</code> over straight away, whereas <code>$</code> is a function that returns an <code>IO</code> after its called. I’ve written out the <em>conceptual</em> return values to better express the IO, though, in reality, it will always be <code>{ __value: [Function] }</code>. When we <code>map</code> over our <code>IO</code>, we stick that function at the end of a composition which, in turn, becomes the new <code>__value</code> and so on. Our mapped functions do not run, they get tacked on the end of a computation we’re building up, function by function, like carefully placing dominoes that we don’t dare tip over. The result is reminiscent of Gang of Four’s command pattern or a queue.</p><p>Take a moment to channel your functor intuition. If we see past the implementation details, we should feel right at home mapping over any container no matter its quirks or idiosyncrasies. We have the functor laws, which we will explore toward the end of the chapter, to thank for this pseudo-psychic power. At any rate, we can finally play with impure values without sacrificing our precious purity.</p><p>Mapping over our IO has built up a mighty impure computation and running it is surely going to disturb the peace. So where and when can we pull the trigger? If we put the onus on the calling code. Our pure code, despite the nefarious plotting and scheming, maintains its innocence and it’s the caller who gets burdened with the responsibility of actually running the effects. Let’s see an example to make this concrete.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">“<span class="comment">////// Our pure library: lib/params.js ///////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  url :: IO String</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.location.href</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  toPairs =  String -&gt; [[String]]</span></span><br><span class="line"><span class="keyword">var</span> toPairs = compose(map(split(<span class="string">'='</span>)), split(<span class="string">'&amp;'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//  params :: String -&gt; [[String]]</span></span><br><span class="line"><span class="keyword">var</span> params = compose(toPairs, last, split(<span class="string">'?'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//  findParam :: String -&gt; IO Maybe [String]</span></span><br><span class="line"><span class="keyword">var</span> findParam = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> map(compose(Maybe.of, filter(compose(eq(key), head)), params), url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////// Impure calling code: main.js ///////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run it by calling __value()!</span></span><br><span class="line">findParam(<span class="string">"searchTerm"</span>).__value()</span><br><span class="line"><span class="comment">// Maybe([['searchTerm', 'wafflehouse']])</span></span><br></pre></td></tr></table></figure><p>Our library keeps its hands clean by wrapping url in an IO and passing the buck to the caller. You might have also noticed that we have stacked our containers it’s perfectly reasonable to have a IO(Maybe([x])), which is three functors deep (Array is most definitely a mappable container type) and exceptionally expressive.</p><p>There’s something that’s been bothering me and we should rectify it immediately: IO’s __value isn’t really its contained value, nor is it a private property as the underscore prefix suggests. It is the pin in the grenade and it is meant to be pulled by a caller in the most public of ways. Let’s rename this property to unsafePerformIO to remind our users of its volatility.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IO = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.unsafePerformIO = f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">IO.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(</span><br><span class="line">    _.compose(</span><br><span class="line">      f,</span><br><span class="line">      <span class="keyword">this</span>.unsafePerformIO</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>There, much better. Now our calling code becomes findParam(“searchTerm”).unsafePerformIO(), which is clear as day to users (and readers) of the application.</p><p>IO will be a loyal companion, helping us tame those feral impure actions. Next, we’ll see a type similar in spirit, but has a drastically different use case.</p><h3 id="Asynchronous-Tasks"><a href="#Asynchronous-Tasks" class="headerlink" title="Asynchronous Tasks"></a>Asynchronous Tasks</h3><p>Callbacks are the narrowing spiral staircase to hell. They are control flow as designed by M.C. Escher. With each nested callback squeezed in between the jungle gym of curly braces and parenthesis, they feel like limbo in an oubliette(how low can we go!). I’m getting claustrophobic chills just thinking about them. Not to worry, we have a much better way of dealing with asynchronous code and it starts with an “F”.</p><p>The internals are a bit too complicated to spill out all over the page here so we will use Data.Task (previously Data.Future) from Quildreen Motta’s fantastic Folktale. Behold some example usage:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node readfile example:</span></span><br><span class="line"><span class="comment">//=======================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  readFile :: String -&gt; Task Error String</span></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, result</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      err ? reject(err) : result(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">'metamorphosis'</span>).map(split(<span class="string">'\n'</span>)).map(head);</span><br><span class="line"><span class="comment">// Task("One morning, as Gregor Samsa was waking up from anxious dreams,</span></span><br><span class="line"><span class="comment">// he discovered that in bed he had been changed into a monstrous verminous bug.")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery getJSON example:</span></span><br><span class="line"><span class="comment">//========================</span></span><br><span class="line"></span><br><span class="line">“<span class="comment">//  getJSON :: String -&gt; &#123;&#125; -&gt; Task Error JSON</span></span><br><span class="line"><span class="keyword">var</span> getJSON = curry(<span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, result</span>) </span>&#123;</span><br><span class="line">    $.getJSON(url, params, result).fail(reject);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'/video'</span>, &#123;</span><br><span class="line">  id: <span class="number">10</span>,</span><br><span class="line">&#125;).map(_.prop(<span class="string">'title'</span>));</span><br><span class="line"><span class="comment">// Task("Family Matters ep 15")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// We can put normal, non futuristic values inside as well</span></span><br><span class="line">Task.of(<span class="number">3</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">three</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> three + <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Task(4)</span></span><br></pre></td></tr></table></figure><p>The functions I’m calling reject and result are our error and success callbacks, respectively. As you can see, we simply map over the Task to work on the future value as if it was right there in our grasp. By now map should be old hat.</p><p>If you’re familiar with promises, you might recognize the function map as then with Task playing the role of our promise. Don’t fret if you aren’t familiar with promises, we won’t be using them anyhow because they are not pure, but the analogy holds nonetheless.</p><p>Like IO, Task will patiently wait for us to give it the green light before running. In fact, because it waits for our command, IO is effectively subsumed by Task for all things asynchronous; readFile and getJSON don’t require an extra IO container to be pure. What’s more, Task works in a similar fashion when we map over it: we’re placing instructions for the future like a chore chart in a time capsule - an act of sophisticated technological procrastination.</p><p>To run our Task, we must call the method fork. This works like unsafePerformIO, but as the name suggests, it will fork our process and evaluation continues on without blocking our thread. This can be implemented in numerous ways with threads and such, but here it acts as a normal async call would and the big wheel of the event loop keeps on turning. Let’s look at fork:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pure application</span></span><br><span class="line"><span class="comment">//=====================</span></span><br><span class="line"><span class="comment">// blogTemplate :: String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  blogPage :: Posts -&gt; HTML</span></span><br><span class="line"><span class="keyword">var</span> blogPage = Handlebars.compile(blogTemplate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  renderPage :: Posts -&gt; HTML</span></span><br><span class="line"><span class="keyword">var</span> renderPage = compose(</span><br><span class="line">  blogPage,</span><br><span class="line">  sortBy(<span class="string">"date"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  blog :: Params -&gt; Task Error HTML</span></span><br><span class="line"><span class="keyword">var</span> blog = compose(</span><br><span class="line">  map(renderPage),</span><br><span class="line">  getJSON(<span class="string">"/posts"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Impure calling code</span></span><br><span class="line"><span class="comment">//=====================</span></span><br><span class="line">blog(&#123;&#125;).fork(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#error"</span>).html(error.message);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#main"</span>).html(page);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#spinner"</span>).show();</span><br></pre></td></tr></table></figure><p>Upon calling fork, the Task hurries off to find some posts and render the page. Meanwhile, we show a spinner since fork does not wait for a response. Finally, we will either display an error or render the page onto the screen depending if the getJSON call succeeded or not.</p><p>Take a moment to consider how linear the control flow is here. We just read bottom to top, right to left even though the program will actually jump around a bit during execution. This makes reading and reasoning about our application simpler than having to bounce between callbacks and error handling blocks.</p><p>Goodness, would you look at that, Task has also swallowed up Either! It must do so in order to handle futuristic failures since our normal control flow does not apply in the async world. This is all well and good as it provides sufficient and pure error handling out of the box.</p><p>Even with Task, our IO and Either functors are not out of a job. Bear with me on a quick example that leans toward the more complex and hypothetical side, but is useful for illustrative purposes.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Postgres.connect :: Url -&gt; IO DbConnection</span></span><br><span class="line"><span class="comment">// runQuery :: DbConnection -&gt; ResultSet</span></span><br><span class="line"><span class="comment">// readFile :: String -&gt; Task Error String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pure application</span></span><br><span class="line"><span class="comment">//=====================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  dbUrl :: Config -&gt; Either Error Url</span></span><br><span class="line"><span class="keyword">var</span> dbUrl = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.uname &amp;&amp; c.pass &amp;&amp; c.host &amp;&amp; c.db</span><br><span class="line">    ? Right.of(<span class="string">"db:pg://"</span> + c.uname + <span class="string">":"</span> + c.pass + <span class="string">"@"</span> + c.host + <span class="string">"5432/"</span> + c.db)</span><br><span class="line">    : Left.of(<span class="built_in">Error</span>(<span class="string">"Invalid config!"</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  connectDb :: Config -&gt; Either Error (IO DbConnection)</span></span><br><span class="line"><span class="keyword">var</span> connectDb = compose(</span><br><span class="line">  map(Postgres.connect),</span><br><span class="line">  dbUrl</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  getConfig :: Filename -&gt; Task Error (Either Error (IO DbConnection))</span></span><br><span class="line"><span class="keyword">var</span> getConfig = compose(</span><br><span class="line">  map(</span><br><span class="line">    compose(</span><br><span class="line">      connectDb,</span><br><span class="line">      <span class="built_in">JSON</span>.parse</span><br><span class="line">    )</span><br><span class="line">  ),</span><br><span class="line">  readFile</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Impure calling code</span></span><br><span class="line"><span class="comment">//=====================</span></span><br><span class="line">getConfig(<span class="string">"db.json"</span>).fork(logErr(<span class="string">"couldn't read file"</span>), either(<span class="built_in">console</span>.log, map(runQuery)));</span><br></pre></td></tr></table></figure><p>In this example, we still make use of Either and IO from within the success branch of readFile. Task takes care of the impurities of reading a file asynchronously, but we still deal with validating the config with Either and wrangling the db connection with IO. So you see, we’re still in business for all things synchronous.</p><p>I could go on, but that’s all there is to it. Simple as map.</p><p>In practice, you’ll likely have multiple asynchronous tasks in one workflow and we haven’t yet acquired the full container APIs to tackle this scenario. Not to worry, we’ll look at monads and such soon, but first, we must examine the maths that make this all possible.</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> functional </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Frisby&#39;s Mostly Adequate Guide to Functional Programming - Part 1</title>
      <link href="/2016/08/02/20160809-guide-to-FP-part1/"/>
      <url>/2016/08/02/20160809-guide-to-FP-part1/</url>
      
        <content type="html"><![CDATA[<!-- TOC depthFrom:1 depthTo:1 withLinks:1 updateOnSave:0 orderedList:0 --><ul><li><a href="#Introduction">Introduction</a></li><li><a href="#First-Class-Functions">First Class Functions</a></li><li><a href="#Pure-Functions">Pure Functions</a></li><li><a href="#Currying">Currying</a></li><li><a href="#Composing">Composing</a></li><li><a href="#Example-Application">Example Application</a></li><li><a href="#Hindley-Milner-Type-Signatures">Hindley-Milner Type Signatures</a></li><li><a href="#Conclusion">Conclusion</a></li></ul><!-- /TOC --><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This will be Part 1 of a multi-part series on Functional Programming.  By the end of the series I think you’ll agree that Functional Programming (FP) requires less code and is easier to understand than other programming paradigms.</p><p>We will be using math properties to refactor programs:</p><pre><code>// associative// add or multiply regardless of grouping( a + b ) + c === a + ( b + c )( a * b ) * c === a * ( b * c )// commutative// add or multiply regardless of ordera + b === b + aa * b === b * a// identity// Any number multiplied by 1 is itselfa * 1 === a// distributive// multiply a single term and multiple terms inside parenthesisa( b + c ) === a * b + a * c</code></pre><p>Don’t worry more math to come.</p><h2 id="First-Class-Functions"><a href="#First-Class-Functions" class="headerlink" title="First Class Functions"></a>First Class Functions</h2><p>The term ‘first class’ is just a classification.  It refers to the fact that it is a fundamental component of the language.  Hence you can pass functions around just as you do strings and integers.</p><h3 id="Don’t-wrap-functions"><a href="#Don’t-wrap-functions" class="headerlink" title="Don’t wrap functions"></a>Don’t wrap functions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hi = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hi '</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ignorant</span></span><br><span class="line"><span class="comment"> * unnecessarily wraps a function</span></span><br><span class="line"><span class="comment"> * forces a one argument signature</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> greeting = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hi(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enlightened</span></span><br><span class="line"><span class="keyword">var</span> greeting = hi</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ignorant</span></span><br><span class="line"><span class="keyword">var</span> getServerStuff = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ajaxCall(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> callback(json)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enlightened</span></span><br><span class="line"><span class="keyword">var</span> getServerStuff = ajaxCall</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ignorant</span></span><br><span class="line"><span class="keyword">var</span> BlogController = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> create = <span class="function"><span class="keyword">function</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Db.create(attrs)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: create</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enlightened</span></span><br><span class="line"><span class="keyword">var</span> BlogController = &#123;</span><br><span class="line">  create: Db.create,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Don’t-tie-function-names-to-specific-data"><a href="#Don’t-tie-function-names-to-specific-data" class="headerlink" title="Don’t tie function names to specific data"></a>Don’t tie function names to specific data</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// specific to our current blog</span></span><br><span class="line"><span class="keyword">var</span> validArticles = <span class="function"><span class="keyword">function</span>(<span class="params">articles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> articles.filter(<span class="function"><span class="keyword">function</span>(<span class="params">article</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> article !== <span class="literal">null</span> &amp;&amp; article !== <span class="literal">undefined</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vastly more relevant for future projects</span></span><br><span class="line"><span class="keyword">var</span> compact = <span class="function"><span class="keyword">function</span>(<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x !== <span class="literal">null</span> &amp;&amp; x !== <span class="literal">undefined</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Be-aware-of-JS-leaky-abstractions"><a href="#Be-aware-of-JS-leaky-abstractions" class="headerlink" title="Be aware of JS leaky abstractions"></a>Be aware of JS leaky abstractions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// scary</span></span><br><span class="line">fs.readFile(<span class="string">'freaky_friday.txt'</span>, Db.save)</span><br><span class="line"></span><br><span class="line"><span class="comment">// less so</span></span><br><span class="line">fs.readFile(<span class="string">'freaky_friday.txt'</span>, Db.save.bind(Db))</span><br></pre></td></tr></table></figure><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ul><li>Reduce complexity by not wrapping functions unnecessarily.</li><li>Increase code reuse by trying to avoid function names that tie the name to specific data.</li><li>Be aware of <code>leaky abstractions</code> like <code>this</code> used by JS OOP.</li></ul><h2 id="Pure-Functions"><a href="#Pure-Functions" class="headerlink" title="Pure Functions"></a>Pure Functions</h2><blockquote><p>A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.</p></blockquote><h3 id="Don’t-mutate-data"><a href="#Don’t-mutate-data" class="headerlink" title="Don’t mutate data"></a>Don’t mutate data</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// pure</span></span><br><span class="line">xs.slice(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">xs.slice(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">xs.slice(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// impure</span></span><br><span class="line">xs.splice(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">//=&gt; [1, 2, 3]</span></span><br><span class="line">xs.splice(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">//=&gt; [4, 5]</span></span><br><span class="line">xs.splice(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">//=&gt; []</span></span><br></pre></td></tr></table></figure><h3 id="Don’t-depend-on-mutable-data-or-system-state"><a href="#Don’t-depend-on-mutable-data-or-system-state" class="headerlink" title="Don’t depend on mutable data or system state"></a>Don’t depend on mutable data or system state</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// impure</span></span><br><span class="line"><span class="keyword">var</span> minimum = <span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= minimum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// pure</span></span><br><span class="line"><span class="keyword">var</span> checkAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> minimum = <span class="number">21</span></span><br><span class="line">  <span class="keyword">return</span> age &gt;= minimum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>A side effect is a change of system state or observable interaction with the outside world that occurs during the calculation of a result.</p></blockquote><p>Side effects may include, but are not limited to:</p><ul><li>changing the file system</li><li>inserting a record into a database</li><li>making an http call</li><li>mutations</li><li>printing to the screen / logging</li><li>obtaining user input</li><li>querying the DOM</li><li>accessing system state</li></ul><p>Side effects disqualify a function from being pure. And it makes sense: pure functions, by definition, must always return the same output given the same input, which is not possible to guarantee when dealing with matters outside our local function.</p><blockquote><p>A function is a special relationship between values: Each of its input values gives back exactly one output value.</p></blockquote><p>Here comes the dramatic reveal: <code>Pure functions are mathematical functions</code> and they’re what functional programming is all about. Programming with these little angels can provide huge benefits. Let’s look at some reasons why we’re willing to go to great lengths to preserve purity.</p><h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="Cacheable"></a>Cacheable</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> squareNumber = memoize(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">squareNumber(<span class="number">4</span>)</span><br><span class="line"><span class="comment">//=&gt; 16</span></span><br><span class="line"></span><br><span class="line">squareNumber(<span class="number">4</span>) <span class="comment">// returns cache for input 4</span></span><br><span class="line"><span class="comment">//=&gt; 16</span></span><br></pre></td></tr></table></figure><p>Transform impure to pure</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pureHttpCall = memoize(<span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.getJSON(url, params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our memoize function works just fine, though it doesn’t cache the results of the http call, rather it caches the generated function.</p><p>This is not very useful yet, but we’ll soon learn some tricks that will make it so. The takeaway is that we can cache every function no matter how destructive they seem.</p><h3 id="Self-Documenting"><a href="#Self-Documenting" class="headerlink" title="Self-Documenting"></a>Self-Documenting</h3><p>A function’s dependencies are explicit and therefore easier to see and understand.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//impure</span></span><br><span class="line"><span class="keyword">var</span> signUp = <span class="function"><span class="keyword">function</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = saveUser(attrs)</span><br><span class="line">  welcomeUser(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saveUser = <span class="function"><span class="keyword">function</span>(<span class="params">attrs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = Db.save(attrs)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> welcomeUser = <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    Email(user, ...)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pure</span></span><br><span class="line"><span class="keyword">var</span> signUp = <span class="function"><span class="keyword">function</span>(<span class="params">Db, Email, attrs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = saveUser(Db, attrs)</span><br><span class="line">    welcomeUser(Email, user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saveUser = <span class="function"><span class="keyword">function</span>(<span class="params">Db, attrs</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> welcomeUser = <span class="function"><span class="keyword">function</span>(<span class="params">Email, user</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Portable"><a href="#Portable" class="headerlink" title="Portable"></a>Portable</h3><p>In a JavaScript setting, portability could mean serializing and sending functions over a socket. It could mean running all our app code in web workers. Portability is a powerful trait.</p><p>Contrary to “typical” methods and procedures in imperative programming rooted deep in their environment via state, dependencies, and available effects, pure functions can be run anywhere our hearts desire.</p><p>When was the last time you copied a method into a new app? One of my favorite quotes comes from Erlang creator, Joe Armstrong: “The problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana… and the entire jungle”.</p><h3 id="Testable"><a href="#Testable" class="headerlink" title="Testable"></a>Testable</h3><p>Next, we come to realize pure functions make testing much easier. We don’t have to mock a “real” payment gateway or setup and assert the state of the world after each test. We simply give the function input and assert output.</p><h3 id="Reasonable"><a href="#Reasonable" class="headerlink" title="Reasonable"></a>Reasonable</h3><p>Many believe the biggest win when working with pure functions is referential transparency. A spot of code is referentially transparent when it can be substituted for its evaluated value without changing the behavior of the program.</p><h3 id="Parallel-Code"><a href="#Parallel-Code" class="headerlink" title="Parallel Code"></a>Parallel Code</h3><p>We can run any pure function in parallel since it does not need access to shared memory and it cannot, by definition, have a race condition due to some side effect.</p><p>This is very much possible in a server side js environment with threads as well as in the browser with web workers though current culture seems to avoid it due to complexity when dealing with impure functions.</p><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><p>We’ve seen what pure functions are and why we think they’re good. From this point on, we’ll strive to write all our functions in a pure way. We’ll require some extra tools to help us do so, but in the meantime, we’ll try to separate the impure functions from the rest of the pure code.</p><p>Writing programs with pure functions is a tad laborious without some extra tools in our belt. We have to juggle data by passing arguments all over the place, we’re forbidden to use state, not to mention effects. How does one go about writing these masochistic programs? Let’s acquire a new tool called curry.</p><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><blockquote><p>The concept is simple: You can call a function with fewer arguments than it expects. It returns a function that takes the remaining arguments.</p></blockquote><p>Let’s set up a few curried functions…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curry = <span class="built_in">require</span>(<span class="string">'lodash/curry'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> match = curry(<span class="function"><span class="keyword">function</span>(<span class="params">what, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.match(what)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> replace = curry(<span class="function"><span class="keyword">function</span>(<span class="params">what, replacement, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(what, replacement)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, ary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ary.filter(f)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, ary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ary.map(f)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The pattern I’ve followed is a simple, but important one. I’ve strategically positioned the data we’re operating on (String, Array) as the last argument. It will become clear as to why upon use.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">match(<span class="regexp">/\s+/g</span>, <span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">// [ ' ' ]</span></span><br><span class="line"></span><br><span class="line">match(<span class="regexp">/\s+/g</span>)(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">// [ ' ' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasSpaces = match(<span class="regexp">/\s+/g</span>)</span><br><span class="line"><span class="comment">// function(x) &#123; return x.match(/\s+/g) &#125;</span></span><br><span class="line"></span><br><span class="line">hasSpaces(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">// [ ' ' ]</span></span><br><span class="line"></span><br><span class="line">hasSpaces(<span class="string">'spaceless'</span>)</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">filter(hasSpaces, [<span class="string">'tori_spelling'</span>, <span class="string">'tori amos'</span>])</span><br><span class="line"><span class="comment">// ['tori amos']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findSpaces = filter(hasSpaces)</span><br><span class="line"><span class="comment">// function(xs) &#123; return xs.filter(function(x) &#123; return x.match(/\s+/g) &#125;) &#125;</span></span><br><span class="line"></span><br><span class="line">findSpaces([<span class="string">'tori_spelling'</span>, <span class="string">'tori amos'</span>])</span><br><span class="line"><span class="comment">// ['tori amos']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> noVowels = replace(<span class="regexp">/[aeiouy]/ig</span>)</span><br><span class="line"><span class="comment">// function(replacement, x) &#123; return x.replace(/[aeiouy]/ig, replacement) &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> censored = noVowels(<span class="string">"*"</span>)</span><br><span class="line"><span class="comment">// function(x) &#123; return x.replace(/[aeiouy]/ig, '*') &#125;</span></span><br><span class="line"></span><br><span class="line">censored(<span class="string">'Chocolate Rain'</span>)</span><br><span class="line"><span class="comment">// 'Ch*c*l*t* R**n'</span></span><br></pre></td></tr></table></figure><p>Currying is useful for many things. We can make new functions just by giving our base functions some arguments as seen in <code>hasSpaces</code>, <code>findSpaces</code>, and <code>censored</code>.</p><p>We also have the ability to transform any function that works on single elements into a function that works on arrays simply by wrapping it with <code>map</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getChildren = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.childNodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allTheChildren = map(getChildren)</span><br></pre></td></tr></table></figure><p>Giving a function fewer arguments than it expects is typically called <code>partial application</code>. Partially applying a function can remove a lot of boiler plate code. Consider what the above allTheChildren function would be with the uncurried <code>map</code> from lodash (note the arguments are in a different order):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allTheChildren = <span class="function"><span class="keyword">function</span>(<span class="params">elements</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.map(elements, getChildren)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We typically don’t define functions that work on arrays, because we can just call <code>map(getChildren)</code> inline. Same with <code>sort</code>, <code>filter</code>, and other higher order functions.</p><blockquote><p>Higher order function: A function that takes or returns a function.</p></blockquote><p>When we spoke about pure functions, we said they take 1 input to 1 output. Currying does exactly this: each single argument returns a new function expecting the remaining arguments. That is 1 input to 1 output.</p><p>No matter if the output is another function - it qualifies as pure. We do allow more than one argument at a time, but this is seen as merely removing the extra ()’s for convenience.</p><h3 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h3><p>Currying is handy and is used on a daily basis. It is a tool for the belt that makes FP less verbose and tedious. We can make new, useful functions on the fly simply by passing in a few arguments and as a bonus, we’ve retained the mathematical function definition despite multiple arguments.</p><h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 1</span></span><br><span class="line"><span class="comment">// Refactor to remove all arguments by partially applying the function.</span></span><br><span class="line"><span class="keyword">var</span> words = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.split(<span class="string">' '</span>, str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 1a</span></span><br><span class="line"><span class="comment">// Use map to make a new words fn that works on an array of strings.</span></span><br><span class="line"><span class="keyword">var</span> sentences = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 2</span></span><br><span class="line"><span class="comment">// Refactor to remove all arguments by partially applying the functions.</span></span><br><span class="line"><span class="keyword">var</span> filterQs = <span class="function"><span class="keyword">function</span>(<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> match(<span class="regexp">/q/i</span>, x)</span><br><span class="line">  &#125;, xs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 3</span></span><br><span class="line"><span class="comment">// Refactor max to not reference any arguments.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// leave this</span></span><br><span class="line"><span class="keyword">var</span> _keepHighest = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &gt;= y ? x : y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// REFACTOR</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="function"><span class="keyword">function</span>(<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _keepHighest(acc, x)</span><br><span class="line">  &#125;, -<span class="literal">Infinity</span>, xs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bonus 1:</span></span><br><span class="line"><span class="comment">// Wrap array's slice to be functional and curried.</span></span><br><span class="line"><span class="comment">// //[1, 2, 3].slice(0, 2)</span></span><br><span class="line"><span class="keyword">var</span> slice = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bonus 2:</span></span><br><span class="line"><span class="comment">// Use slice to define a function "take" that takes n elements from the</span></span><br><span class="line"><span class="comment">// beginning of the string. Make it curried.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Result for "Something" with n=4 should be "Some"</span></span><br><span class="line"><span class="keyword">var</span> take = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h3 id="Answers"><a href="#Answers" class="headerlink" title="Answers"></a>Answers</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import functional tools like curry, map, filter, etc.</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./support'</span></span><br><span class="line"><span class="keyword">var</span> words = split(<span class="string">' '</span>)</span><br><span class="line"><span class="keyword">var</span> sentences = map(words)</span><br><span class="line"><span class="keyword">var</span> filterQs = filter(match(<span class="regexp">/q/i</span>))</span><br><span class="line"><span class="keyword">var</span> max = reduce(_keepHighest, -<span class="literal">Infinity</span>)</span><br><span class="line"><span class="keyword">var</span> slice = curry(<span class="function">(<span class="params">start, end, xs</span>) =&gt;</span> xs.slice(start, end))</span><br><span class="line"><span class="keyword">var</span> take = slice(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">words(<span class="string">'a test'</span>)                               <span class="comment">// [ 'a', 'test' ]</span></span><br><span class="line">sentences([ <span class="string">'a test'</span>, <span class="string">'a test'</span>, <span class="string">'a test'</span>, ])  <span class="comment">// [ [ 'a', 'test' ], [ 'a', 'test' ], [ 'a', 'test' ] ]</span></span><br><span class="line">filterQs([<span class="string">'quiet'</span>, <span class="string">'now'</span>])                    <span class="comment">// [ 'quiet' ]</span></span><br><span class="line">max([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])                                <span class="comment">// 4</span></span><br><span class="line">slice(<span class="number">0</span>, <span class="number">4</span>, <span class="string">'funkalicious'</span>)                   <span class="comment">// funk</span></span><br><span class="line">take(<span class="number">4</span>, <span class="string">'funkalicious'</span>)                       <span class="comment">// funk</span></span><br></pre></td></tr></table></figure><h2 id="Composing"><a href="#Composing" class="headerlink" title="Composing"></a>Composing</h2><blockquote><p>The composition of two functions returns a new function. This makes perfect sense: composing two units of some type (in this case function) should yield a new unit of that very type.</p></blockquote><h3 id="Simple-compose"><a href="#Simple-compose" class="headerlink" title="Simple compose"></a>Simple compose</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(g(x))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toUpperCase = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exclaim = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="string">'!'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ignorant</span></span><br><span class="line"><span class="comment">// less readable than the enlightened version</span></span><br><span class="line"><span class="keyword">var</span> shout = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> exclaim(toUpperCase(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enlightened</span></span><br><span class="line"><span class="keyword">var</span> shout = compose(exclaim, toUpperCase)</span><br><span class="line"></span><br><span class="line">shout(<span class="string">"send in the clowns"</span>)</span><br><span class="line"><span class="comment">//=&gt; "SEND IN THE CLOWNS!"</span></span><br></pre></td></tr></table></figure><h3 id="Associative"><a href="#Associative" class="headerlink" title="Associative"></a>Associative</h3><blockquote><p>Composition is associative, meaning it doesn’t matter how you group them. That allows us to write a <code>variadic compose</code>.  <br><br><code>compose(f, compose(g, h)) == compose(compose(f, g), h)</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverse = reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x].concat(acc)</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="keyword">var</span> last = compose(head, reverse)</span><br><span class="line"></span><br><span class="line">last([<span class="string">'jumpkick'</span>, <span class="string">'roundhouse'</span>, <span class="string">'uppercut'</span>])</span><br><span class="line"><span class="comment">//=&gt; 'uppercut'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// previously we'd have to write two composes, but since it's associative, we can</span></span><br><span class="line"><span class="comment">// give compose as many fn's as we like and let it decide how to group them.</span></span><br><span class="line"><span class="keyword">var</span> lastUpper = compose(toUpperCase, head, reverse)</span><br><span class="line"></span><br><span class="line">lastUpper([<span class="string">'jumpkick'</span>, <span class="string">'roundhouse'</span>, <span class="string">'uppercut'</span>])</span><br><span class="line"><span class="comment">//=&gt; 'UPPERCUT'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loudLastUpper = compose(exclaim, toUpperCase, head, reverse)</span><br><span class="line"></span><br><span class="line">loudLastUpper([<span class="string">'jumpkick'</span>, <span class="string">'roundhouse'</span>, <span class="string">'uppercut'</span>])</span><br><span class="line"><span class="comment">//=&gt; 'UPPERCUT!'</span></span><br></pre></td></tr></table></figure><h3 id="Pointfree"><a href="#Pointfree" class="headerlink" title="Pointfree"></a>Pointfree</h3><blockquote><p>Pointfree style means never having to say your data. Excuse me. It means functions that never mention the data upon which they operate. First class functions, currying, and composition all play well together to create this style.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//not pointfree because we mention the data: word</span></span><br><span class="line"><span class="keyword">var</span> snakeCase = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.toLowerCase().replace(<span class="regexp">/\s+/ig</span>, <span class="string">'_'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pointfree</span></span><br><span class="line"><span class="keyword">var</span> snakeCase = compose(replace(<span class="regexp">/\s+/ig</span>, <span class="string">'_'</span>), toLowerCase)</span><br></pre></td></tr></table></figure><p>See how we partially applied replace? What we’re doing is piping our data through each function of 1 argument. Currying allows us to prepare each function to just take its data, operate on it, and pass it along. Something else to notice is how we don’t need the data to construct our function in the pointfree version, whereas in the pointful one, we must have our <code>word</code> available before anything else.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//not pointfree because we mention the data: name</span></span><br><span class="line"><span class="keyword">var</span> initials = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.split(<span class="string">' '</span>).map(compose(toUpperCase, head)).join(<span class="string">'. '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pointfree</span></span><br><span class="line"><span class="keyword">var</span> initials = compose(join(<span class="string">'. '</span>), map(compose(toUpperCase, head)), split(<span class="string">' '</span>))</span><br><span class="line"></span><br><span class="line">initials(<span class="string">"hunter stockton thompson"</span>)</span><br><span class="line"><span class="comment">// 'H. S. T'</span></span><br></pre></td></tr></table></figure><p>Pointfree code can again, help us remove needless names and keep us concise and generic. Pointfree is a good litmus test for functional code as it lets us know we’ve got small functions that take input to output. One can’t compose a while loop, for instance. Be warned, however, pointfree is a double-edged sword and can sometimes obfuscate intention. Not all functional code is pointfree and that is O.K. We’ll shoot for it where we can and stick with normal functions otherwise.</p><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* THE UTILITY */</span></span><br><span class="line"><span class="keyword">var</span> trace = curry(<span class="function"><span class="keyword">function</span>(<span class="params">tag, x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tag, x)</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// BROKEN</span></span><br><span class="line"><span class="comment">// Cryptic Error: Cannot read property 'apply' of undefined</span></span><br><span class="line"><span class="keyword">var</span> dasherize = compose(</span><br><span class="line">  join(<span class="string">'-'</span>),</span><br><span class="line">  toLower,</span><br><span class="line">  split(<span class="string">' '</span>),</span><br><span class="line">  replace(<span class="regexp">/\s&#123;2,&#125;/ig</span>, <span class="string">' '</span>)</span><br><span class="line">)</span><br><span class="line">dasherize(<span class="string">'The world is a vampire'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// THE DEBUG</span></span><br><span class="line"><span class="comment">// trace utility shows that split is working</span></span><br><span class="line"><span class="comment">// PROBLEM: toLower cannot take an array</span></span><br><span class="line"><span class="keyword">var</span> dasherize = compose(</span><br><span class="line">  join(<span class="string">'-'</span>),</span><br><span class="line">  toLower,</span><br><span class="line">  trace(<span class="string">'after split'</span>),</span><br><span class="line">  split(<span class="string">' '</span>),</span><br><span class="line">  replace(<span class="regexp">/\s&#123;2,&#125;/ig</span>, <span class="string">' '</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// TRACE: after split [ 'The', 'world', 'is', 'a', 'vampire' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// THE FIX: put map around toLower</span></span><br><span class="line"><span class="keyword">var</span> dasherize = compose(join(<span class="string">'-'</span>), map(toLower), split(<span class="string">' '</span>), replace(<span class="regexp">/\s&#123;2,&#125;/ig</span>, <span class="string">' '</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// OUTPUT: 'the-world-is-a-vampire'</span></span><br></pre></td></tr></table></figure><h3 id="Category-Theory"><a href="#Category-Theory" class="headerlink" title="Category Theory"></a>Category Theory</h3><blockquote><p>Category theory is an abstract branch of mathematics that can formalize concepts from several different branches such as <code>set theory</code>, <code>type theory</code>, <code>group theory</code>, <code>logic</code>, and more. It primarily deals with <code>objects</code>, <code>morphisms</code>, and <code>transformations</code>, which mirrors programming quite closely.</p></blockquote><p>In category theory, we have something called… a category. It is defined as a collection with the following:</p><ul><li><p>A collection of objects<br>The objects will be data types. For instance, String, Boolean, Number, Object, etc. We often view data types as sets of all the possible values.</p></li><li><p>A collection of morphisms<br>pure fn</p></li><li><p>A notion of composition on the morphisms<br>compose</p></li><li><p>A distinguished morphism called identity<br>id = (x) =&gt; x</p></li></ul><p>I expect this to be a little fuzzy at this point it will become more clear later.  For now it provides a drop of wisdom regarding composition - namely, the associativity and identity properties. We have sufficiently skimmed the surface and must move on.</p><h3 id="Summary-3"><a href="#Summary-3" class="headerlink" title="Summary"></a>Summary</h3><p>Composition connects our functions together like a series of pipes.  We hold composition as a design principle above all others. This is because it keeps our app simple and reasonable. Category theory will play a big part in app architecture, modeling side effects, and ensuring correctness.</p><h3 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises"></a>Exercises</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example Data</span></span><br><span class="line"><span class="keyword">var</span> CARS = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Ferrari FF"</span>, <span class="attr">horsepower</span>: <span class="number">660</span>, <span class="attr">dollar_value</span>: <span class="number">700000</span>, <span class="attr">in_stock</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Spyker C12 Zagato"</span>, <span class="attr">horsepower</span>: <span class="number">650</span>, <span class="attr">dollar_value</span>: <span class="number">648000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Jaguar XKR-S"</span>, <span class="attr">horsepower</span>: <span class="number">550</span>, <span class="attr">dollar_value</span>: <span class="number">132000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Audi R8"</span>, <span class="attr">horsepower</span>: <span class="number">525</span>, <span class="attr">dollar_value</span>: <span class="number">114200</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Aston Martin One-77"</span>, <span class="attr">horsepower</span>: <span class="number">750</span>, <span class="attr">dollar_value</span>: <span class="number">1850000</span>, <span class="attr">in_stock</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Pagani Huayra"</span>, <span class="attr">horsepower</span>: <span class="number">700</span>, <span class="attr">dollar_value</span>: <span class="number">1300000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 1:</span></span><br><span class="line"><span class="comment">// Use _.compose() to rewrite the function below. Hint: _.prop() is curried.</span></span><br><span class="line"><span class="keyword">var</span> isLastInStock = <span class="function"><span class="keyword">function</span>(<span class="params">cars</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> last_car = _.last(cars)</span><br><span class="line">  <span class="keyword">return</span> _.prop(<span class="string">'in_stock'</span>, last_car)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 2:</span></span><br><span class="line"><span class="comment">// Use _.compose(), _.prop() and _.head() to retrieve the name of the first car.</span></span><br><span class="line"><span class="keyword">var</span> nameOfFirstCar = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 3:</span></span><br><span class="line"><span class="comment">// Use the helper function _average to refactor averageDollarValue as a composition.</span></span><br><span class="line"><span class="keyword">var</span> _average = <span class="function"><span class="keyword">function</span>(<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.reduce(_.add, <span class="number">0</span>, xs) / xs.length</span><br><span class="line">&#125; <span class="comment">// &lt;- leave be</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> averageDollarValue = <span class="function"><span class="keyword">function</span>(<span class="params">cars</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dollar_values = _.map(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c.dollar_value</span><br><span class="line">  &#125;, cars)</span><br><span class="line">  <span class="keyword">return</span> _average(dollar_values)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 4:</span></span><br><span class="line"><span class="comment">// Write a function: sanitizeNames() using compose that returns a list of lowercase and underscored car's names: e.g: sanitizeNames([&#123;name: 'Ferrari FF', horsepower: 660, dollar_value: 700000, in_stock: true&#125;]) //=&gt; ['ferrari_ff'].</span></span><br><span class="line"><span class="keyword">var</span> _underscore = _.replace(<span class="regexp">/\W+/g</span>, <span class="string">'_'</span>) <span class="comment">//&lt;-- leave this alone and use to sanitize</span></span><br><span class="line"><span class="keyword">var</span> sanitizeNames = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bonus 1:</span></span><br><span class="line"><span class="comment">// Refactor availablePrices with compose.</span></span><br><span class="line"><span class="keyword">var</span> availablePrices = <span class="function"><span class="keyword">function</span>(<span class="params">cars</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> available_cars = _.filter(_.prop(<span class="string">'in_stock'</span>), cars)</span><br><span class="line">  <span class="keyword">return</span> available_cars.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accounting.formatMoney(x.dollar_value)</span><br><span class="line">  &#125;).join(<span class="string">', '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bonus 2:</span></span><br><span class="line"><span class="comment">// Refactor to pointfree. Hint: you can use _.flip().</span></span><br><span class="line"><span class="keyword">var</span> fastestCar = <span class="function"><span class="keyword">function</span>(<span class="params">cars</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sorted = _.sortBy(<span class="function"><span class="keyword">function</span>(<span class="params">car</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> car.horsepower</span><br><span class="line">  &#125;, cars)</span><br><span class="line">  <span class="keyword">var</span> fastest = _.last(sorted)</span><br><span class="line">  <span class="keyword">return</span> fastest.name + <span class="string">' is the fastest'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Answers-1"><a href="#Answers-1" class="headerlink" title="Answers"></a>Answers</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./support'</span>)</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> accounting = <span class="built_in">require</span>(<span class="string">'accounting'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CARS = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Ferrari FF"</span>, <span class="attr">horsepower</span>: <span class="number">660</span>, <span class="attr">dollar_value</span>: <span class="number">700000</span>, <span class="attr">in_stock</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Spyker C12 Zagato"</span>, <span class="attr">horsepower</span>: <span class="number">650</span>, <span class="attr">dollar_value</span>: <span class="number">648000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Jaguar XKR-S"</span>, <span class="attr">horsepower</span>: <span class="number">550</span>, <span class="attr">dollar_value</span>: <span class="number">132000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Audi R8"</span>, <span class="attr">horsepower</span>: <span class="number">525</span>, <span class="attr">dollar_value</span>: <span class="number">114200</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Aston Martin One-77"</span>, <span class="attr">horsepower</span>: <span class="number">750</span>, <span class="attr">dollar_value</span>: <span class="number">1850000</span>, <span class="attr">in_stock</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Pagani Huayra"</span>, <span class="attr">horsepower</span>: <span class="number">700</span>, <span class="attr">dollar_value</span>: <span class="number">1300000</span>, <span class="attr">in_stock</span>: <span class="literal">false</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isLastInStock = compose(_.prop(<span class="string">'in_stock'</span>), _.last)</span><br><span class="line"><span class="keyword">var</span> nameOfFirstCar = compose(_.prop(<span class="string">'name'</span>), _.head)</span><br><span class="line"><span class="keyword">var</span> _average = <span class="function"><span class="keyword">function</span>(<span class="params">xs</span>) </span>&#123; <span class="keyword">return</span> reduce(add, <span class="number">0</span>, xs) / xs.length &#125;</span><br><span class="line"><span class="keyword">var</span> averageDollarValue = compose(_average, map(_.prop(<span class="string">'dollar_value'</span>)))</span><br><span class="line"><span class="keyword">var</span> _underscore = replace(<span class="regexp">/\W+/g</span>, <span class="string">'_'</span>)</span><br><span class="line"><span class="keyword">var</span> sanitizeNames = map(compose(_underscore, toLowerCase, _.prop(<span class="string">'name'</span>)))</span><br><span class="line"><span class="keyword">var</span> formatPrice = compose( accounting.formatMoney, _.prop(<span class="string">'dollar_value'</span>))</span><br><span class="line"><span class="keyword">var</span> availablePrices = compose( join(<span class="string">', '</span>), map(formatPrice), filter(_.prop(<span class="string">'in_stock'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//+ fastestCar :: [Car] -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> append = _.flip(_.concat)</span><br><span class="line"><span class="keyword">var</span> fastestCar = compose(append(<span class="string">' is the fastest'</span>),</span><br><span class="line">                           _.prop(<span class="string">'name'</span>),</span><br><span class="line">                           _.last,</span><br><span class="line">                           _.sortBy(_.prop(<span class="string">'horsepower'</span>)))</span><br><span class="line"></span><br><span class="line">isLastInStock(CARS)           <span class="comment">// false</span></span><br><span class="line">nameOfFirstCar(CARS)          <span class="comment">// Ferrari FF</span></span><br><span class="line">averageDollarValue(CARS)      <span class="comment">// 790700</span></span><br><span class="line">sanitizeNames(CARS)           <span class="comment">// [ 'ferrari_ff', ...</span></span><br><span class="line">availablePrices(CARS)         <span class="comment">// $700,000.00, $1,850,000.00</span></span><br><span class="line">fastestCar(CARS)              <span class="comment">// Aston Martin One-77 is the fastest</span></span><br></pre></td></tr></table></figure><h2 id="Example-Application"><a href="#Example-Application" class="headerlink" title="Example Application"></a>Example Application</h2><h3 id="Declarative-Coding"><a href="#Declarative-Coding" class="headerlink" title="Declarative Coding"></a>Declarative Coding</h3><p>We are going to switch our mindset. From here on out, we’ll stop telling the computer how to do its job and instead write a specification of what we’d like as a result. I’m sure you’ll find it much less stressful than trying to micromanage everything all the time.</p><blockquote><p>Declarative, as opposed to imperative, means that we will write expressions, as opposed to step by step instructions. Think of SQL. There is no “first do this, then do that”. There is one expression that specifies what we’d like from the database.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// imperative</span></span><br><span class="line"><span class="keyword">var</span> makes = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> i &lt; cars.length i++) &#123;</span><br><span class="line">  makes.push(cars[i].make)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declarative</span></span><br><span class="line"><span class="keyword">var</span> makes = cars.map(<span class="function">(<span class="params">car</span>) =&gt;</span> car.make)</span><br></pre></td></tr></table></figure><p>It specifies what, not how. Thus, it wears the shiny declarative sash.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// imperative</span></span><br><span class="line"><span class="keyword">var</span> authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = toUser(form)</span><br><span class="line">  <span class="keyword">return</span> logIn(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declarative</span></span><br><span class="line"><span class="keyword">var</span> authenticate = compose(logIn, toUser)</span><br></pre></td></tr></table></figure><p>This leaves wiggle room for support code changes (different params for toUser) and results in our application code being a high level specification.</p><p>Because we are not encoding order of evaluation, declarative coding lends itself to parallel computing. This coupled with pure functions is why FP is a good option for the parallel future</p><h3 id="A-flickr-of-functional-programming"><a href="#A-flickr-of-functional-programming" class="headerlink" title="A flickr of functional programming"></a>A flickr of functional programming</h3><p>We will now build an example application in a declarative, composable way. We’ll still cheat and use side effects for now, but we’ll keep them minimal and separate from our pure codebase. We are going to build a browser widget that sucks in flickr images and displays them. Let’s start by scaffolding the app. Here’s the html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.11/require.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"flickr.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">requirejs.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    ramda: <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/ramda/0.13.0/ramda.min'</span>,</span><br><span class="line">    jquery: <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([</span><br><span class="line">    <span class="string">'ramda'</span>,</span><br><span class="line">    <span class="string">'jquery'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">_, $</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> trace = _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">tag, x</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(tag, x)</span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// app goes here</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>We’re pulling in <code>ramda</code> instead of <code>lodash</code> or some other utility library. It includes <code>compose</code>, <code>curry</code>, and more. I’ve used <code>requirejs</code>, which may seem like overkill, but we’ll be using it throughout and consistency is key. Also, I’ve started us off with our nice <code>trace</code> function for easy debugging.</p><p>Now that that’s out of the way, on to the spec. Our app will do 4 things.</p><ul><li>Construct a url for our particular search term</li><li>Make the flickr api call</li><li>Transform the resulting json into html images</li><li>Place them on the screen</li></ul><p>There are 2 impure actions mentioned above. Do you see them? Those bits about getting data from the flickr api and placing it on the screen. Let’s define those first so we can quarantine them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Impure = &#123;</span><br><span class="line">  getJSON: _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">callback, url</span>) </span>&#123;</span><br><span class="line">    $.getJSON(url, callback)</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  setHtml: _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">sel, html</span>) </span>&#123;</span><br><span class="line">    $(sel).html(html)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we’ve simply wrapped jQuery’s methods to be curried and we’ve swapped the arguments to a more favorable position. I’ve namespaced them with Impure so we know these are dangerous functions. In a future example, we will make these two functions pure.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="function"><span class="keyword">function</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'https://api.flickr.com/services/feeds/photos_public.gne?tags='</span> +</span><br><span class="line">    term + <span class="string">'&amp;format=json&amp;jsoncallback=?'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are fancy and overly complex ways of writing url pointfree using monoids(we’ll learn about these later) or combinators. We’ve chosen to stick with a readable version and assemble this string in the normal pointful fashion.</p><p>Let’s write an app function that makes the call and places the contents on the screen.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = _.compose(Impure.getJSON(trace(<span class="string">'response'</span>)), url)</span><br><span class="line"></span><br><span class="line">app(<span class="string">'picasso'</span>)</span><br></pre></td></tr></table></figure><p>Loading the app will show the response from the api call in the console.</p><figure class="highlight json"><figcaption><span>json response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"Recent Uploads tagged cats"</span>,</span><br><span class="line">  <span class="attr">"link"</span>: <span class="string">"https://www.flickr.com/photos/tags/cats/"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"modified"</span>: <span class="string">"2016-08-09T16:18:19Z"</span>,</span><br><span class="line">  <span class="attr">"generator"</span>: <span class="string">"https://www.flickr.com/"</span>,</span><br><span class="line">  <span class="attr">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"This little one followed our friend home and now she’s ours we just need a name! via http://ift.tt/29KELz0"</span>,</span><br><span class="line">    <span class="attr">"link"</span>: <span class="string">"https://www.flickr.com/photos/dozhub/28873505605/"</span>,</span><br><span class="line">    <span class="attr">"media"</span>: &#123;<span class="attr">"m"</span>:<span class="string">"https://farm8.staticflickr.com/7571/28873505605_0f1bf96d9d_m.jpg"</span>&#125;,</span><br><span class="line">    <span class="attr">"date_taken"</span>: <span class="string">"2016-08-09T09:18:19-08:00"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">" &lt;p&gt;&lt;a href=\"https://www.flickr.com/people/dozhub/\"&gt;dozhub&lt;\/a&gt; posted a photo:&lt;\/p&gt; &lt;p&gt;&lt;a href=\"https://www.flickr.com/photos/dozhub/28873505605/\" title=\"This little one followed our friend home and now she’s ours we just need a name! via http://ift.tt/29KELz0\"&gt;&lt;img src=\"https://farm8.staticflickr.com/7571/28873505605_0f1bf96d9d_m.jpg\" width=\"240\" height=\"126\" alt=\"This little one followed our friend home and now she’s ours we just need a name! via http://ift.tt/29KELz0\" /&gt;&lt;\/a&gt;&lt;\/p&gt; &lt;p&gt;This little one followed our friend home and now she’s ours we just need a name! -&lt;br /&gt; &lt;br /&gt; This little one followed our friend home and now she’s ours we just need a name! – Cats, kittens and kittys, cute and adorable! Aww! (via &lt;a href=\"http://ift.tt/29KELz0\" rel=\"nofollow\"&gt;ift.tt/29KELz0&lt;\/a&gt;)&lt;br /&gt; &lt;br /&gt; - via &lt;a href=\"http://ift.tt/29KELz0\" rel=\"nofollow\"&gt;ift.tt/29KELz0&lt;\/a&gt;. Cats, kittens and kittys, cute and adorable! Aww!&lt;\/p&gt;"</span>,</span><br><span class="line">    <span class="attr">"published"</span>: <span class="string">"2016-08-09T16:18:19Z"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"nobody@flickr.com (dozhub)"</span>,</span><br><span class="line">    <span class="attr">"author_id"</span>: <span class="string">"143919671@N07"</span>,</span><br><span class="line">    <span class="attr">"tags"</span>: <span class="string">"cat kitty kitten cute funny aww adorable cats"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We’d like to construct images out of this json. It looks like the srcs are buried in <code>items</code> then each <code>media</code>‘s <code>m</code> property. To get at these nested properties we can use a nice universal getter function from <code>ramda</code> called <code>_.prop()</code>. Let’s use this to get at our srcs.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>))</span><br><span class="line"><span class="keyword">var</span> srcs = _.compose(_.map(mediaUrl), _.prop(<span class="string">'items'</span>))</span><br></pre></td></tr></table></figure><p>Once we gather the items, we must map over them to extract each media url.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderImages = _.compose(Impure.setHtml(<span class="string">'body'</span>), srcs)</span><br><span class="line"><span class="keyword">var</span> app = _.compose(Impure.getJSON(renderImages), url)</span><br></pre></td></tr></table></figure><p>All we’ve done is make a new composition that will call our srcs and set the body html with them. We’ve replaced the trace call with renderImages. This will crudely display our srcs directly in the body.</p><p>Our final step is to turn these srcs into bonafide images. In a bigger application, we’d use a template/dom library like Handlebars or React. For this application though, we only need an img tag so let’s stick with jQuery.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $(<span class="string">'&lt;img /&gt;'</span>, &#123;</span><br><span class="line">    src: url</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jQuery’s html() method will accept an array of tags. We only have to transform our srcs into images and send them along to setHtml.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = _.compose(_.map(img), srcs)</span><br><span class="line"><span class="keyword">var</span> renderImages = _.compose(Impure.setHtml(<span class="string">'body'</span>), images)</span><br><span class="line"><span class="keyword">var</span> app = _.compose(Impure.getJSON(renderImages), url)</span><br><span class="line"></span><br><span class="line">app(<span class="string">'picasso'</span>)</span><br></pre></td></tr></table></figure><p>And we’re done!  Here’s the finished script.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">requirejs.config(&#123;</span><br><span class="line">  paths: &#123;</span><br><span class="line">    ramda: <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/ramda/0.13.0/ramda.min'</span>,</span><br><span class="line">    jquery: <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">require</span>([</span><br><span class="line">    <span class="string">'ramda'</span>,</span><br><span class="line">    <span class="string">'jquery'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">_, $</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> trace = _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">tag, x</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(tag, x)</span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Impure = &#123;</span><br><span class="line">      getJSON: _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">callback, url</span>) </span>&#123;</span><br><span class="line">        $.getJSON(url, callback)</span><br><span class="line">      &#125;),</span><br><span class="line">      setHtml: _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">sel, html</span>) </span>&#123;</span><br><span class="line">        $(sel).html(html)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url = <span class="function"><span class="keyword">function</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'https://api.flickr.com/services/feeds/photos_public.gne?tags='</span> +</span><br><span class="line">        term + <span class="string">'&amp;format=json&amp;jsoncallback=?'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>))</span><br><span class="line">    <span class="keyword">var</span> srcs = _.compose(_.map(mediaUrl), _.prop(<span class="string">'items'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> img = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="string">'&lt;img /&gt;'</span>, &#123;</span><br><span class="line">        src: url</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> images = _.compose(_.map(img), srcs)</span><br><span class="line">    <span class="keyword">var</span> renderImages = _.compose(Impure.setHtml(<span class="string">'body'</span>), images)</span><br><span class="line">    <span class="keyword">var</span> app = _.compose(Impure.getJSON(renderImages), url)</span><br><span class="line"></span><br><span class="line">    app(<span class="string">'picasso'</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="A-Principled-Refactor"><a href="#A-Principled-Refactor" class="headerlink" title="A Principled Refactor"></a>A Principled Refactor</h3><p>There is an optimization available - we map over each item to turn it into a media url, then we map again over those srcs to turn them into img tags. There is a law regarding map and composition:</p><blockquote><p>map’s composition law<br><code>var law = compose(map(f), map(g)) === map(compose(f, g))</code></p></blockquote><p>Let’s refactor from original</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// original code</span></span><br><span class="line"><span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> srcs = _.compose(_.map(mediaUrl), _.prop(<span class="string">'items'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> images = _.compose(_.map(img), srcs)</span><br></pre></td></tr></table></figure><p>to this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> images = _.compose(_.map(img), _.map(mediaUrl), _.prop(<span class="string">'items'</span>))</span><br></pre></td></tr></table></figure><p>to this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> images = _.compose(_.map(_.compose(img, mediaUrl)), _.prop(<span class="string">'items'</span>))</span><br></pre></td></tr></table></figure><p>Let’s just make it a little more readable by extracting the function out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediaToImg = _.compose(img, mediaUrl)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> images = _.compose(_.map(mediaToImg), _.prop(<span class="string">'items'</span>))</span><br></pre></td></tr></table></figure><p>Now the bugger will only loop once while turning each item into an img.</p><h3 id="Summary-4"><a href="#Summary-4" class="headerlink" title="Summary"></a>Summary</h3><p>We have seen how to put our new skills into use with a small, but real world app. We’ve also used our mathematical framework to reason about and refactor our code.</p><h2 id="Hindley-Milner-Type-Signatures"><a href="#Hindley-Milner-Type-Signatures" class="headerlink" title="Hindley-Milner Type Signatures"></a>Hindley-Milner Type Signatures</h2><blockquote><p>Hindley-Milner Type Signatures: a comment that documents a function with type data</p></blockquote><p>Takes a string and returns a string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  capitalize :: String -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> capitalize = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toUpperCase(head(s)) + toLowerCase(tail(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capitalize(<span class="string">"smurf"</span>)</span><br><span class="line"><span class="comment">//=&gt; "Smurf"</span></span><br></pre></td></tr></table></figure><p>An example of handling arrays and currying.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  strLength :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">var</span> strLength = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  join :: String -&gt; [String] -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> join = curry(<span class="function"><span class="keyword">function</span>(<span class="params">what, xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs.join(what)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  match :: Regex -&gt; String -&gt; [String]</span></span><br><span class="line"><span class="keyword">var</span> match = curry(<span class="function"><span class="keyword">function</span>(<span class="params">reg, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.match(reg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  replace :: Regex -&gt; String -&gt; String -&gt; String</span></span><br><span class="line"><span class="keyword">var</span> replace = curry(<span class="function"><span class="keyword">function</span>(<span class="params">reg, sub, s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(reg, sub)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>An example of handling function parameters.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  id :: a -&gt; a</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  map :: (a -&gt; b) -&gt; [a] -&gt; [b]</span></span><br><span class="line"><span class="keyword">var</span> map = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs.map(f)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let’s dissect the Hindley-Milner Type Signature of the <code>map</code> function:</p><table><thead><tr><th>about the map function</th><th></th></tr></thead><tbody><tr><td>function name</td><td>// <code>map</code> :: (a -&gt; b) -&gt; [a] -&gt; [b]</td></tr><tr><td>2 parameters</td><td>// map :: <code>(a -&gt; b) -&gt; [a]</code> -&gt; [b]</td></tr><tr><td>return value</td><td>// map :: (a -&gt; b) -&gt; [a] -&gt; <code>[b]</code></td></tr></tbody></table><p>What else can we infer about that function parameter?</p><table><thead><tr><th>about the function parameter</th><th>// map :: <code>(a -&gt; b)</code> -&gt; [a] -&gt; [b]</th></tr></thead><tbody><tr><td>only parameter <code>a</code></td><td>is the same type as <code>[a]</code> items</td></tr><tr><td>return value <code>b</code></td><td>is the same type as <code>[b]</code> items</td></tr></tbody></table><p>A few more…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  head :: [a] -&gt; a</span></span><br><span class="line"><span class="keyword">var</span> head = <span class="function"><span class="keyword">function</span>(<span class="params">xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  filter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span></span><br><span class="line"><span class="keyword">var</span> filter = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs.filter(f)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  reduce :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</span></span><br><span class="line"><span class="keyword">var</span> reduce = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, x, xs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xs.reduce(f, x)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let’s dissect the Hindley-Milner Type Signature of the <code>reduce</code> function:</p><table><thead><tr><th>about the reduce function</th><th></th></tr></thead><tbody><tr><td>function name</td><td>// <code>reduce</code> :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</td></tr><tr><td>3 parameters</td><td>// reduce :: <code>(b -&gt; a -&gt; b) -&gt; b -&gt; [a]</code> -&gt; b</td></tr><tr><td>return value</td><td>// reduce :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; <code>b</code></td></tr></tbody></table><p>What else can we deduce about that function parameter?</p><table><thead><tr><th>about the function parameter</th><th>// reduce :: <code>(b -&gt; a -&gt; b)</code> -&gt; b -&gt; [a] -&gt; b</th></tr></thead><tbody><tr><td>1<sup>st</sup> parameter <code>b</code></td><td>is the same type as the initializer</td></tr><tr><td>2<sup>nd</sup> parameter <code>a</code></td><td>is the same type as <code>[a]</code> items</td></tr><tr><td>return value <code>b</code></td><td>is the same type as the initializer</td></tr></tbody></table><h3 id="Parametricity"><a href="#Parametricity" class="headerlink" title="Parametricity"></a>Parametricity</h3><p>Once a <code>type variable</code> is introduced, there emerges a curious property called <code>parametricity</code>.</p><blockquote><p>parametricity states that a function will act on all types in a uniform manner.</p></blockquote><p>Let’s investigate:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head :: [a] -&gt; a</span></span><br></pre></td></tr></table></figure><p>Looking at head, we see that it takes <code>[a]</code> to <code>a</code>. Besides the concrete type array, it has no other information available and, therefore, its functionality is limited to working on the array alone. The return value <code>a</code> says it cannot be a specific type, which means it can be any type, which leaves us with a function that must work uniformly for every conceivable type. This is what parametricity is all about.</p><p>We can deduce that the function cannot change the type, narrowing the possible actions the function can take.</p><h3 id="Theorems"><a href="#Theorems" class="headerlink" title="Theorems"></a>Theorems</h3><p>A few random example theorems lifted directly from Wadler’s paper on the subject.</p><pre><code>// head :: [a] -&gt; acompose(f, head) == compose(head, map(f))// filter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]compose(map(f), filter(compose(p, f))) === compose(filter(p), map(f))</code></pre><p>The <code>head</code> theorem says that if we get the <code>head</code> of our array, then run some function <code>f</code> on it, that is equivalent to, and incidentally, much faster than, if we first <code>map(f)</code> over every element then take the <code>head</code> of the result.</p><p>You might think, well that’s just common sense. But last I checked, computers don’t have common sense. Indeed, they must have a formal way to automate these kind of code optimizations. Maths has a way of formalizing the intuitive, which is helpful amidst the rigid terrain of computer logic.</p><p>The <code>filter</code> theorem is similar. It says that if we compose <code>f</code> and <code>p</code> to check which should be filtered, then actually apply the <code>f</code> via <code>map</code> (remember filter, will not transform the elements - its signature enforces that a will not be touched), it will always be equivalent to mapping our <code>f</code> then filtering the result with the <code>p</code> predicate.</p><p>These are just two examples, but you can apply this reasoning to any <code>polymorphic type signature</code> and it will always hold. In JavaScript, there are some tools available to declare rewrite rules. One might also do this via the <code>compose</code> function itself. The fruit is low hanging and the possibilities are endless.</p><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><p>One last thing to note is that we can constrain types to an interface.</p><pre><code>// sort :: Ord a =&gt; [a] -&gt; [a]</code></pre><p>What we see on the left side of our fat arrow here is the statement of a fact: <code>a</code> must be an <code>Ord</code>. Or in other words, <code>a</code> must implement the <code>Ord interface</code>. What is Ord and where did it come from? In a typed language it would be a <code>defined interface</code> that says we can order the values. This not only tells us more about the <code>a</code> and what our sort function is up to, but also restricts the domain. We call these interface declarations <code>type constraints</code>.</p><pre><code>// assertEqual :: (Eq a, Show a) =&gt; a -&gt; a -&gt; Assertion</code></pre><p>Here, we have two constraints: <code>Eq</code> and <code>Show</code>. Those will ensure that we can check equality of our as and print the difference if they are not equal.</p><h3 id="Summary-5"><a href="#Summary-5" class="headerlink" title="Summary"></a>Summary</h3><p>Hindley-Milner type signatures are ubiquitous in the functional world. Though they are simple to read and write, it takes time to master the technique of understanding programs through signatures alone. We will add type signatures to each line of code from here on out.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>For this post we’ve covered the first 7 chapters of the book, but there is more to learn.  In the next post we will learn about error handling, code branching, how can we make the whole application pure instead of merely namespacing destructive functions, and how can we make our app safer and more expressive.</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> functional </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>promises using es6</title>
      <link href="/2015/09/22/20150922-promises-using-es6/"/>
      <url>/2015/09/22/20150922-promises-using-es6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Remember the <code>.then</code> section must have a function.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// BAD</span></span><br><span class="line">getJSON(<span class="string">'story.json'</span>)</span><br><span class="line">    .then(somePromise)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line">getJSON(<span class="string">'story.json'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> somePromise</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. Start a spinner to indicate loading</span></span><br><span class="line"><span class="comment">1. Fetch some JSON for a story, which gives us the title, and urls for each chapter</span></span><br><span class="line"><span class="comment">1. Add title to the page</span></span><br><span class="line"><span class="comment">1. Fetch each chapter</span></span><br><span class="line"><span class="comment">1. Add the story to the page</span></span><br><span class="line"><span class="comment">1. Stop the spinner</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line"></span><br><span class="line">    storyUrl: &#123;</span><br><span class="line">        bookname: <span class="string">'moby dick'</span>,</span><br><span class="line">        chapterUrls: [</span><br><span class="line">            <span class="string">'chapter1Url'</span>,</span><br><span class="line">            <span class="string">'chapter2Url'</span>,</span><br><span class="line">            <span class="string">'chapter3Url'</span>,</span><br><span class="line">            <span class="string">'chapter4Url'</span>,</span><br><span class="line">            <span class="string">'chapter5Url'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    chapter1Url: &#123;<span class="attr">html</span>: <span class="string">'we be chapter1'</span>&#125;,</span><br><span class="line">    chapter2Url: &#123;<span class="attr">html</span>: <span class="string">'we be chapter2'</span>&#125;,</span><br><span class="line">    chapter3Url: &#123;<span class="attr">html</span>: <span class="string">'we be chapter3'</span>&#125;,</span><br><span class="line">    chapter4Url: &#123;<span class="attr">html</span>: <span class="string">'we be chapter4'</span>&#125;,</span><br><span class="line">    chapter5Url: &#123;<span class="attr">html</span>: <span class="string">'we be chapter5'</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> startSpinner = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'starting spinner...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stopSpinner = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'stopping spinner...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> get = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> delay = <span class="built_in">Math</span>.random() * <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> response = <span class="built_in">JSON</span>.stringify(data[filename]);</span><br><span class="line">            resolve(response)</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getJSON = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> get(filename)</span><br><span class="line">        .then(<span class="built_in">JSON</span>.parse)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error: '</span>, err);</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addToPage = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'adding: '</span>, msg);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> main = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    startSpinner()</span><br><span class="line"></span><br><span class="line">    getJSON(<span class="string">'storyUrl'</span>)</span><br><span class="line">        .then(<span class="function">(<span class="params">story</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            addToPage(story.bookname);</span><br><span class="line"></span><br><span class="line">            story.chapterUrls</span><br><span class="line">                .map(getJSON)</span><br><span class="line">                .reduce(<span class="function">(<span class="params">sequence, chapterPromise</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> sequence</span><br><span class="line">                        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> chapterPromise</span><br><span class="line">                        &#125;)</span><br><span class="line">                        .then(<span class="function">(<span class="params">chapter</span>) =&gt;</span> &#123;</span><br><span class="line">                            addToPage(chapter.html)</span><br><span class="line">                        &#125;)</span><br><span class="line">                &#125;, <span class="built_in">Promise</span>.resolve())</span><br><span class="line">                .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'Error: '</span>, err);</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(stopSpinner)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">starting spinner...</span><br><span class="line">adding:  moby dick</span><br><span class="line">adding:  we be chapter1</span><br><span class="line">adding:  we be chapter2</span><br><span class="line">adding:  we be chapter3</span><br><span class="line">adding:  we be chapter4</span><br><span class="line">adding:  we be chapter5</span><br><span class="line">stopping spinner...</span><br><span class="line">[Finished in 3.8s]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> promises </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>promise test</title>
      <link href="/2015/08/30/20150830-promise-test/"/>
      <url>/2015/08/30/20150830-promise-test/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Quiz"><a href="#Quick-Quiz" class="headerlink" title="Quick Quiz"></a>Quick Quiz</h2><blockquote><p>Note: assume results are passed from each promise to the next.</p></blockquote><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doSomething()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">    &#125;)</span><br><span class="line">    then(finalHandler);</span><br></pre></td></tr></table></figure><pre><code>doSomething|-----------------|                  doSomethingElse(undefined)                  |------------------|                                     finalHandler(resultOfDoSomethingElse)                                     |------------------|</code></pre><blockquote><p><strong>What’s Wrong</strong><br>The result of doSomething() is not being passed to doSomethingElse()</p></blockquote><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doSomething()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      doSomethingElse();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(finalHandler);</span><br></pre></td></tr></table></figure><pre><code>doSomething|-----------------|                  doSomethingElse(undefined)                  |------------------|                  finalHandler(undefined)                  |------------------|</code></pre><blockquote><p><strong>What’s Wrong</strong><br>The result of doSomething() is not being passed to doSomethingElse()<br>Nothing is being returned by the anonomous function.</p></blockquote><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse())</span><br><span class="line">    .then(finalHandler);</span><br></pre></td></tr></table></figure><pre><code>doSomething|-----------------|doSomethingElse(undefined)|---------------------------------|                  finalHandler(resultOfDoSomething)                  |------------------|</code></pre><blockquote><p><strong>What’s Wrong</strong><br>Passing a <code>then</code> a promise is equivalent to null and thus treated as an error.</p></blockquote><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse)</span><br><span class="line">    .then(finalHandler);</span><br></pre></td></tr></table></figure><pre><code>doSomething|-----------------|                  doSomethingElse(resultOfDoSomething)                  |------------------|                                     finalHandler(resultOfDoSomethingElse)                                     |------------------|</code></pre><blockquote><p><strong>What’s Wrong</strong><br>Nothing wrong it’s a beauty.</p></blockquote><h2 id="Rookie-Mistakes"><a href="#Rookie-Mistakes" class="headerlink" title="Rookie Mistakes"></a>Rookie Mistakes</h2><h3 id="1-the-promisey-pyramid-of-doom"><a href="#1-the-promisey-pyramid-of-doom" class="headerlink" title="1: the promisey pyramid of doom"></a>1: the promisey pyramid of doom</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// BAD</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse)</span><br><span class="line">        .then(doSomethingElse)</span><br><span class="line">            .catch(err);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line">doSomething()</span><br><span class="line">    .then(doSomethingElse)</span><br><span class="line">    .then(doSomethingElse)</span><br><span class="line">    .catch(err);</span><br></pre></td></tr></table></figure><h3 id="2-WTF-how-do-I-use-forEach-with-promises"><a href="#2-WTF-how-do-I-use-forEach-with-promises" class="headerlink" title="2: WTF, how do I use forEach() with promises?"></a>2: WTF, how do I use forEach() with promises?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// BAD</span></span><br><span class="line"><span class="comment">// I want to remove() all docs</span></span><br><span class="line">db.allDocs().then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    result.rows.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">        db.remove(row.doc);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// I naively believe all docs have been removed() now!</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//GOOD</span></span><br><span class="line"><span class="comment">// I want to remove() all docs</span></span><br><span class="line">db.allDocs().then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(result.rows.map(<span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> db.remove(row.doc);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">arrayOfResults</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// All docs have really been removed() now!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-forgetting-to-add-catch"><a href="#3-forgetting-to-add-catch" class="headerlink" title="3: forgetting to add .catch()"></a>3: forgetting to add .catch()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line">somePromise()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> anotherPromise();</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yetAnotherPromise();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>));</span><br></pre></td></tr></table></figure><h3 id="4-using-“deferred”"><a href="#4-using-“deferred”" class="headerlink" title="4: using “deferred”"></a>4: using “deferred”</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'myfile.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, file</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(file);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="comment">/* ... */</span>)</span><br></pre></td></tr></table></figure><h3 id="5-using-side-effects-instead-of-returning"><a href="#5-using-side-effects-instead-of-returning" class="headerlink" title="5: using side effects instead of returning"></a>5: using side effects instead of returning</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// BAD</span></span><br><span class="line">somePromise()</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        someOtherPromise();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Gee, I hope someOtherPromise() has resolved!</span></span><br><span class="line">        <span class="comment">// Spoiler alert: it hasn't.</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line">getUserByName(<span class="string">'nolan'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getUserAccountById(user.id);</span><br><span class="line">        <span class="comment">// return another promise</span></span><br><span class="line">        <span class="comment">// return a synchronous value (or undefined)</span></span><br><span class="line">        <span class="comment">// throw a synchronous error</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// I got a user account!</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="Advanced-mistakes"><a href="#Advanced-mistakes" class="headerlink" title="Advanced mistakes"></a>Advanced mistakes</h2><h3 id="1-not-knowing-about-Promise-resolve"><a href="#1-not-knowing-about-Promise-resolve" class="headerlink" title="1: not knowing about Promise.resolve()"></a>1: not knowing about Promise.resolve()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">somePromiseAPI</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            doSomethingThatMayThrow();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'foo'</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="comment">/* ... */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-catch-isn’t-exactly-like-then-null-…"><a href="#2-catch-isn’t-exactly-like-then-null-…" class="headerlink" title="2: catch() isn’t exactly like then(null, …)"></a>2: catch() isn’t exactly like then(null, …)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Always use catch()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// then(success, failure) // does not catch all errors</span></span><br></pre></td></tr></table></figure><h3 id="3-promises-vs-promise-factories"><a href="#3-promises-vs-promise-factories" class="headerlink" title="3: promises vs promise factories"></a>3: promises vs promise factories</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// you want to execute a series of promises one after the other,</span></span><br><span class="line"><span class="comment">// in a sequence.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Per the promise spec, as soon as a promise is created,</span></span><br><span class="line"><span class="comment">// it begins executing.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BAD (executes in parallel)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeSequentially</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    promises.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promise</span>) </span>&#123;</span><br><span class="line">        result = result.then(promise);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeSequentially</span>(<span class="params">promiseFactories</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    promiseFactories.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promiseFactory</span>) </span>&#123;</span><br><span class="line">        result = result.then(promiseFactory);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    function myPromiseFactory() &#123;</span></span><br><span class="line"><span class="comment">        return somethingThatCreatesAPromise();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="4-okay-what-if-I-want-the-result-of-two-promises"><a href="#4-okay-what-if-I-want-the-result-of-two-promises" class="headerlink" title="4: okay, what if I want the result of two promises?"></a>4: okay, what if I want the result of two promises?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onGetUserAndUserAccount</span>(<span class="params">user, userAccount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> doSomething(user, userAccount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onGetUser</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getUserAccountById(user.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">userAccount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onGetUserAndUserAccount(user, userAccount);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserByName(<span class="string">'nolan'</span>)</span><br><span class="line">    .then(onGetUser)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// at this point, doSomething() is done, and we are back to indentation 0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-promises-fall-through"><a href="#5-promises-fall-through" class="headerlink" title="5: promises fall through"></a>5: promises fall through</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// BAD</span></span><br><span class="line"><span class="comment">// prints foo</span></span><br><span class="line"><span class="comment">// when you pass then() a non-function (such as a promise), it actually</span></span><br><span class="line"><span class="comment">// interprets it as then(null), which causes the previous promise's</span></span><br><span class="line"><span class="comment">// result to fall through.</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line">    .then(<span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>))</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// GOOD</span></span><br><span class="line"><span class="comment">// prints bar</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> promises </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
